Directory structure:
└── infokiller-i3-workspace-groups/
    ├── README.md
    ├── CHANGELOG.md
    ├── LICENSE
    ├── pyproject.toml
    ├── .editorconfig
    ├── .gitlab-ci.yml
    ├── i3wsgroups/
    │   ├── __init__.py
    │   ├── autoname_workspaces.py
    │   ├── cli.py
    │   ├── cli_util.py
    │   ├── config.py
    │   ├── controller.py
    │   ├── default_config.toml
    │   ├── i3_proxy.py
    │   ├── icons.py
    │   ├── log_util.py
    │   ├── polybar_module_updater.py
    │   ├── py_client.py
    │   └── workspace_names.py
    ├── req/
    │   ├── base.in
    │   ├── base.txt
    │   ├── conda_env.yml
    │   ├── dev-extra.in
    │   ├── dev-extra.txt
    │   ├── dev.in
    │   └── dev.txt
    ├── tests/
    │   ├── __init__.py
    │   ├── test_config.py
    │   ├── test_py_sockets.py
    │   ├── test_util.py
    │   └── test_workspace_names.py
    ├── tools/
    │   ├── lint
    │   ├── pipc
    │   └── release_to_pypi.sh
    └── .github/
        └── workflows/
            └── python-publish.yml

================================================
FILE: README.md
================================================
# i3 Workspace Groups

A Python library and set of command line tools for managing i3wm workspaces in
groups. I find this tool useful for managing many workspaces in i3.

[![PyPI version](https://badge.fury.io/py/i3-workspace-groups.svg)](https://badge.fury.io/py/i3-workspace-groups)
[![pipeline status](https://gitlab.com/infokiller/i3-workspace-groups/badges/master/pipeline.svg)](https://gitlab.com/infokiller/i3-workspace-groups/commits/master)

![Demo flow](./assets/demo.gif?raw=true)

## Table of Contents

- [Background](#background)
- [Installation](#installation)
- [Configuration](#configuration)
  - [i3](#i3)
  - [i3-workspace-groups](#i3-workspace-groups)
- [Usage](#usage)
  - [Example walk through](#example-walk-through)
- [Concepts](#concepts)
  - [Active workspace](#active-workspace)
  - [Active group](#active-group)
  - [Focused group](#focused-group)
  - [Default group](#default-group)
- [Limitations](#limitations)
  - [Sway compatibility](#sway-compatibility)
  - [Polybar](#polybar)

## Background

I often find myself working with many i3 workspaces at once (7-8+), usually
related to multiple projects/contexts (personal/work etc). This has caused me a
few issues, for example:

- Working with a set of workspaces of a given project/context, without being
  distracted by unrelated workspaces.
- Reusing the same workspace number in multiple projects/contexts. For example,
  I have two different emails for personal and work stuff, and I want `Super+1`
  to always switch to the workspace with the email client relevant to my current
  context.
- Finding a free workspace for a new window (that can also be reached with my
  keybindings)

This has led me to create the
[i3-workspace-groups](https://github.com/infokiller/i3-workspace-groups)
project, which enables you to define and manage groups of workspaces, each with
their own "namespace", and switch between them.

## Installation

The scripts can be installed using pip:

```shell
python3 -m pip install i3-workspace-groups
```

Then you should be able to run the command line tool
[`i3-workspace-groups`](bin/i3-workspace-groups). There are also a few utility
scripts provided that require [rofi](https://github.com/DaveDavenport/rofi) and
which are useful for interactively managing the groups, using rofi as the UI.
They include:

- [`i3-assign-workspace-to-group`](bin/i3-assign-workspace-to-group)
- [`i3-focus-on-workspace`](bin/i3-focus-on-workspace)
- [`i3-move-to-workspace`](bin/i3-move-to-workspace)
- [`i3-rename-workspace`](bin/i3-rename-workspace)
- [`i3-switch-active-workspace-group`](bin/i3-switch-active-workspace-group)

If you want to use client/server mode for improved speed/latency, it's
recommended to install one of the following tools to further improve speed:

- [socat](http://www.dest-unreach.org/socat/): available in all major distros
- BSD netcat (GNU version not supported)
- [ncat](https://nmap.org/ncat/)

## Configuration

### i3

In order to use these tools effectively, commands need to be bound to
keybindings. For example, my i3 config contains the following exerts:

<!-- markdownlint-disable fenced-code-language -->

```ini
set $mod Mod4

set $exec_i3_groups exec --no-startup-id i3-workspace-groups

# Switch active workspace group
bindsym $mod+g exec --no-startup-id i3-switch-active-workspace-group

# Assign workspace to a group
bindsym $mod+Shift+g exec --no-startup-id i3-assign-workspace-to-group

# Select workspace to focus on
bindsym $mod+w exec --no-startup-id i3-focus-on-workspace

# Move the focused container to another workspace
bindsym $mod+Shift+w exec --no-startup-id i3-move-to-workspace

# Rename/renumber workspace. Uses Super+Alt+n
bindsym Mod1+Mod4+n exec --no-startup-id i3-rename-workspace

bindsym $mod+1 $exec_i3_groups workspace-number 1
bindsym $mod+2 $exec_i3_groups workspace-number 2
bindsym $mod+3 $exec_i3_groups workspace-number 3
bindsym $mod+4 $exec_i3_groups workspace-number 4
bindsym $mod+5 $exec_i3_groups workspace-number 5
bindsym $mod+6 $exec_i3_groups workspace-number 6
bindsym $mod+7 $exec_i3_groups workspace-number 7
bindsym $mod+8 $exec_i3_groups workspace-number 8
bindsym $mod+9 $exec_i3_groups workspace-number 9
bindsym $mod+0 $exec_i3_groups workspace-number 10

bindsym $mod+Shift+1 $exec_i3_groups move-to-number 1
bindsym $mod+Shift+2 $exec_i3_groups move-to-number 2
bindsym $mod+Shift+3 $exec_i3_groups move-to-number 3
bindsym $mod+Shift+4 $exec_i3_groups move-to-number 4
bindsym $mod+Shift+5 $exec_i3_groups move-to-number 5
bindsym $mod+Shift+6 $exec_i3_groups move-to-number 6
bindsym $mod+Shift+7 $exec_i3_groups move-to-number 7
bindsym $mod+Shift+8 $exec_i3_groups move-to-number 8
bindsym $mod+Shift+9 $exec_i3_groups move-to-number 9
bindsym $mod+Shift+0 $exec_i3_groups move-to-number 10

# Switch to previous/next workspace (in all groups).
bindsym $mod+p workspace prev
bindsym $mod+n workspace next

bar {
  strip_workspace_numbers yes
  # The rest of your bar config goes below.
  # ...
}
```

### i3-workspace-groups

i3-workspace-groups has an optional config file located at
`$XDG_CONFIG_HOME/i3-workspace-groups/config.toml` (defaults to
`~/.config/i3-workspace-groups/config.toml`). See the
[default config file](./i3wsgroups/default_config.toml) for all the possible
options to configure, their meaning, and their default values.

## Usage

The main operations the CLI tool `i3-workspace-groups` supports are:

- Assign the focused workspace to a group with a given name (and creating the
  group if it doesn't exist).
- Switch the currently [active group](#active-group). Note that the active group
  is not necessarily the same as the [focused group](#focused-group).
- Navigation and movement within a group while ignoring the other groups. See
  examples below.

The tools provided use i3 workspace names to store and read the group for each
workspace. For example, if a user assigns the workspace `mail` to the group
`work`, it will be renamed to `work:mail`.

### Example walk through

> **NOTE:** This walk through assumes that you configured keybindings like the
> [example i3 config](#i3).

Say we start with the following workspace names:

1. `1` with cat videos from YouTube.
2. `2` with a news reader.
3. `3` with a photo editor.
4. `4` with an email client for work.

An important thing to understand here is that every i3 workspace is always
assigned to a single group. And since we haven't assigned any workspace to a
group yet, all the workspaces are implicitly in the
[default group](#default-group), which is denoted as `<default>`.

After a few hours of leisure time, you decide to do some work, which requires
opening a few windows on a few workspaces. In order to create a new group, first
you switch to the workspace `4`, and then you press `Super+Shift+g`, which will
prompt you for a group to assign to the current workspace. You type `work` and
press enter. Since there's no group named `work` yet, the tool will create it
and assign the focused workspace to it. You will then notice that the workspace
name will change in i3bar to `work:4`. Then, you press `Super+g` in order to
switch the [active group](#active-group). You will be shown a list of existing
groups, which will now be `work` and `<default>`. You should now see your
workspaces in i3bar ordered as following: `work:4`, `1`, `2`, `3`. What happened
here? When you switched to the `work` group, the first thing that the tool did
was to move all the workspaces in the work group (only `work:mail`) to be in the
beginning of the workspace list. Then, it renamed the workspaces in the default
group to include the group name, so that they can be differentiated from other
workspaces in the `work` group with the same name.

Then, you decide that you want to open a new terminal window in a new workspace.
So you press `Super+2`, which will move you to a new workspace named `work:2`.
Note that although there is already a workspace with the name `2` in the default
group (now shown as `2` in the workspace list), using `Super+2` actually takes
you to a new empty workspace in the group `work`.

After some time working, you become lazy and you want to get back to cat videos,
but you promise yourself to get back to work in a few hours, and you don't want
to lose your open windows. So you press `Super+g` to switch the active work back
to the default one. You should now see your workspaces in i3bar ordered as
following: `1`, `2`, `3`, `work:4`. The focus will also shift to the first
workspace in the default group (`1` in this case). Now that you're back in the
default group, pressing `Super+2` will again lead you to the workspace `2` in
the default group.

## Concepts

### Active workspace

The active workspace is the workspace with the lowest number. Typically, this
will be the workspace that appears first in the workspace list in i3bar (the
leftmost one).

> **NOTE:** In a multi-monitor setup, there is an active workspace per monitor.
>
> **NOTE:** The active workspace is not necessarily the focused workspace.

### Active group

The active group is the group of the [active workspace](#active-workspace). This
group will normally contain workspaces related to the task you're doing at the
time it's active. When you want to work on another task, you can switch the
active group. Workspaces that are not in the active group can still be
interacted with, but some commands provided are designed to make it easier to
interact with the workspaces of the active group.

> **NOTE:** In a multi-monitor setup, there is an active group per monitor.

### Focused group

The group of the focused workspace.

### Default group

The group of workspaces that were not assigned to a group by the user. This
group is displayed as `<default>`. When you start using i3-workspace-groups,
none of your current workspaces will be assigned to a group yet, so they will
all be in the default group.

## Limitations

- **Interaction with other i3 tools**: workspace names are used for storing the
  group, so if another tool changes a workspace name without preserving the
  format that i3-workspace-groups uses, i3-workspace-groups can make a mistake
  about the group assignment.
- ~~**Latency**: there can be noticeable latency in some machines for the script
  commands. On my high performance desktop this is not noticeable, but on my
  laptop it is. I measured the latency of commands to be around 100-200 ms, most
  of it coming from importing python libraries, so it's not possible to reduce
  it much without running it as a daemon (which will overcomplicate things). In
  the long term, I plan to rewrite it in go.~~ **UPDATE**: there is a new
  experimental client/server mode which significantly reduces latency.
  Documentation is still WIP (see
  <https://github.com/infokiller/i3-workspace-groups/issues/52>).
- **Number of monitors/groups/workspaces**: Supports up to 10 monitors, each
  containing up to 100 groups, each containing up to 100 workspaces.

### Sway compatibility

This project depends on [i3ipc](https://github.com/acrisci/i3ipc-python) for its
interaction with i3, so should also work the same on sway. That said, I don't
test it on sway and i3 is my main window manager.

### Polybar

The official `internal/i3` module does not support workspace groups.

In order to display workspace information in polybar, there are two steps:

1. Add the custom i3 workspace groups module to your polybar
2. Run a script in the background to update polybar's display whenever an i3
   window event occurs

#### 1. Add the custom i3 workspace groups module to your polybar config

Create an `i3-mod` module by adding the following to your polybar config:

```
[module/i3-mod]
type = custom/ipc
hook-0 = ${env:I3_MOD_HOOK}
initial = 1
```

Then, add the `i3-mod` module to your modules:

```
modules-center = i3-mod
```

Then, when launching polybar, do something like the following to configure the
`I3_MOD_HOOK`:

```bash
while IFS='' read -r monitor; do
    i3_mod_hook="i3-workspace-groups polybar-hook --monitor '${monitor}'"
    I3_MOD_HOOK="${i3_mod_hook}" polybar your-bar-name &
done < <(polybar --list-monitors | cut -d':' -f1)
```

#### 2. Run a background script to update polybar's on i3 events

Run the
[i3-groups-polybar-module-updater](./bin/i3-groups-polybar-module-updater)
script. This script is responsible for calling the hook to update polybar
whenever a relevant i3 window event occurs.



================================================
FILE: CHANGELOG.md
================================================
# Changelog for i3-workspace-groups

## 0.5.0 (pre-release)

## 0.4.7

- Add client/server mode
- Add `workspace-new` command to create a workspace with the first available
  number.
- Add `move-to-new` command to move the focused container to a new workspace
  with the first available number.
- Add `--no-auto-back-and-forth` option to `workspace-number` and
  `move-to-number` commands.
- Add `--use-next-available-number` option to `assign-workspace-to-group`
  command and `use_next_available_number` option to the config file for using
  the first available relative number when assigning or renaming a workspace to
  a group that already has another workspace with that relative number (see #33).

## 0.4.6

- Add configuration file with support for customizing icons

## 0.4.5

- Fix multi monitor issues
- Show monitor name in output of `list-groups` subcommand
- Respect `workspace_auto_back_and_forth` setting (fixes #9)
- Deprecate `workspace-back-and-forth` and `move-to-back-and-forth` now that
  built-in i3 commands should work
- Move group CLI arguments to specific subcommands used
- Support focusing and moving to workspaces that don't exist (fixes #10)
- Support renaming, renumbering, and regrouping workspaces in i3-rename-workspace



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2018 infokiller

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: pyproject.toml
================================================
[project]
name = 'i3-workspace-groups'
readme = 'README.md'
dynamic = ['version', 'dependencies', 'optional-dependencies']
requires-python = '>=3.9'
license = {file = 'LICENSE'}
classifiers = [
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'Operating System :: POSIX :: Linux',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
]

[build-system]
requires = ['setuptools>=68.0', 'setuptools-scm>=7.0']
build-backend = 'setuptools.build_meta'
# requires = ['hatchling']
# build-backend = 'hatchling.build'
[project.scripts]
i3-workspace-groups = 'i3wsgroups.cli:main'
i3-autoname-workspaces = 'i3wsgroups.autoname_workspaces:main'
i3-groups-polybar-module-updater = 'i3wsgroups.polybar_module_updater:main'
i3-workspace-groups-nc = 'i3wsgroups.py_client:main'

[tool.setuptools]
packages = ['i3wsgroups']
script-files = [
  'bin/i3-assign-workspace-to-group',
  'bin/i3-focus-on-workspace',
  'bin/i3-groups-polybar-module',
  'bin/i3-move-to-workspace',
  'bin/i3-rename-workspace',
  'bin/i3-select-workspace-group',
  'bin/i3-switch-active-workspace-group',
  'bin/i3-workspace-groups-client',
]


[tool.setuptools_scm]
write_to = 'i3wsgroups/__version__.py'

[tool.setuptools.dynamic]
dependencies = { file = ['req/base.in'] }
optional-dependencies.dev = { file = ['req/dev.in'] }
optional-dependencies.dev_extra = { file = ['req/dev-extra.in'] }

[tool.pip-tools]
generate-hashes = true
allow-unsafe = true
strip-extras = true

[tool.yapf]
based_on_style = 'google'
column_limit = 100

[tool.yapfignore]
ignore_patterns = [
  'build',
  'cache',
  'assets',
  'data',
  'refs',
  'logs',
  'repos',
  '.tox',
  '.pytype',
  'bazel-*/**',
]

[tool.isort]
profile = 'google'
line_length = 100
# src_paths = ['i3wsgroups', 'tests', 'bin', 'tools']
extend_skip = [
  'build',
  'cache',
  'assets',
  'data',
  'refs',
  'logs',
  'repos',
  '.tox',
  '.pytype',
]
extend_skip_glob = [
  'bazel-*',
  '**/__version__.py',
]

[tool.pyright]
include = ['i3wsgroups', 'tests', 'bin', 'tools']
ignore = [
  # TODO: fix pyright errors in i3_proxy.py
  'i3wsgroups/i3_proxy.py',
  # TODO: fix pyright errors in controller.py
  'i3wsgroups/controller.py',
]

# https://beta.ruff.rs/docs/settings
[tool.ruff]
# Enable pycodestyle warnings (`W`)
extend-select = ['W']
# include = ['i3wsgroups', 'tests', 'bin', 'tools']
extend-exclude = [
  'build',
  'cache',
  'assets',
  'data',
  'refs',
  'logs',
  'repos',
  'bazel-*',
  '.tox',
  '.pytype',
  '**/__version__.py',
]
# Force ruff to exclude files even if they are explicitly passed in a CLI invocation.
# This is required for Vim ALE to not show errors for these files, since it passes them
# via stdin, which is considered as an explicit invocation.
# https://github.com/astral-sh/ruff/discussions/5857#discussioncomment-6583943
force-exclude = true
# Consistent with yapf
line-length = 100

[tool.pylint.main]
max-line-length = 100
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
# extension-pkg-allow-list = ['lxml']
# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = 10
# Good variable names which should always be accepted, separated by a comma.
good-names = ['i', 'j', 'k', 'e', 'f', 'ex', 'fd', 'fp', 'logger', '_']
# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs = ['_?[a-z]']
# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
module-rgx = '[a-z_][a-z0-9_-]{2,30}$'
# Lone comment lines URLs are OK
ignore-long-lines = 'https?://\S{10,}|nosemgrep'
# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
  'raw-checker-failed', 'bad-inline-option', 'locally-disabled', 'file-ignored',
  'suppressed-message', 'useless-suppression', 'deprecated-pragma',
  'use-symbolic-message-instead', 'fixme', 'missing-module-docstring',
  'missing-class-docstring', 'missing-function-docstring',
  'logging-format-interpolation', 'logging-fstring-interpolation',
  'consider-using-f-string', 'too-few-public-methods',
]
ignore-paths = [
  'build',
  'cache',
  'assets',
  'data',
  'refs',
  'logs',
  'repos',
  'bazel-.*',
  '.tox',
  '.pytype',
  '.*/__version__.py$',
]

[tool.pyflyby]
align_imports = '0'
from_spaces = 0

[tool.tox]
legacy_tox_ini = '''
[tox]
envlist = py38,py39,py310,py311,py312

[testenv]
passenv = TOXENV CI TRAVIS TRAVIS_* CODECOV_*
# --no-deps is needed to avoid errors like:
# https://github.com/pypa/pip/issues/9644#issuecomment-788108944
install_command = python -I -m pip install --no-deps {opts} {packages}
deps = 
    -r req/base.txt
    -r req/dev.txt
skip_install = true
commands = 
    pytest --cov=. --cov-report=xml
    # The pip package for codecov was deprecated:
    # https://docs.codecov.com/docs/deprecated-uploader-migration-guide#python-uploader
    # TODO: Use the new uploader once it's available on PyPI, or install it in
    # docker.
    # codecov -e CODECOV_TOKEN
'''

[tool.semantic_release]
version_variables = ['i3wsgroups/__version__.py:__version__']



================================================
FILE: .editorconfig
================================================
# http://editorconfig.org
root = true

[*]
charset=utf-8
end_of_line=lf
indent_size=2
indent_style=space
insert_final_newline=true
trim_trailing_whitespace=true

[*.py]
indent_size=4
max_line_length=100

[*.md]
indent_size=2



================================================
FILE: .gitlab-ci.yml
================================================
image: python:3.11

before_script:
  - apt-get update -qq && apt-get install -y -qq python3-pip shellcheck
  - which python3
  - python3 --version
  # --no-deps is needed to avoid errors like:
  # https://github.com/pypa/pip/issues/9644#issuecomment-788108944
  - python3 -m pip install --no-deps -r req/base.txt -r req/dev.txt

pylint:
  script: pylint -j 8 --recursive=y .

ruff:
  script: ruff check .

yapf:
  script: yapf -d -r -p .

isort:
  script: isort --check --diff .

pytype_py38:
  image: python:3.8
  script:
    - python3 -m pip install pytype
    - pytype i3wsgroups

pytype_py39:
  image: python:3.9
  script:
    - python3 -m pip install pytype
    - pytype i3wsgroups

pytype_py310:
  image: python:3.10
  script:
    - python3 -m pip install pytype
    - pytype i3wsgroups

pytype_py311:
  image: python:3.11
  script:
    - python3 -m pip install pytype
    - pytype i3wsgroups

pyright_py39:
  image: python:3.9
  script:
    - pyright

pyright_py310:
  image: python:3.10
  script:
    - pyright

pyright_py311:
  image: python:3.11
  script:
    - pyright

pyright_py312:
  image: python:3.12
  script:
    - pyright

test_py38:
  image: python:3.8
  script: tox -e py38

test_py39:
  image: python:3.9
  script: tox -e py39

test_py310:
  image: python:3.10
  script: tox -e py310

test_py311:
  image: python:3.11
  script: tox -e py311

test_py312:
  image: python:3.12
  script: tox -e py312

shellcheck:
  script:
    - shellcheck bin/i3-assign-workspace-to-group
    - shellcheck bin/i3-focus-on-workspace
    - shellcheck bin/i3-move-to-workspace
    - shellcheck bin/i3-rename-workspace
    - shellcheck bin/i3-switch-active-workspace-group



================================================
FILE: i3wsgroups/__init__.py
================================================
[Empty file]


================================================
FILE: i3wsgroups/autoname_workspaces.py
================================================
#!/usr/bin/env python3
# pylint: disable=invalid-name
# Inspired by:
# https://github.com/maximbaz/dotfiles/blob/master/bin/i3-autoname-workspaces

from __future__ import annotations

import argparse
import logging
import logging.handlers
import os.path
import pprint

import i3ipc
import i3ipc.events

from i3wsgroups import cli_util
from i3wsgroups import controller
from i3wsgroups import i3_proxy
from i3wsgroups import log_util
from i3wsgroups import workspace_names

init_logger = log_util.init_logger
logger = log_util.logger


class WorkspaceAutonamer:

    def __init__(self, config, dry_run: bool = True):
        self.dry_run = dry_run
        self.config = config

    def create_controller(self,
                          i3_connection: i3ipc.Connection) -> controller.WorkspaceGroupsController:
        return controller.WorkspaceGroupsController(i3_proxy.I3Proxy(i3_connection, self.dry_run),
                                                    self.config)

    def update_workspace_names(self, i3_connection: i3ipc.Connection) -> None:
        groups_controller = self.create_controller(i3_connection)
        group_to_workspaces = workspace_names.get_group_to_workspaces(
            groups_controller.i3_proxy.get_monitor_workspaces())
        groups_controller.organize_workspace_groups(list(group_to_workspaces.items()))

    def window_event_handler(self, i3_connection: i3ipc.Connection,
                             event: i3ipc.events.IpcBaseEvent) -> None:
        assert isinstance(event, i3ipc.WindowEvent)
        logger.debug('Got window event with change: %s', event.change)
        if event.change in ['new', 'close', 'move']:
            self.update_workspace_names(i3_connection)

    def workspace_event_handler(self, i3_connection: i3ipc.Connection,
                                event: i3ipc.events.IpcBaseEvent):
        assert isinstance(event, i3ipc.WorkspaceEvent)
        logger.debug('Got workspace event with change: %s', event.change)
        # We must update the workspace names on a focus event because the
        # workspace focus change may be due to navigating away from an empty
        # workspace that was the only one in the active group. In that case, the
        # next group becomes active, so the icons should be restored to the
        # workspace names.
        if event.change == 'focus':
            self.update_workspace_names(i3_connection)


def main():
    parser = argparse.ArgumentParser(
        description='Runs in the background and automatically renames i3 '
        'workspaces according to the running apps.')
    cli_util.add_common_args(parser)
    cli_util.add_workspace_naming_args(parser)
    args = parser.parse_args()
    init_logger(os.path.basename(__file__))
    logger.setLevel(getattr(logging, args.log_level.upper(), 'WARNING'))

    config = cli_util.get_config_with_overrides(args)
    logger.debug('Using merged config:\n%s', pprint.pformat(config))

    autonamer = WorkspaceAutonamer(config, args.dry_run)
    i3_connection = i3ipc.Connection()
    autonamer.update_workspace_names(i3_connection)
    i3_connection.on(i3ipc.Event.WINDOW, autonamer.window_event_handler)
    i3_connection.on(i3ipc.Event.WORKSPACE_FOCUS, autonamer.workspace_event_handler)
    i3_connection.main()


if __name__ == '__main__':
    main()



================================================
FILE: i3wsgroups/cli.py
================================================
#!/usr/bin/env python3

from __future__ import annotations

import argparse
import logging
import os.path
import pprint
import sys

import i3ipc

from i3wsgroups import cli_util
from i3wsgroups import controller as i3_groups_controller
from i3wsgroups import i3_proxy
from i3wsgroups import log_util
from i3wsgroups import workspace_names

_LIST_WORKSPACES_FIELDS = workspace_names.WORKSPACE_NAME_SECTIONS + [
    'window_icons', 'global_name', 'monitor', 'focused'
]
_LIST_WORKSPACES_FIELDS_HELP = ('Comma separated list of fields to output. '
                                f'Options: {", ".join(_LIST_WORKSPACES_FIELDS)}')

init_logger = log_util.init_logger
logger = log_util.logger


def _add_group_args(parser: argparse.ArgumentParser) -> None:
    # The argparse argument group of the workspace group arguments.
    group_arg_group = parser.add_mutually_exclusive_group()
    group_arg_group.add_argument('--group-active',
                                 action='store_true',
                                 default=None,
                                 help='Use the active group for commands that implicitly assume a '
                                 'group, such as workspace-next.')
    group_arg_group.add_argument('--group-focused',
                                 action='store_true',
                                 default=None,
                                 help='Use the focused group for commands that implicitly assume a '
                                 'group, such as workspace-next.')
    group_arg_group.add_argument('--group-name')


def _add_list_workspaces_args(parser: argparse.ArgumentParser) -> None:
    _add_group_args(parser)
    parser.add_argument('--fields',
                        default=','.join(_LIST_WORKSPACES_FIELDS),
                        help=_LIST_WORKSPACES_FIELDS_HELP)
    parser.add_argument('--focused-only',
                        action='store_true',
                        help='List only the focused workspace in the given group context.')
    parser.add_argument('--focused-monitor-only',
                        action='store_true',
                        help='List only workspaces on the current monitor.')


def _add_rename_workspace_args(parser: argparse.ArgumentParser) -> None:
    parser.add_argument('--name',
                        help='New name to set for the workspace.\n'
                        'Note that this is not the same as the workspace number.\n'
                        'If not provided, keeps the existing name.')
    parser.add_argument('--number',
                        type=int,
                        help='New number to set for the workspace.\n'
                        'Note that this is not the same as the workspace name.\n'
                        'If not provided, keeps the existing number.')
    parser.add_argument('--group',
                        help='Group to assign to the focused workspace. If not provided, keeps '
                        'the existing group assignment.')


def _create_args_parser() -> cli_util.ArgumentParserNoExit:
    parser = cli_util.ArgumentParserNoExit(description='Control i3 workspace groups.')
    cli_util.add_common_args(parser)
    cli_util.add_workspace_naming_args(parser)
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    polybar_hook_parser = subparsers.add_parser(
        'polybar-hook', help='Return text for displaying to polybar i3-mod module')
    polybar_hook_parser.add_argument('--line-color', type=str, default="#ff9900")
    polybar_hook_parser.add_argument('--monitor', type=str)

    list_groups_parser = subparsers.add_parser('list-groups',
                                               help='List the groups of the current workspaces.')
    list_groups_parser.add_argument('--focused-monitor-only',
                                    action='store_true',
                                    help='List only workspaces in the current monitor.')
    list_workspaces_parser = subparsers.add_parser('list-workspaces',
                                                   help='List workspaces and their group.')
    _add_list_workspaces_args(list_workspaces_parser)
    workspace_number_parser = subparsers.add_parser(
        'workspace-number',
        help='Focus on the workspace with the provided number in the focused '
        'group, similar to i3\'s "workspace number" command')
    workspace_number_parser.add_argument('--no-auto-back-and-forth', action='store_true')
    workspace_number_parser.add_argument('workspace_relative_number', type=int)
    _add_group_args(workspace_number_parser)
    subparsers.add_parser('workspace-next',
                          help='Focus on the next workspace in the focused group, similar to '
                          'i3\'s "workspace next" command')
    subparsers.add_parser('workspace-prev',
                          help='Focus on the prev workspace in the focused group, similar to '
                          'i3\'s "workspace prev" command')
    workspace_new_parser = subparsers.add_parser(
        'workspace-new',
        help='Create a new workspace in the focused group with the lowest '
        'available number.')
    _add_group_args(workspace_new_parser)
    move_to_number_parser = subparsers.add_parser(
        'move-to-number',
        help='Move the focused container to the workspace with the provided '
        'number in the focused group, similar to i3\'s "move container to '
        'workspace" command')
    move_to_number_parser.add_argument('--no-auto-back-and-forth', action='store_true')
    move_to_number_parser.add_argument('workspace_relative_number', type=int)
    _add_group_args(move_to_number_parser)
    subparsers.add_parser('move-to-next',
                          help='Move the focused container to the next workspace in the focused '
                          'group, similar to i3\'s "move container to workspace next" command')
    subparsers.add_parser('move-to-prev',
                          help='Move the focused container to the previous workspace in the '
                          'focused group, similar to i3\'s "move container to workspace prev" '
                          'command')
    move_to_new_parser = subparsers.add_parser(
        'move-to-new',
        help='Move the focused container to a new workspace in the focused '
        'group with the lowest available number.')
    _add_group_args(move_to_new_parser)
    switch_active_group_parser = subparsers.add_parser(
        'switch-active-group', help='Switch the active group to the one provided.')
    switch_active_group_parser.add_argument('--focused-monitor-only', action='store_true')
    switch_active_group_parser.add_argument('group')
    rename_workspace_parser = subparsers.add_parser(
        'rename-workspace', help='Rename and optionally change the group of the focused workspace')
    _add_rename_workspace_args(rename_workspace_parser)
    assign_workspace_subparser = subparsers.add_parser(
        'assign-workspace-to-group', help='Assign the focused workspace to the provided group.')
    assign_workspace_subparser.add_argument(
        '--use-next-available-number',
        action='store_true',
        help='If a workspace is moved to another group which already has a '
        'workspace with the same number, use the next available number instead '
        ' of failing.')
    assign_workspace_subparser.add_argument('group')
    server_subparser = subparsers.add_parser('server')
    server_subparser.add_argument(
        '--server-addr',
        default=os.path.expandvars('${XDG_RUNTIME_DIR}/i3-workspace-groups-' +
                                   os.environ['DISPLAY'].replace(':', '')),
        help='Path for the unix domain socket used by the server')
    # Deprecated commands, will be removed in a future release.
    subparsers.add_parser('workspace-back-and-forth',
                          help='[DEPRECATED] Focus on the last focused workspace, similar to '
                          'i3\'s "workspace back_and_forth" command.')
    subparsers.add_parser('move-to-back-and-forth',
                          help='[DEPRECATED] Move the focused container to the last focused '
                          'workspace, similar to i3\'s "move container to back_and_forth" command')
    return parser


def _create_group_context(args):
    # args.group_name is empty if it refers to the default group
    if args.group_name is not None:
        return i3_groups_controller.NamedGroupContext(args.group_name)
    if args.group_active:
        return i3_groups_controller.ActiveGroupContext()
    if args.group_focused:
        return i3_groups_controller.FocusedGroupContext()
    return None


def _get_workspace_field(controller, workspace, field):
    if field == 'global_name':
        return workspace.name
    if field == 'focused':
        return 1 if workspace.find_focused() is not None else 0
    if field == 'monitor':
        con = workspace
        while con.type != 'output':
            con = con.parent
        return con.name
    if field == 'window_icons':
        return controller.icons_resolver.get_workspace_icons(workspace)
    parsed_name = workspace_names.parse_name(workspace.name)
    value = getattr(parsed_name, field)
    if value is None:
        return ''
    return value


def _print_workspaces(controller, args):
    fields = args.fields.split(',')
    for field in fields:
        if field not in _LIST_WORKSPACES_FIELDS:
            sys.exit(f'Invalid field: "{field}". Valid fields: '
                     f'{_LIST_WORKSPACES_FIELDS}')
    table = []
    for workspace in controller.list_workspaces(_create_group_context(args), args.focused_only,
                                                args.focused_monitor_only):
        row = []
        for field in fields:
            row.append(_get_workspace_field(controller, workspace, field))
        table.append(row)
    return '\n'.join('\t'.join(str(e) for e in row) for row in table)


# pylint: disable-next=too-many-statements
def serve(i3_connection, server_addr):
    # Add the imports here to avoid having a negative effect on clients not
    # using the server.
    # pylint: disable-next=import-outside-toplevel
    # import shlex
    # pylint: disable-next=import-outside-toplevel
    import socket

    # Make sure the socket does not already exist
    # TODO: lock the socket to avoid multiple servers trying to use the same
    # one.
    try:
        os.unlink(server_addr)
    except OSError:
        if os.path.exists(server_addr):
            raise
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(server_addr)
    sock.listen(1)
    while True:
        parser = _create_args_parser()
        logger.debug('Waiting for a connection')
        connection, addr = sock.accept()
        logger.debug(f'Connection from: {addr}')
        data = connection.recv(10000)
        if len(data) == 10000:
            logger.warning('Skipping unusually long command')
            continue
        try:
            client_argv = [s.decode('utf-8') for s in data.split(b'\n')]
        except UnicodeError:
            logger.warning('Failed decoding command args as utf-8')
            continue
        logger.info(f'Argv from client: {client_argv}')
        try:
            client_args = parser.parse_args(client_argv)
            if client_args.command == 'server':
                logger.warning('Ignoring nested server command')
                continue
            output = run_command(i3_connection, client_args)
            connection.sendall(output.encode('utf-8'))
        # argparse can raise SystemExit, but we use a wrapper over
        # ArgumentParser to avoid it.
        except argparse.ArgumentError as e:
            msg = f'error: failed parsing command: {e}'
            logger.warning(msg)
            connection.sendall(msg.encode('utf-8'))
            continue
        except cli_util.ExitCalledError as e:
            msg = e.message or ''
            if e.status == 0 and not msg:
                msg = e.parser.format_help()
            elif e.status != 0:
                msg = f'error: {msg}'
            logger.warning(msg)
            try:
                connection.sendall(msg.encode('utf-8'))
            except BrokenPipeError:
                # The client may have disconnected, so ignore the error.
                logger.warning('Failed sending error message to client')
            continue
        finally:
            # Clean up the connection
            connection.close()


def get_monitor_active_group(controller, groups_to_workspaces, monitor):
    active_group = ''
    min_global = float('inf')
    for (group, workspaces) in groups_to_workspaces.items():
        for ws in workspaces:
            if not monitor or _get_workspace_field(controller, ws, 'monitor') == monitor:
                global_number = _get_workspace_field(controller, ws, 'global_number')
                if global_number and global_number < min_global:
                    active_group = group
                    min_global = global_number
    return active_group


def _print_polybar_hook(controller, args):
    # Grab information about the i3 workspace states
    workspaces = controller.get_tree().workspaces()
    group_to_workspaces = workspace_names.get_group_to_workspaces(workspaces)
    active_group = get_monitor_active_group(controller, group_to_workspaces, args.monitor)

    # Lambdas for formatting polybar text with overline and underline
    def polybar_overline_format(text, color):
        return f'%{{o{color}}}%{{+o}}{text}%{{-o}}' if color else text

    def polybar_underline_format(text, color):
        return f'%{{u{color}}}%{{+u}}{text}%{{-u}}' if color else text

    formatted_group_info = []

    for group in sorted(group_to_workspaces.keys()):
        workspaces = group_to_workspaces[group]

        # Build parsed_names_dict to include the local numbers of the workspaces
        # relevant to this monitor and group
        parsed_names_dict = {}
        for ws in workspaces:
            # When monitor is specified, only include workspaces
            # on that monitor. Otherwise, include all workspaces.
            if not args.monitor or _get_workspace_field(controller, ws, 'monitor') == args.monitor:
                local_number = _get_workspace_field(controller, ws, 'local_number')
                focused = _get_workspace_field(controller, ws, 'focused')
                parsed_names_dict[local_number] = {'focused': focused}

        if parsed_names_dict:
            parsed_names = ''.join([
                polybar_underline_format(
                    f" {local_number} ",
                    args.line_color if parsed_names_dict[local_number]['focused'] else None)
                for local_number in sorted(parsed_names_dict.keys())
            ])

            formatted_group = polybar_overline_format(
                f"{group}:", args.line_color if active_group == group else None)

            formatted_group_info.append(f'{formatted_group}{parsed_names}')

    # Print each of the formatted group infos
    # separated by pipes.
    # The result looks something like:
    # Work: 1  2  |  Play: 3  5
    # Where "Work" and "Play" are the group names
    # and "1", "2", "3", and "5" are the local numbers.
    print(' |  '.join(formatted_group_info))


# pylint: disable=too-many-branches
# pylint: disable-next=no-else-return
def run_command(i3_connection, args):
    config = cli_util.get_config_with_overrides(args)
    logger.debug('Using merged config:\n%s', pprint.pformat(config))
    controller = i3_groups_controller.WorkspaceGroupsController(
        i3_proxy.I3Proxy(i3_connection, args.dry_run), config)
    if args.command == 'list-groups':
        return '\n'.join(controller.list_groups(args.focused_monitor_only))
    if args.command == 'polybar-hook':
        _print_polybar_hook(controller, args)
    if args.command == 'list-workspaces':
        return _print_workspaces(controller, args)
    if args.command == 'workspace-number':
        controller.focus_workspace_number(_create_group_context(args),
                                          args.workspace_relative_number)
    elif args.command == 'workspace-next':
        controller.focus_workspace_relative(+1)
    elif args.command == 'workspace-prev':
        controller.focus_workspace_relative(-1)
    elif args.command == 'workspace-new':
        controller.focus_new_workspace(_create_group_context(args))
    elif args.command == 'move-to-number':
        controller.move_to_workspace_number(_create_group_context(args),
                                            args.workspace_relative_number,
                                            args.no_auto_back_and_forth)
    elif args.command == 'move-to-next':
        controller.move_workspace_relative(+1)
    elif args.command == 'move-to-prev':
        controller.move_workspace_relative(-1)
    elif args.command == 'move-to-new':
        controller.move_to_new_workspace(_create_group_context(args))
    elif args.command == 'switch-active-group':
        controller.switch_active_group(args.group, args.focused_monitor_only)
    elif args.command == 'rename-workspace':
        metadata_updates = workspace_names.WorkspaceGroupingMetadata(group=args.group,
                                                                     static_name=args.name,
                                                                     local_number=args.number)
        controller.update_focused_workspace(metadata_updates)
    elif args.command == 'assign-workspace-to-group':
        metadata_updates = workspace_names.WorkspaceGroupingMetadata(group=args.group)
        controller.update_focused_workspace(metadata_updates)
    elif args.command == 'server':
        serve(i3_connection, args.server_addr)
    # Deprecated commands, will be removed in a future release.
    elif args.command == 'workspace-back-and-forth':
        logger.warning('workspace-back-and-forth is deprecated, please '
                       'migrate to the native i3 "workspace back_and_forth" command')
        controller.i3_proxy.send_i3_command('workspace back_and_forth')
    elif args.command == 'move-to-back-and-forth':
        logger.warning('move-to-back-and-forth is deprecated, please '
                       'migrate to the native i3 "workspace back_and_forth" command')
        controller.i3_proxy.send_i3_command('move workspace back_and_forth')
    return ''


def main():
    try:
        args = _create_args_parser().parse_args()
    except cli_util.ExitCalledError as e:
        if e.message:
            sys.stderr.write(f'{e.message}\n')
        sys.exit(e.status)
    init_logger(os.path.basename(__file__))
    logger.setLevel(getattr(logging, args.log_level.upper(), 'WARNING'))
    i3_connection = i3ipc.Connection()
    try:
        output = run_command(i3_connection, args)
        if output:
            print(output)
    except i3_groups_controller.WorkspaceGroupsError as e:
        sys.exit(str(e))


if __name__ == '__main__':
    main()



================================================
FILE: i3wsgroups/cli_util.py
================================================
from __future__ import annotations

import argparse
import typing as t

from i3wsgroups import config


class ExitCalledError(Exception):

    def __init__(self, parser: argparse.ArgumentParser, status: int, message: t.Optional[str]):
        super().__init__(status, message)
        self.parser = parser
        self.status = status
        self.message = message


# argparse calls sys.exit on errors, without even passing the error message to
# the exception. This wrapper class avoids this behavior. Python 3.9 has built
# in support for this behavior:
# https://docs.python.org/3/library/argparse.html#exit-on-error
# Additionally, we don't want the help flag to exit, so we handle that as well.
class ArgumentParserNoExit(argparse.ArgumentParser):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def exit(self, status=0, message: t.Optional[str] = None):
        raise ExitCalledError(self, status, message)


def add_common_args(parser: argparse.ArgumentParser):
    parser.add_argument('--dry-run',
                        action='store_true',
                        default=False,
                        help='If true, only log what changed would be done.')
    parser.add_argument('--log-level',
                        choices=('debug', 'info', 'warning', 'error', 'critical'),
                        default='warning',
                        help='Logging level for stderr and syslog.')


def add_workspace_naming_args(parser: argparse.ArgumentParser) -> None:
    parser.add_argument('--window-icons',
                        action='store_true',
                        default=None,
                        help='If true, add the icons of the open windows to the workspace '
                        'names when organizing or renaming workspaces.')
    parser.add_argument('--window-icons-all-groups',
                        action='store_true',
                        default=None,
                        help='If true, add the icons of the open windows to workspaces in all '
                        'groups, and not just the active group. Also implies --window-icons.')
    parser.add_argument('--renumber-workspaces',
                        action='store_true',
                        default=None,
                        help='If true, renumber workspaces in every group so that they are in '
                        'numerical order, similar to tmux\'s renumber-windows option.')


def get_config_with_overrides(args: argparse.Namespace):
    config_dict = config.get_config_with_defaults()
    if args.renumber_workspaces is not None:
        config_dict['renumber_workspaces'] = args.renumber_workspaces
    if hasattr(args, 'use_next_available_number') and args.use_next_available_number:
        config_dict['workspace_moves']['use_next_available_number'] = (
            args.use_next_available_number)
    if args.window_icons is not None:
        config_dict['icons']['enable'] = args.window_icons
    if args.window_icons_all_groups is not None:
        config_dict['icons']['enable_all_groups'] = args.window_icons_all_groups
    return config_dict



================================================
FILE: i3wsgroups/config.py
================================================
import os

import toml

DEFAULT_CONFIG_PATH = os.path.join(os.path.dirname(__file__), 'default_config.toml')
XDG_CONFIG_HOME = os.environ.get('XDG_CONFIG_HOME', os.path.expandvars('$HOME/.config'))
CONFIG_PATH = os.path.join(XDG_CONFIG_HOME, 'i3-workspace-groups', 'config.toml')


class ConfigError(Exception):
    pass


def merge_config(merge_from, merge_into):
    for key, value in merge_from.items():
        if isinstance(value, list):
            continue
        if isinstance(value, dict):
            if key not in merge_into:
                merge_into[key] = type(value)()
            merge_config(value, merge_into[key])
        elif key not in merge_into:
            merge_into[key] = value


# TODO: Validate config.
def get_config_with_defaults(path=CONFIG_PATH, fail_if_missing=False):
    if fail_if_missing and not os.path.exists(path):
        raise ConfigError(f'No config file found in {path}')
    config = {}
    if os.path.exists(path):
        config = toml.load(path)
    default_config = toml.load(DEFAULT_CONFIG_PATH)
    merge_config(default_config, config)
    if config['icons']['try_fallback_rules']:
        if 'rules' not in config['icons']:
            config['icons']['rules'] = []
        for rule in default_config['icons']['rules']:
            config['icons']['rules'].append(rule)
    return config



================================================
FILE: i3wsgroups/controller.py
================================================
#!/usr/bin/env python3

from __future__ import annotations

import copy
from typing import List, Optional, Tuple

import i3ipc

from i3wsgroups import i3_proxy
from i3wsgroups import icons
from i3wsgroups import workspace_names as ws_names
from i3wsgroups.log_util import logger

# from i3wsgroups.ws_names import *

GroupToWorkspaces = ws_names.GroupToWorkspaces
OrderedWorkspaceGroups = List[Tuple[str, List[i3ipc.Con]]]


class WorkspaceGroupsError(Exception):
    pass


class ActiveGroupContext:

    @staticmethod
    def get_group_name(_: i3ipc.Con, group_to_workspaces: GroupToWorkspaces) -> str:
        # Return the first group which is defined as the active one.
        return next(iter(group_to_workspaces))


class FocusedGroupContext:

    @staticmethod
    def get_group_name(tree: i3ipc.Con, _: GroupToWorkspaces) -> Optional[str]:
        focused_workspace = tree.find_focused().workspace()
        return ws_names.get_group(focused_workspace)


class NamedGroupContext:

    def __init__(self, group_name: str):
        self.group_name = group_name

    def get_group_name(self, _: i3ipc.Con, __: GroupToWorkspaces) -> str:
        return self.group_name


class WorkspaceGroupsController:

    def __init__(self, i3_proxy_: i3_proxy.I3Proxy, config):
        self.i3_proxy = i3_proxy_
        self.config = config
        self.icons_resolver = icons.IconsResolver(self.config['icons'])

    def get_tree(self, cached: bool = True) -> i3ipc.Con:
        return self.i3_proxy.get_tree(cached)

    def organize_workspace_groups(self,
                                  workspace_groups: OrderedWorkspaceGroups,
                                  monitor_name: Optional[str] = None) -> None:
        if monitor_name is None:
            monitor_name = self.i3_proxy.get_focused_monitor_name()
        monitor_index = self.i3_proxy.get_monitor_index(monitor_name)
        group_to_all_workspaces = ws_names.get_group_to_workspaces(self.get_tree().workspaces())
        for group_index, (group, workspaces) in enumerate(workspace_groups):
            logger.debug('Organizing workspace group: "%s" in monitor "%s"', group, monitor_name)
            local_numbers = ws_names.compute_local_numbers(workspaces,
                                                           group_to_all_workspaces.get(group, []),
                                                           self.config['renumber_workspaces'])
            for workspace, local_number in zip(workspaces, local_numbers):
                ws_metadata = ws_names.parse_name(workspace.name)
                ws_metadata.group = group
                ws_metadata.local_number = local_number
                ws_metadata.global_number = ws_names.compute_global_number(
                    monitor_index, group_index, local_number)
                dynamic_name = ''
                # Add window icons if needed.
                if self.config['icons']['enable'] and (self.config['icons']['enable_all_groups'] or
                                                       group_index == 0):
                    dynamic_name = self.icons_resolver.get_workspace_icons(workspace)
                ws_metadata.dynamic_name = dynamic_name
                new_name = ws_names.create_name(ws_metadata)
                self.i3_proxy.rename_workspace(workspace.name, new_name)
                workspace.name = new_name

    def list_groups(self, monitor_only: bool = False) -> List[str]:
        workspaces = self.get_tree().workspaces()
        if monitor_only:
            workspaces = self.i3_proxy.get_monitor_workspaces()
        group_to_workspaces = ws_names.get_group_to_workspaces(workspaces)
        return list(group_to_workspaces.keys())

    def list_workspaces(self,
                        group_context,
                        focused_only: bool = False,
                        monitor_only: bool = False) -> List[i3ipc.Con]:
        workspaces = self.get_tree().workspaces()
        if monitor_only:
            workspaces = self.i3_proxy.get_monitor_workspaces()
        group_to_workspaces = ws_names.get_group_to_workspaces(workspaces)
        # If no context group specified, return workspaces from all groups.
        if not group_context:
            group_workspaces = sum(
                (list(workspaces) for workspaces in group_to_workspaces.values()), [])
        else:
            group_name = group_context.get_group_name(self.get_tree(), group_to_workspaces)
            group_workspaces = group_to_workspaces.get(group_name, [])
        if not focused_only:
            return group_workspaces
        focused_workspace = self.get_tree().find_focused().workspace()
        return [ws for ws in group_workspaces if ws.id == focused_workspace.id]

    def _find_free_local_number(self, target_group: str):
        group_to_all_workspaces = ws_names.get_group_to_workspaces(self.get_tree().workspaces())
        used_local_numbers = ws_names.get_used_local_numbers(
            group_to_all_workspaces.get(target_group, []))
        return next(iter(ws_names.get_lowest_free_local_numbers(1, used_local_numbers)))

    def _create_new_active_group_workspace_name(self, monitor_name: str,
                                                target_group: str) -> i3ipc.Con:
        local_number = self._find_free_local_number(target_group)
        global_number = ws_names.compute_global_number(
            monitor_index=self.i3_proxy.get_monitor_index(monitor_name),
            group_index=0,
            local_number=local_number)
        ws_metadata = ws_names.WorkspaceGroupingMetadata(group=target_group,
                                                         global_number=global_number,
                                                         local_number=local_number)
        return ws_names.create_name(ws_metadata)

    def switch_monitor_active_group(self, monitor_name: str, target_group: str) -> None:
        monitor_workspaces = self.i3_proxy.get_monitor_workspaces(monitor_name)
        group_to_monitor_workspaces = ws_names.get_group_to_workspaces(monitor_workspaces)
        reordered_group_to_workspaces = [(target_group,
                                          group_to_monitor_workspaces.get(target_group, []))]
        for group, workspaces in group_to_monitor_workspaces.items():
            if group != target_group:
                reordered_group_to_workspaces.append((group, workspaces))
        self.organize_workspace_groups(reordered_group_to_workspaces, monitor_name)

    def switch_active_group(self, target_group: str, focused_monitor_only: bool) -> None:
        focused_monitor_name = self.i3_proxy.get_focused_monitor_name()
        monitor_to_workspaces = self.i3_proxy.get_monitor_to_workspaces()
        for monitor, workspaces in monitor_to_workspaces.items():
            group_exists = target_group in ws_names.get_group_to_workspaces(workspaces)
            if monitor == focused_monitor_name:
                logger.debug('Switching active group in focused monitor "%s"', monitor)
            elif not focused_monitor_only and group_exists:
                logger.debug(
                    'Non focused monitor %s has workspaces in the group "%s", '
                    'switching to it.', monitor, target_group)
            else:
                continue
            self.switch_monitor_active_group(monitor, target_group)
        # NOTE: We only switch focus to the new workspace after renaming all the
        # workspaces in all monitors and groups. Otherwise, if the previously
        # focused workspace was renamed, i3's `workspace back_and_forth` will
        # switch focus to a non-existant workspace name.
        focused_group = ws_names.get_group(self.get_tree().find_focused().workspace())
        # The target group is already focused, no need to do anything.
        if focused_group == target_group:
            return
        group_to_monitor_workspaces = ws_names.get_group_to_workspaces(
            monitor_to_workspaces[focused_monitor_name])
        if target_group in group_to_monitor_workspaces:
            workspace_name = group_to_monitor_workspaces[target_group][0].name
        # The focused monitor doesn't have any workspaces in the target group,
        # so create one.
        else:
            workspace_name = self._create_new_active_group_workspace_name(
                focused_monitor_name, target_group)
        self.i3_proxy.focus_workspace(workspace_name, auto_back_and_forth=False)

    def _create_workspace_name(self, metadata: ws_names.WorkspaceGroupingMetadata) -> str:
        focused_monitor_name = self.i3_proxy.get_focused_monitor_name()
        monitor_index = self.i3_proxy.get_monitor_index(focused_monitor_name)
        group_to_monitor_workspaces = ws_names.get_group_to_workspaces(
            self.i3_proxy.get_monitor_workspaces(focused_monitor_name))
        group_index = ws_names.get_group_index(metadata.group, group_to_monitor_workspaces)
        metadata = copy.deepcopy(metadata)
        local_number = metadata.local_number
        if local_number is None:
            local_number = 1
        metadata.global_number = ws_names.compute_global_number(monitor_index, group_index,
                                                                (local_number))
        return ws_names.create_name(metadata)

    # If there's an existing workspace in the given group with the given local
    # number, return its (name, True). Otherwise, create a name and return
    # (name, False).
    def _get_workspace_by_local_number(self, group: str, local_number: int) -> Tuple[str, bool]:
        # i3 commands like `workspace number n` will focus on an existing
        # workspace in another monitor if possible. To preserve this behavior,
        # we check the group workspaces in all monitors.
        group_to_all_workspaces = ws_names.get_group_to_workspaces(self.get_tree().workspaces())
        # Every workspace must have a unique (group, local_number) pair. This
        # tracks whether we found a workspace that conflicts with the given
        # (group, local_number).
        for workspace in group_to_all_workspaces.get(group, []):
            if ws_names.get_local_workspace_number(workspace) == local_number:
                return workspace.name, True
        return self._create_workspace_name(
            ws_names.WorkspaceGroupingMetadata(group=group, local_number=local_number)), False

    def _get_group_from_context(self, group_context):
        group_context = group_context or ActiveGroupContext()
        focused_monitor_name = self.i3_proxy.get_focused_monitor_name()
        group_to_monitor_workspaces = ws_names.get_group_to_workspaces(
            self.i3_proxy.get_monitor_workspaces(focused_monitor_name))
        target_group = group_context.get_group_name(self.get_tree(), group_to_monitor_workspaces)
        logger.info('Context group: "%s"', target_group)
        return target_group

    def focus_workspace_number(self, group_context, target_local_number: int) -> None:
        target_workspace_name, _ = self._get_workspace_by_local_number(
            group=self._get_group_from_context(group_context), local_number=target_local_number)
        logger.debug('Derived workspace name: "%s"', target_workspace_name)
        self.i3_proxy.focus_workspace(target_workspace_name)

    def move_to_workspace_number(self,
                                 group_context,
                                 target_local_number: int,
                                 no_auto_back_and_forth: bool = False) -> None:
        target_workspace_name, _ = self._get_workspace_by_local_number(
            group=self._get_group_from_context(group_context), local_number=target_local_number)
        flags = '--no-auto-back-and-forth' if no_auto_back_and_forth else ''
        self.i3_proxy.send_i3_command(
            f'move {flags} container to workspace "{target_workspace_name}"')

    def _relative_workspace_in_group(self, offset_from_current: int = 1) -> i3ipc.Con:
        focused_workspace = self.get_tree().find_focused().workspace()
        focused_group = ws_names.get_group(focused_workspace)
        group_workspaces_all_monitors = ws_names.get_group_to_workspaces(
            self.get_tree().workspaces())[focused_group]
        current_workspace_index = 0
        for (current_workspace_index, workspace) in enumerate(group_workspaces_all_monitors):
            if workspace.id == focused_workspace.id:
                break
        next_workspace_index = (current_workspace_index +
                                offset_from_current) % len(group_workspaces_all_monitors)
        return group_workspaces_all_monitors[next_workspace_index]

    def focus_workspace_relative(self, offset_from_current: int) -> None:
        next_workspace = self._relative_workspace_in_group(offset_from_current)
        self.i3_proxy.focus_workspace(next_workspace.name, auto_back_and_forth=False)

    def move_workspace_relative(self, offset_from_current: int) -> None:
        next_workspace = self._relative_workspace_in_group(offset_from_current)
        self.i3_proxy.send_i3_command(f'move container to workspace "{next_workspace.name}"')

    def focus_new_workspace(self, group_context) -> None:
        target_group = self._get_group_from_context(group_context)
        local_number = self._find_free_local_number(target_group)
        self.focus_workspace_number(group_context, local_number)

    def move_to_new_workspace(self, group_context) -> None:
        target_group = self._get_group_from_context(group_context)
        local_number = self._find_free_local_number(target_group)
        self.move_to_workspace_number(group_context, local_number, False)

    def update_focused_workspace(self,
                                 metadata_updates: ws_names.WorkspaceGroupingMetadata) -> None:
        if metadata_updates.group is not None and (not ws_names.is_valid_group_name(
                metadata_updates.group)):
            raise WorkspaceGroupsError(f'Invalid group name provided: "{metadata_updates.group}"')
        focused_workspace = self.get_tree().find_focused().workspace()
        metadata = ws_names.parse_name(focused_workspace.name)
        for section in ['group', 'local_number', 'static_name']:
            value = getattr(metadata_updates, section)
            if value is not None:
                setattr(metadata, section, value)
        found_name, exists = self._get_workspace_by_local_number(metadata.group,
                                                                 metadata.local_number)
        if exists and focused_workspace.name != found_name:
            if not self.config['workspace_moves']['use_next_available_number']:
                raise WorkspaceGroupsError(f'Workspace with local number "{metadata.local_number}" '
                                           f'already exists in group: "{metadata.group}": '
                                           f'"{found_name}"')
            group_to_all_workspaces = ws_names.get_group_to_workspaces(self.get_tree().workspaces())
            used_local_numbers = ws_names.get_used_local_numbers(
                group_to_all_workspaces[metadata.group])
            free_local_numbers = ws_names.get_lowest_free_local_numbers(1, used_local_numbers)
            metadata.local_number = next(iter(free_local_numbers))
        self.i3_proxy.rename_workspace(focused_workspace.name,
                                       self._create_workspace_name(metadata))



================================================
FILE: i3wsgroups/default_config.toml
================================================
# If true, will renumber workspaces in every groups so that they are in
# numerical order, similar to tmux's `renumber-windows` option.
renumber_workspaces = false

[workspace_moves]
# If a workspace is moved to another group which already has a workspace with
# the same number, use the next available number instead of failing.
use_next_available_number = false

[icons]
# If true, show window icons in the workspace name.
enable = false
# By default, icons are only shown for workspaces in the active group. If you
# set this to true, icons will be shown for all the workspaces.
enable_all_groups = false
# Delimiter for multiple icons.
delimiter = ''
# Prefix and suffix to add the the shown icons. Useful for adding spaces in
# fonts that cause icons to overlap with nearby characters.
prefix = ''
suffix = ''
# Minimum number of duplicate icons in a workspace for them to show as Nx<icon>
min_duplicates_count = 3
# The icon used when no rule matches. Set to the empty string to disable showing
# any icon when no rule matches.
default_icon = ''
# If true and none of the rules in the config match the window, will try a set
# of fallback rules before finally falling back to the default icon.
try_fallback_rules = true

# Other relevant glyphs:
#   
#            樓  
#         
#          墳 奄 奔 婢
#        
#      
#  
#       

[[icons.rules]]
property = 'class'
match = 'kitty|Termite|URxvtc?'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Chromium|Chrome'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Firefox'
icon = ''

[[icons.rules]]
property = 'class'
match = 'copyq'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Ranger'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Rofi'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Pqiv'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Pinta'
icon = ''

[[icons.rules]]
property = 'class'
match = '[Mm]pv'
icon = ''

[[icons.rules]]
property = 'class'
match = '[Vv]lc'
icon = '嗢'

[[icons.rules]]
property = 'class'
match = '[Ll]ibreoffice-writer'
icon = ''

[[icons.rules]]
property = 'class'
match = '[Ll]ibreoffice-calc'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Peek'
icon = ''

[[icons.rules]]
property = 'class'
match = 'ipython'
icon = ''

[[icons.rules]]
property = 'class'
match = 'python'
icon = ''

[[icons.rules]]
property = 'class'
match = 'jupyter-qtconsole'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Gvim'
icon = ''

[[icons.rules]]
property = 'class'
match = 'settings'
icon = ''

[[icons.rules]]
property = 'class'
match = 'slack'
icon = '聆'

[[icons.rules]]
property = 'class'
match = 'Zathura'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Telegram'
icon = ''

[[icons.rules]]
property = 'class'
match = 'Pavucontrol'
icon = '墳'



================================================
FILE: i3wsgroups/i3_proxy.py
================================================
from __future__ import annotations

from typing import Dict, List, Optional

import i3ipc

from i3wsgroups.log_util import logger


class I3Proxy:

    def __init__(self, i3_connection: i3ipc.Connection, dry_run: bool = True):
        self.i3_connection = i3_connection
        self.dry_run = dry_run
        # i3 tree is cached for performance. Timing the i3ipc get_tree function
        # using `%timeit` in ipython shows about 1-2ms in my high performance
        # desktop. For lower performance machines, multiple calls to get_tree
        # may be noticable, so this is cached.
        # Other operations like get_workspaces and get_outputs were about 50µs
        # using the same method, which is more negligible.
        self.tree = None

    def get_tree(self, cached: bool = True) -> i3ipc.Con:
        if self.tree and cached:
            return self.tree
        self.tree = self.i3_connection.get_tree()
        return self.tree

    def get_monitor_index(self, monitor_name):
        ordered_monitors = [output for output in self.i3_connection.get_outputs() if output.active]
        # Sort monitors from top to bottom, and from left to right.
        ordered_monitors.sort(key=lambda m: (m.rect.y, m.rect.x))
        return [m.name for m in ordered_monitors].index(monitor_name)

    def get_focused_monitor_name(self) -> str:
        con = self.get_tree().find_focused()
        while con.type != 'output':
            con = con.parent
        return con.name

    def get_monitor_workspaces(self, monitor_name: Optional[str] = None) -> List[i3ipc.Con]:
        if monitor_name is None:
            monitor_name = self.get_focused_monitor_name()
        return self.get_monitor_to_workspaces()[monitor_name]

    def get_monitor_to_workspaces(self) -> Dict[str, List[i3ipc.Con]]:
        active_monitor_names = [
            output.name for output in self.i3_connection.get_outputs() if output.active
        ]
        monitor_to_workspaces = {}
        # We could do this more efficiently by assuming that the outputs are the
        # direct children of the root, instead of scanning the whole tree to
        # find them, but this should be negligible.
        for con in self.get_tree():
            if con.type == 'output' and con.name in active_monitor_names:
                workspaces = [c for c in con if c.type == 'workspace']
                monitor_to_workspaces[con.name] = workspaces
        return monitor_to_workspaces

    def send_i3_command(self, command: str) -> None:
        if self.dry_run:
            log_prefix = '[dry-run] would send'
        else:
            log_prefix = 'Sending'
        logger.info("%s i3 command: '%s'", log_prefix, command)
        if not self.dry_run:
            reply = self.i3_connection.command(command)[0]
            if not reply.success:
                logger.warning('i3 command error: %s', reply.error)

    def focus_workspace(self, name: str, auto_back_and_forth: bool = True) -> None:
        options = ''
        if not auto_back_and_forth:
            options = '--no-auto-back-and-forth'
        self.send_i3_command(f'workspace {options} "{name}"')

    def rename_workspace(self, old_name: str, new_name: str) -> None:
        if old_name == new_name:
            return
        self.send_i3_command(f'rename workspace "{old_name}" to "{new_name}"')

    def get_unique_marked_workspace(self, mark) -> Optional[i3ipc.Con]:
        workspaces = self.get_tree().find_marked(mark)
        if not workspaces:
            logger.info('Didn\'t find workspaces with mark: %s', mark)
            return None
        if len(workspaces) > 1:
            logger.warning('Multiple workspaces marked with %s, using first '
                           'one', mark)
        return workspaces[0]



================================================
FILE: i3wsgroups/icons.py
================================================
from __future__ import annotations

import collections
import re
from typing import Optional

import i3ipc

from i3wsgroups.log_util import logger


class IconRule:

    def __init__(self, window_property, matcher, icon):
        assert window_property in ['class', 'instance', 'title']
        self.window_property = window_property
        self.matcher = re.compile(matcher)
        self.icon = icon

    def match(self, window: i3ipc.Con) -> Optional[str]:
        if self.window_property == 'class':
            property_value = window.window_class
        elif self.window_property == 'instance':
            property_value = window.window_instance
        else:
            property_value = window.window_title
        # The value can be None for i3 placeholder windows and possibly others.
        if property_value and self.matcher.match(property_value):
            return self.icon
        return None


class IconsResolver:

    def __init__(self, config):
        self.config = config
        self.rules = []
        for rule in self.config.get('rules', []):
            self.rules.append(IconRule(rule['property'], rule['match'], rule['icon']))

    def get_window_icon(self, window: i3ipc.Con) -> str:
        for rule in self.rules:
            icon = rule.match(window)
            if icon is not None:
                return icon
        logger.info('No icon specified for window with class: "%s", instance: '
                    '"%s", title: "%s", name: "%s"', window.window_class, window.window_instance,
                    window.window_title, window.name)  # pyright: ignore[reportAttributeAccessIssue]
        return self.config['default_icon']

    def get_workspace_icons(self, workspace: i3ipc.Con) -> str:
        icon_to_count = collections.OrderedDict()
        for window in workspace.leaves():
            icon = self.get_window_icon(window)
            if icon not in icon_to_count:
                icon_to_count[icon] = 0
            icon_to_count[icon] += 1
        if not icon_to_count:
            return ''
        icons_texts = []
        delim = self.config['delimiter']
        for icon, count in icon_to_count.items():
            if count < self.config['min_duplicates_count']:
                icon_text = delim.join(icon for i in range(count))
            else:
                icon_text = f'{count}x{icon}'
            icons_texts.append(icon_text)
        prefix = self.config.get('prefix', '')
        suffix = self.config.get('suffix', '')
        return prefix + delim.join(icons_texts) + suffix



================================================
FILE: i3wsgroups/log_util.py
================================================
import logging
import logging.handlers

_LOG_FMT_STDERR = '%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s'
_LOG_FMT_SYSLOG = '%(levelname)s [%(filename)s:%(lineno)d] %(message)s'

logger = logging.getLogger()


def init_logger(name: str) -> None:
    stderr_handler = logging.StreamHandler()
    stderr_formatter = logging.Formatter(_LOG_FMT_STDERR)
    stderr_handler.setFormatter(stderr_formatter)
    logger.addHandler(stderr_handler)
    syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
    syslog_formatter = logging.Formatter(f'{name}: {_LOG_FMT_SYSLOG}')
    syslog_handler.setFormatter(syslog_formatter)
    logger.addHandler(syslog_handler)



================================================
FILE: i3wsgroups/polybar_module_updater.py
================================================
#!/usr/bin/python3

import asyncio
import subprocess

from i3ipc import Event
from i3ipc.aio import Connection


def _update_polybar(*_):
    # As of 2021-10-15 and PR #2539 [1] running the hook action is deprecated.
    # We should switch to the commented out alternative, but we'll wait till
    # this change is a bit older to reduce the risk that we break the setup of
    # people that run older versions of polybar.
    # [1] https://github.com/polybar/polybar/pull/2539
    # subprocess.run(['polybar-msg', 'action', '#i3-mod.hook.0'], check=False)
    subprocess.run(['polybar-msg', 'hook', 'i3-mod', '1'], check=False)


async def main():
    i3 = await Connection(auto_reconnect=True).connect()

    _update_polybar()
    i3.on(Event.WORKSPACE_FOCUS, _update_polybar)
    i3.on(Event.WORKSPACE_INIT, _update_polybar)
    i3.on(Event.WORKSPACE_RENAME, _update_polybar)
    i3.on(Event.WORKSPACE_MOVE, _update_polybar)
    i3.on(Event.WORKSPACE_EMPTY, _update_polybar)

    await i3.main()


if __name__ == '__main__':
    asyncio.run(main())



================================================
FILE: i3wsgroups/py_client.py
================================================
#!/usr/bin/env python3
# pylint: disable=invalid-name

import socket
import sys


def main():
    if len(sys.argv) != 2:
        raise ValueError('Usage: i3-workspace-groups-nc SOCKET')
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(sys.argv[1])
    cmd = sys.stdin.buffer.read()
    sock.sendall(cmd)
    output = sock.recv(100000)
    print(output.decode('utf-8'))


if __name__ == '__main__':
    main()



================================================
FILE: i3wsgroups/workspace_names.py
================================================
# We use the workspace names to "store" metadata about the workspace, such as
# the group it belongs to.
# Workspace name format:
#
# global_number:%%[group]%%[static_name]%%[dynamic_name]%%[local_number]
#
# Where:
# - %% represents a Unicode zero width space.
#   For info about zero width spaces see:
#   https://www.wikiwand.com/en/Zero-width_space
# - global_number is managed by this script and is required to order the
#   workspaces in i3 correctly, but can be hidden using i3 config.
# - static_name is an optional static local name of the workspace. It can be
#   changed by the user and will be maintained till the next time it's changed
#   or the workspace is closed.
# - dynamic_name is an optional dynamic local name of the workspace. If it's
#   enabled, it's managed by another script that dynamically populates it with
#   icons of the current windows in the workspace (implemented using unicode
#   glyhps).
#
# A colon is also used to separate the sections visually. Therefore, sections
# should not have colons at their beginning or end.
#
# Example of how workspace names are presented in i3bar:
#  "1"
#  "1:mail"
#  "1:mygroup:mail"
#  "102:mygroup:mail:2"
from __future__ import annotations

import collections
from typing import Dict, List, Optional, Set

import i3ipc

from i3wsgroups.log_util import logger

WORKSPACE_NAME_SECTIONS = [
    'global_number',
    'group',
    'static_name',
    'dynamic_name',
    'local_number',
]
# Unicode zero width char.
SECTIONS_DELIM = '\u200b'

_MAX_GROUPS_PER_MONITOR = 1000
_MAX_WORKSPACES_PER_GROUP = 100

_SCRATCHPAD_WORKSPACE_NAME = '__i3_scratch'

GroupToWorkspaces = Dict[str, List[i3ipc.Con]]


class WorkspaceDisplayMetadata:

    def __init__(self, workspace_name: str, monitor_name: str, is_focused: bool):
        self.workspace_name: str = workspace_name
        self.monitor_name: str = monitor_name
        self.is_focused: bool = is_focused

    def __str__(self):
        return str(self.__dict__)


class WorkspaceGroupingMetadata:

    # pylint: disable=too-many-arguments
    def __init__(self,
                 global_number: Optional[int] = None,
                 group: Optional[str] = None,
                 static_name: Optional[str] = None,
                 dynamic_name: Optional[str] = None,
                 local_number: Optional[int] = None):
        self.global_number: Optional[int] = global_number
        self.group: Optional[str] = group
        self.static_name: Optional[str] = static_name
        self.dynamic_name: Optional[str] = dynamic_name
        self.local_number: Optional[int] = local_number

    def __str__(self):
        return str(self.__dict__)


def maybe_remove_prefix_colons(section: str) -> str:
    if section and section[0] == ':':
        return section[1:]
    return section


def maybe_remove_suffix_colons(section: str) -> str:
    if section and section[-1] == ':':
        return section[:-1]
    return section


def sanitize_section_value(name: str) -> str:
    sanitized_name = name.replace(SECTIONS_DELIM, '%')
    assert SECTIONS_DELIM not in sanitized_name
    return maybe_remove_prefix_colons(sanitized_name)


def is_valid_group_name(name: str) -> bool:
    return SECTIONS_DELIM not in name


def parse_global_number_section(global_number_section: Optional[str]) -> Optional[int]:
    if not global_number_section:
        return None
    return int(maybe_remove_suffix_colons(global_number_section))


def is_recognized_name_format(workspace_name: str) -> bool:
    sections = workspace_name.split(SECTIONS_DELIM)
    if len(sections) != len(WORKSPACE_NAME_SECTIONS):
        return False
    if sections[0]:
        try:
            parse_global_number_section(sections[0])
        except ValueError:
            return False
    return True


def parse_name(workspace_name: str) -> WorkspaceGroupingMetadata:
    result = WorkspaceGroupingMetadata(group='')
    if not is_recognized_name_format(workspace_name):
        result.static_name = sanitize_section_value(workspace_name)
        return result
    sections = workspace_name.split(SECTIONS_DELIM)
    result.global_number = parse_global_number_section(sections[0])
    if sections[1]:
        result.group = maybe_remove_suffix_colons(sections[1])
    result.static_name = maybe_remove_prefix_colons(sections[2])
    result.dynamic_name = maybe_remove_prefix_colons(sections[3])
    if not sections[4]:
        return result
    # Don't fail on local number parsing errors, just ignore it.
    try:
        result.local_number = int(maybe_remove_prefix_colons(sections[4]))
    except ValueError:
        pass
    return result


def get_local_workspace_number(workspace: i3ipc.Con) -> Optional[int]:
    ws_metadata = parse_name(workspace.name)  # pyright: ignore[reportAttributeAccessIssue]
    local_number = ws_metadata.local_number
    if local_number is None and ws_metadata.global_number is not None:
        local_number = global_number_to_local_number(ws_metadata.global_number)
    return local_number


def get_group(workspace: i3ipc.Con) -> Optional[str]:
    return parse_name(workspace.name).group  # pyright: ignore[reportAttributeAccessIssue]


def get_used_local_numbers(workspaces: List[i3ipc.Con]) -> Set[int]:
    used_local_numbers = set()
    for workspace in workspaces:
        local_number = parse_name(
            workspace.name).local_number  # pyright: ignore[reportAttributeAccessIssue]
        if local_number is not None:
            used_local_numbers.add(local_number)
    return used_local_numbers


def get_lowest_free_local_numbers(num: int, used_local_numbers: Set[int]) -> List[int]:
    local_numbers = []
    for local_number in range(1, _MAX_WORKSPACES_PER_GROUP):
        if len(local_numbers) == num:
            break
        if local_number in used_local_numbers:
            continue
        local_numbers.append(local_number)
    assert len(local_numbers) == num
    return local_numbers


def compute_local_numbers(monitor_workspaces: List[i3ipc.Con], all_workspaces: List[i3ipc.Con],
                          renumber_workspaces: bool) -> List[int]:
    monitor_workspace_ids = {
        ws.id for ws in monitor_workspaces  # pyright: ignore[reportAttributeAccessIssue]
    }
    other_monitors_workspaces = [
        ws for ws in all_workspaces if ws.id  # pyright: ignore[reportAttributeAccessIssue]
        not in monitor_workspace_ids
    ]
    used_local_numbers = get_used_local_numbers(other_monitors_workspaces)
    logger.debug('Local numbers used by group in other monitors: %s', used_local_numbers)
    if renumber_workspaces:
        return get_lowest_free_local_numbers(len(monitor_workspaces), used_local_numbers)
    if used_local_numbers:
        last_used_local_number = max(used_local_numbers)
    else:
        last_used_local_number = 0
    local_numbers = []
    for workspace in monitor_workspaces:
        ws_metadata = parse_name(workspace.name)  # pyright: ignore[reportAttributeAccessIssue]
        local_number = ws_metadata.local_number
        if local_number is None or (local_number in used_local_numbers):
            local_number = last_used_local_number + 1
            last_used_local_number += 1
        local_numbers.append(local_number)
    return local_numbers


def create_name(ws_metadata: WorkspaceGroupingMetadata) -> str:
    assert ws_metadata.global_number is not None
    assert ws_metadata.group is not None
    sections = [f'{ws_metadata.global_number}:', ws_metadata.group]
    need_prefix_colons = bool(ws_metadata.group)
    for section in ['static_name', 'dynamic_name', 'local_number']:
        value = getattr(ws_metadata, section)
        if not value:
            value = ''
        elif need_prefix_colons:
            value = f':{value}'
        else:
            need_prefix_colons = True
        sections.append(str(value))
    return SECTIONS_DELIM.join(sections)


def compute_global_number(monitor_index: int, group_index: int, local_number: int) -> int:
    assert local_number < _MAX_WORKSPACES_PER_GROUP
    monitor_starting_number = monitor_index * (_MAX_GROUPS_PER_MONITOR * _MAX_WORKSPACES_PER_GROUP)
    group_starting_number = _MAX_WORKSPACES_PER_GROUP * group_index
    return monitor_starting_number + group_starting_number + local_number


def global_number_to_group_index(global_number: int) -> int:
    return global_number % (_MAX_GROUPS_PER_MONITOR *
                            _MAX_WORKSPACES_PER_GROUP) // _MAX_WORKSPACES_PER_GROUP


def global_number_to_local_number(global_number: int) -> int:
    return global_number % _MAX_WORKSPACES_PER_GROUP


def get_group_to_workspaces(workspaces: List[i3ipc.Con]) -> GroupToWorkspaces:
    group_to_workspaces = collections.OrderedDict()
    for workspace in workspaces:
        ws_metadata = parse_name(workspace.name)  # pyright: ignore[reportAttributeAccessIssue]
        group = ws_metadata.group
        logger.debug(
            'Workspace %s parsed as: %s',
            workspace.name,  # pyright: ignore[reportAttributeAccessIssue]
            ws_metadata)
        if group not in group_to_workspaces:
            group_to_workspaces[group] = []
        group_to_workspaces[group].append(workspace)
    return group_to_workspaces


def _is_reordered_workspace(name1, name2):
    ws1_metadata = parse_name(name1)
    ws2_metadata = parse_name(name2)
    if ws1_metadata.group != ws2_metadata.group:
        return False
    if ws1_metadata.local_number:
        return ws1_metadata.local_number == ws2_metadata.local_number
    return ws1_metadata.static_name == ws2_metadata.static_name


def get_group_index(target_group: str, group_to_workspaces: GroupToWorkspaces):
    # If there are existing workspaces in the group, use them to derive the
    # group index. Otherwise, use the smallest available group index.
    # Note that we can't derive the group index from its relative position
    # in the group list, because there may have been a group that was
    # implicitly removed because it had a single empty workspace and the
    # user focused on another workspace.
    group_to_index = {}
    for group, workspaces in group_to_workspaces.items():
        for workspace in workspaces:
            parsed_name = parse_name(workspace.name)  # pyright: ignore[reportAttributeAccessIssue]
            if parsed_name.global_number is not None:
                group_to_index[group] = global_number_to_group_index(parsed_name.global_number)
                break
    if target_group in group_to_index:
        return group_to_index[target_group]
    if group_to_index:
        return max(group_to_index.values()) + 1
    return 0



================================================
FILE: req/base.in
================================================
i3ipc~=2.2
# TODO: switch to tomli
toml~=0.10
# typing-extensions and exceptiongroup are required for Python 3.10 and below.
typing-extensions
exceptiongroup



================================================
FILE: req/base.txt
================================================
#
# This file is autogenerated by pip-compile with Python 3.11
# by the following command:
#
#    pip-compile --allow-unsafe --generate-hashes --output-file=req/base.txt --strip-extras pyproject.toml
#
exceptiongroup==1.2.0 \
    --hash=sha256:4bfd3996ac73b41e9b9628b04e079f193850720ea5945fc96a08633c66912f14 \
    --hash=sha256:91f5c769735f051a4290d52edd0858999b57e5876e9f85937691bd4c9fa3ed68
    # via i3-workspace-groups (pyproject.toml)
i3ipc==2.2.1 \
    --hash=sha256:c0b898223d50d42c90c818deb5033d1304c582755547dee7d15df3e3781bc690 \
    --hash=sha256:e880d7d7147959ead5cb34764f08b97b41385b36eb8256e8af1ce163dbcccce8
    # via i3-workspace-groups (pyproject.toml)
python-xlib==0.33 \
    --hash=sha256:55af7906a2c75ce6cb280a584776080602444f75815a7aff4d287bb2d7018b32 \
    --hash=sha256:c3534038d42e0df2f1392a1b30a15a4ff5fdc2b86cfa94f072bf11b10a164398
    # via i3ipc
six==1.16.0 \
    --hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \
    --hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254
    # via python-xlib
toml==0.10.2 \
    --hash=sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b \
    --hash=sha256:b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f
    # via i3-workspace-groups (pyproject.toml)
typing-extensions==4.9.0 \
    --hash=sha256:23478f88c37f27d76ac8aee6c905017a143b0b1b886c3c9f66bc2fd94f9f5783 \
    --hash=sha256:af72aea155e91adfc61c3ae9e0e342dbc0cba726d6cba4b6c72c1f34e47291cd
    # via i3-workspace-groups (pyproject.toml)



================================================
FILE: req/conda_env.yml
================================================
name: i3_workspace_groups
channels:
  - conda-forge
  - defaults
dependencies:
  - python=3.11
  - pip
  - pip:
    # NOTE: I previously put every requirements file in a separate list item, but that
    # caused a require hashes error [1] which is fixed by putting all of them in the
    # same line. A better solution would be to use the pip flag --no-deps, but this is
    # not supported in conda [2].
    # [1] https://github.com/pypa/pip/issues/9644
    # [2] https://github.com/conda/conda/issues/6805
    - -r base.txt -r dev.txt -r dev-extra.txt



================================================
FILE: req/dev-extra.in
================================================
# pip-compile doesn't support contraints when using pyproject.toml [1], so this file
# must either be compiled by pointing pip-compile to pyproject.toml, or manually adding
# constraints in the invocation.
# [1] https://github.com/jazzband/pip-tools/issues/1092#issuecomment-1256423806
# -c base.txt
# -c dev.txt
ipython~=8.14
jupytext~=1.0
rich[jupyter]
pyflyby~=1.7
jupyterlab~=4.0
# ipykernel is required for the VSCode interactive window
ipykernel~=6.13
# ipywidgets is required for rich to run in Jupyter Notebook or the VSCode
# interactive window.
ipywidgets~=7.7

# vim: set ft=requirements :



================================================
FILE: req/dev-extra.txt
================================================
#
# This file is autogenerated by pip-compile with Python 3.11
# by the following command:
#
#    pip-compile --allow-unsafe --constraint=req/base.txt --constraint=req/dev.txt --extra=dev_extra --generate-hashes --output-file=req/dev-extra.txt --strip-extras pyproject.toml
#
anyio==4.2.0 \
    --hash=sha256:745843b39e829e108e518c489b31dc757de7d2131d53fac32bd8df268227bfee \
    --hash=sha256:e1875bb4b4e2de1669f4bc7869b6d3f54231cdced71605e6e64c9be77e3be50f
    # via jupyter-server
argon2-cffi==23.1.0 \
    --hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 \
    --hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
    # via jupyter-server
argon2-cffi-bindings==21.2.0 \
    --hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 \
    --hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f \
    --hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 \
    --hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 \
    --hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c \
    --hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a \
    --hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 \
    --hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 \
    --hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f \
    --hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 \
    --hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d \
    --hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f \
    --hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae \
    --hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 \
    --hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 \
    --hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 \
    --hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d \
    --hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 \
    --hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb \
    --hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e \
    --hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
    # via argon2-cffi
arrow==1.3.0 \
    --hash=sha256:c728b120ebc00eb84e01882a6f5e7927a53960aa990ce7dd2b10f39005a67f80 \
    --hash=sha256:d4540617648cb5f895730f1ad8c82a65f2dad0166f57b75f3ca54759c4d67a85
    # via isoduration
asttokens==2.4.1 \
    --hash=sha256:051ed49c3dcae8913ea7cd08e46a606dba30b79993209636c4875bc1d637bc24 \
    --hash=sha256:b03869718ba9a6eb027e134bfdf69f38a236d681c83c160d510768af11254ba0
    # via stack-data
async-lru==2.0.4 \
    --hash=sha256:b8a59a5df60805ff63220b2a0c5b5393da5521b113cd5465a44eb037d81a5627 \
    --hash=sha256:ff02944ce3c288c5be660c42dbcca0742b32c3b279d6dceda655190240b99224
    # via jupyterlab
attrs==23.2.0 \
    --hash=sha256:935dc3b529c262f6cf76e50877d35a4bd3c1de194fd41f47a2b7ae8f19971f30 \
    --hash=sha256:99b87a485a5820b23b879f04c2305b44b951b502fd64be915879d77a7e8fc6f1
    # via
    #   jsonschema
    #   referencing
babel==2.14.0 \
    --hash=sha256:6919867db036398ba21eb5c7a0f6b28ab8cbc3ae7a73a44ebe34ae74a4e7d363 \
    --hash=sha256:efb1a25b7118e67ce3a259bed20545c29cb68be8ad2c784c83689981b7a57287
    # via jupyterlab-server
beautifulsoup4==4.12.2 \
    --hash=sha256:492bbc69dca35d12daac71c4db1bfff0c876c00ef4a2ffacce226d4638eb72da \
    --hash=sha256:bd2520ca0d9d7d12694a53d44ac482d181b4ec1888909b035a3dbf40d0f57d4a
    # via nbconvert
bleach==6.1.0 \
    --hash=sha256:0a31f1837963c41d46bbf1331b8778e1308ea0791db03cc4e7357b97cf42a8fe \
    --hash=sha256:3225f354cfc436b9789c66c4ee030194bee0568fbf9cbdad3bc8b5c26c5f12b6
    # via nbconvert
certifi==2023.11.17 \
    --hash=sha256:9b469f3a900bf28dc19b8cfbf8019bf47f7fdd1a65a1d4ffb98fc14166beb4d1 \
    --hash=sha256:e036ab49d5b79556f99cfc2d9320b34cfbe5be05c5871b51de9329f0603b0474
    # via requests
cffi==1.16.0 \
    --hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc \
    --hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a \
    --hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 \
    --hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab \
    --hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 \
    --hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 \
    --hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 \
    --hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 \
    --hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed \
    --hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 \
    --hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 \
    --hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 \
    --hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d \
    --hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 \
    --hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e \
    --hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 \
    --hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 \
    --hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 \
    --hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e \
    --hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 \
    --hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c \
    --hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe \
    --hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 \
    --hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 \
    --hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 \
    --hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a \
    --hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 \
    --hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b \
    --hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 \
    --hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e \
    --hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 \
    --hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 \
    --hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b \
    --hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 \
    --hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 \
    --hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f \
    --hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 \
    --hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 \
    --hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc \
    --hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 \
    --hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba \
    --hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 \
    --hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb \
    --hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 \
    --hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 \
    --hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d \
    --hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 \
    --hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b \
    --hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 \
    --hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 \
    --hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 \
    --hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
    # via argon2-cffi-bindings
charset-normalizer==3.3.2 \
    --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \
    --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \
    --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \
    --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \
    --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \
    --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \
    --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \
    --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \
    --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \
    --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \
    --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \
    --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \
    --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \
    --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \
    --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \
    --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \
    --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \
    --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \
    --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \
    --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \
    --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \
    --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \
    --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \
    --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \
    --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \
    --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \
    --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \
    --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \
    --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \
    --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \
    --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \
    --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \
    --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \
    --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \
    --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \
    --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \
    --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \
    --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \
    --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \
    --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \
    --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \
    --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \
    --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \
    --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \
    --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \
    --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \
    --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \
    --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \
    --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \
    --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \
    --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \
    --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \
    --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \
    --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \
    --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \
    --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \
    --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \
    --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \
    --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \
    --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \
    --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \
    --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \
    --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \
    --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \
    --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \
    --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \
    --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \
    --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \
    --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \
    --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \
    --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \
    --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \
    --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \
    --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \
    --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \
    --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \
    --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \
    --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \
    --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \
    --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \
    --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \
    --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \
    --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \
    --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \
    --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \
    --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \
    --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \
    --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \
    --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \
    --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561
    # via requests
comm==0.2.1 \
    --hash=sha256:0bc91edae1344d39d3661dcbc36937181fdaddb304790458f8b044dbc064b89a \
    --hash=sha256:87928485c0dfc0e7976fd89fc1e187023cf587e7c353e4a9b417555b44adf021
    # via
    #   ipykernel
    #   ipywidgets
debugpy==1.8.0 \
    --hash=sha256:125b9a637e013f9faac0a3d6a82bd17c8b5d2c875fb6b7e2772c5aba6d082332 \
    --hash=sha256:12af2c55b419521e33d5fb21bd022df0b5eb267c3e178f1d374a63a2a6bdccd0 \
    --hash=sha256:3c6fb41c98ec51dd010d7ed650accfd07a87fe5e93eca9d5f584d0578f28f35f \
    --hash=sha256:46ab6780159eeabb43c1495d9c84cf85d62975e48b6ec21ee10c95767c0590aa \
    --hash=sha256:57161629133113c97b387382045649a2b985a348f0c9366e22217c87b68b73c6 \
    --hash=sha256:5d9de202f5d42e62f932507ee8b21e30d49aae7e46d5b1dd5c908db1d7068637 \
    --hash=sha256:60009b132c91951354f54363f8ebdf7457aeb150e84abba5ae251b8e9f29a8a6 \
    --hash=sha256:61eab4a4c8b6125d41a34bad4e5fe3d2cc145caecd63c3fe953be4cc53e65bf8 \
    --hash=sha256:7fb95ca78f7ac43393cd0e0f2b6deda438ec7c5e47fa5d38553340897d2fbdfb \
    --hash=sha256:8cd0197141eb9e8a4566794550cfdcdb8b3db0818bdf8c49a8e8f8053e56e38b \
    --hash=sha256:9c9b0ac1ce2a42888199df1a1906e45e6f3c9555497643a85e0bf2406e3ffbc4 \
    --hash=sha256:a64093656c4c64dc6a438e11d59369875d200bd5abb8f9b26c1f5f723622e153 \
    --hash=sha256:a8b7a2fd27cd9f3553ac112f356ad4ca93338feadd8910277aff71ab24d8775f \
    --hash=sha256:b05a6b503ed520ad58c8dc682749113d2fd9f41ffd45daec16e558ca884008cd \
    --hash=sha256:bdc5ef99d14b9c0fcb35351b4fbfc06ac0ee576aeab6b2511702e5a648a2e595 \
    --hash=sha256:e3412f9faa9ade82aa64a50b602544efcba848c91384e9f93497a458767e6926 \
    --hash=sha256:ef54404365fae8d45cf450d0544ee40cefbcb9cb85ea7afe89a963c27028261e \
    --hash=sha256:ef9ab7df0b9a42ed9c878afd3eaaff471fce3fa73df96022e1f5c9f8f8c87ada
    # via ipykernel
decorator==5.1.1 \
    --hash=sha256:637996211036b6385ef91435e4fae22989472f9d571faba8927ba8253acbc330 \
    --hash=sha256:b8c3f85900b9dc423225913c5aace94729fe1fa9763b38939a95226f02d37186
    # via ipython
defusedxml==0.7.1 \
    --hash=sha256:1bb3032db185915b62d7c6209c5a8792be6a32ab2fedacc84e01b52c51aa3e69 \
    --hash=sha256:a352e7e428770286cc899e2542b6cdaedb2b4953ff269a210103ec58f6198a61
    # via nbconvert
exceptiongroup==1.2.0 \
    --hash=sha256:4bfd3996ac73b41e9b9628b04e079f193850720ea5945fc96a08633c66912f14 \
    --hash=sha256:91f5c769735f051a4290d52edd0858999b57e5876e9f85937691bd4c9fa3ed68
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   i3-workspace-groups (pyproject.toml)
executing==2.0.1 \
    --hash=sha256:35afe2ce3affba8ee97f2d69927fa823b08b472b7b994e36a52a964b93d16147 \
    --hash=sha256:eac49ca94516ccc753f9fb5ce82603156e590b27525a8bc32cce8ae302eb61bc
    # via stack-data
fastjsonschema==2.19.1 \
    --hash=sha256:3672b47bc94178c9f23dbb654bf47440155d4db9df5f7bc47643315f9c405cd0 \
    --hash=sha256:e3126a94bdc4623d3de4485f8d468a12f02a67921315ddc87836d6e456dc789d
    # via
    #   -c req/dev.txt
    #   nbformat
fqdn==1.5.1 \
    --hash=sha256:105ed3677e767fb5ca086a0c1f4bb66ebc3c100be518f0e0d755d9eae164d89f \
    --hash=sha256:3a179af3761e4df6eb2e026ff9e1a3033d3587bf980a0b1b2e1e5d08d7358014
    # via jsonschema
i3ipc==2.2.1 \
    --hash=sha256:c0b898223d50d42c90c818deb5033d1304c582755547dee7d15df3e3781bc690 \
    --hash=sha256:e880d7d7147959ead5cb34764f08b97b41385b36eb8256e8af1ce163dbcccce8
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   i3-workspace-groups (pyproject.toml)
idna==3.6 \
    --hash=sha256:9ecdbbd083b06798ae1e86adcbfe8ab1479cf864e4ee30fe4e46a003d12491ca \
    --hash=sha256:c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f
    # via
    #   anyio
    #   jsonschema
    #   requests
ipykernel==6.28.0 \
    --hash=sha256:69c11403d26de69df02225916f916b37ea4b9af417da0a8c827f84328d88e5f3 \
    --hash=sha256:c6e9a9c63a7f4095c0a22a79f765f079f9ec7be4f2430a898ddea889e8665661
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   jupyterlab
ipython==8.20.0 \
    --hash=sha256:2f21bd3fc1d51550c89ee3944ae04bbc7bc79e129ea0937da6e6c68bfdbf117a \
    --hash=sha256:bc9716aad6f29f36c449e30821c9dd0c1c1a7b59ddcc26931685b87b4c569619
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   ipykernel
    #   ipywidgets
ipython-genutils==0.2.0 \
    --hash=sha256:72dd37233799e619666c9f639a9da83c34013a73e8bbc79a7a6348d93c61fab8 \
    --hash=sha256:eb2e116e75ecef9d4d228fdc66af54269afa26ab4463042e33785b887c628ba8
    # via ipywidgets
ipywidgets==7.8.1 \
    --hash=sha256:050b87bb9ac11641859af4c36cdb639ca072fb5e121f0f1a401f8a80f9fa008d \
    --hash=sha256:29f7056d368bf0a7b35d51cf0c56b58582da57c78bb9f765965fef7c332e807c
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   rich
isoduration==20.11.0 \
    --hash=sha256:ac2f9015137935279eac671f94f89eb00584f940f5dc49462a0c4ee692ba1bd9 \
    --hash=sha256:b2904c2a4228c3d44f409c8ae8e2370eb21a26f7ac2ec5446df141dde3452042
    # via jsonschema
isort==5.13.2 \
    --hash=sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109 \
    --hash=sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6
    # via
    #   -c req/dev.txt
    #   pyflyby
jedi==0.19.1 \
    --hash=sha256:cf0496f3651bc65d7174ac1b7d043eff454892c708a87d1b683e57b569927ffd \
    --hash=sha256:e983c654fe5c02867aef4cdfce5a2fbb4a50adc0af145f70504238f18ef5e7e0
    # via ipython
jinja2==3.1.3 \
    --hash=sha256:7d6d50dd97d52cbc355597bd845fabfbac3f551e1f99619e39a35ce8c370b5fa \
    --hash=sha256:ac8bd6544d4bb2c9792bf3a159e80bba8fda7f07e81bc3aed565432d5925ba90
    # via
    #   jupyter-server
    #   jupyterlab
    #   jupyterlab-server
    #   nbconvert
json5==0.9.14 \
    --hash=sha256:740c7f1b9e584a468dbb2939d8d458db3427f2c93ae2139d05f47e453eae964f \
    --hash=sha256:9ed66c3a6ca3510a976a9ef9b8c0787de24802724ab1860bc0153c7fdd589b02
    # via jupyterlab-server
jsonpointer==2.4 \
    --hash=sha256:15d51bba20eea3165644553647711d150376234112651b4f1811022aecad7d7a \
    --hash=sha256:585cee82b70211fa9e6043b7bb89db6e1aa49524340dde8ad6b63206ea689d88
    # via jsonschema
jsonschema==4.20.0 \
    --hash=sha256:4f614fd46d8d61258610998997743ec5492a648b33cf478c1ddc23ed4598a5fa \
    --hash=sha256:ed6231f0429ecf966f5bc8dfef245998220549cbbcf140f913b7464c52c3b6b3
    # via
    #   jupyter-events
    #   jupyterlab-server
    #   nbformat
jsonschema-specifications==2023.12.1 \
    --hash=sha256:48a76787b3e70f5ed53f1160d2b81f586e4ca6d1548c5de7085d1682674764cc \
    --hash=sha256:87e4fdf3a94858b8a2ba2778d9ba57d8a9cafca7c7489c46ba0d30a8bc6a9c3c
    # via jsonschema
jupyter-client==8.6.0 \
    --hash=sha256:0642244bb83b4764ae60d07e010e15f0e2d275ec4e918a8f7b80fbbef3ca60c7 \
    --hash=sha256:909c474dbe62582ae62b758bca86d6518c85234bdee2d908c778db6d72f39d99
    # via
    #   ipykernel
    #   jupyter-server
    #   nbclient
jupyter-core==5.7.1 \
    --hash=sha256:c65c82126453a723a2804aa52409930434598fd9d35091d63dfb919d2b765bb7 \
    --hash=sha256:de61a9d7fc71240f688b2fb5ab659fbb56979458dc66a71decd098e03c79e218
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-server
    #   jupyterlab
    #   nbclient
    #   nbconvert
    #   nbformat
jupyter-events==0.9.0 \
    --hash=sha256:81ad2e4bc710881ec274d31c6c50669d71bbaa5dd9d01e600b56faa85700d399 \
    --hash=sha256:d853b3c10273ff9bc8bb8b30076d65e2c9685579db736873de6c2232dde148bf
    # via jupyter-server
jupyter-lsp==2.2.1 \
    --hash=sha256:17a689910c5e4ae5e7d334b02f31d08ffbe98108f6f658fb05e4304b4345368b \
    --hash=sha256:b17fab6d70fe83c8896b0cff59237640038247c196056b43684a0902b6a9e0fb
    # via jupyterlab
jupyter-server==2.12.4 \
    --hash=sha256:41f4a1e6b912cc24a7c6c694851b37d3d8412b180f43d72315fe422cb2b85cc2 \
    --hash=sha256:a125ae18a60de568f78f55c84dd58759901a18ef279abf0418ac220653ca1320
    # via
    #   jupyter-lsp
    #   jupyterlab
    #   jupyterlab-server
    #   notebook
    #   notebook-shim
jupyter-server-terminals==0.5.1 \
    --hash=sha256:16d3be9cf48be6a1f943f3a6c93c033be259cf4779184c66421709cf63dccfea \
    --hash=sha256:5e63e947ddd97bb2832db5ef837a258d9ccd4192cd608c1270850ad947ae5dd7
    # via jupyter-server
jupyterlab==4.0.10 \
    --hash=sha256:46177eb8ede70dc73be922ac99f8ef943bdc2dfbc6a31b353c4bde848a35dee1 \
    --hash=sha256:fe010ad9e37017488b468632ef2ead255fc7c671c5b64d9ca13e1f7b7e665c37
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   notebook
jupyterlab-pygments==0.3.0 \
    --hash=sha256:721aca4d9029252b11cfa9d185e5b5af4d54772bb8072f9b7036f4170054d35d \
    --hash=sha256:841a89020971da1d8693f1a99997aefc5dc424bb1b251fd6322462a1b8842780
    # via nbconvert
jupyterlab-server==2.25.2 \
    --hash=sha256:5b1798c9cc6a44f65c757de9f97fc06fc3d42535afbf47d2ace5e964ab447aaf \
    --hash=sha256:bd0ec7a99ebcedc8bcff939ef86e52c378e44c2707e053fcd81d046ce979ee63
    # via
    #   jupyterlab
    #   notebook
jupyterlab-widgets==1.1.7 \
    --hash=sha256:0c4548cf42032e490447e4180f2c7d49ba5c30b42164992b38fb8c9d56c4e1b2 \
    --hash=sha256:318dab34267915d658e7b0dc57433ff0ce0d52b3e283986b73b66f7ab9017ae8
    # via ipywidgets
jupytext==1.16.1 \
    --hash=sha256:68c7b68685e870e80e60fda8286fbd6269e9c74dc1df4316df6fe46eabc94c99 \
    --hash=sha256:796ec4f68ada663569e5d38d4ef03738a01284bfe21c943c485bc36433898bd0
    # via i3-workspace-groups (pyproject.toml)
markdown-it-py==3.0.0 \
    --hash=sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1 \
    --hash=sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb
    # via
    #   jupytext
    #   mdit-py-plugins
    #   rich
markupsafe==2.1.3 \
    --hash=sha256:05fb21170423db021895e1ea1e1f3ab3adb85d1c2333cbc2310f2a26bc77272e \
    --hash=sha256:0a4e4a1aff6c7ac4cd55792abf96c915634c2b97e3cc1c7129578aa68ebd754e \
    --hash=sha256:10bbfe99883db80bdbaff2dcf681dfc6533a614f700da1287707e8a5d78a8431 \
    --hash=sha256:134da1eca9ec0ae528110ccc9e48041e0828d79f24121a1a146161103c76e686 \
    --hash=sha256:14ff806850827afd6b07a5f32bd917fb7f45b046ba40c57abdb636674a8b559c \
    --hash=sha256:1577735524cdad32f9f694208aa75e422adba74f1baee7551620e43a3141f559 \
    --hash=sha256:1b40069d487e7edb2676d3fbdb2b0829ffa2cd63a2ec26c4938b2d34391b4ecc \
    --hash=sha256:1b8dd8c3fd14349433c79fa8abeb573a55fc0fdd769133baac1f5e07abf54aeb \
    --hash=sha256:1f67c7038d560d92149c060157d623c542173016c4babc0c1913cca0564b9939 \
    --hash=sha256:282c2cb35b5b673bbcadb33a585408104df04f14b2d9b01d4c345a3b92861c2c \
    --hash=sha256:2c1b19b3aaacc6e57b7e25710ff571c24d6c3613a45e905b1fde04d691b98ee0 \
    --hash=sha256:2ef12179d3a291be237280175b542c07a36e7f60718296278d8593d21ca937d4 \
    --hash=sha256:338ae27d6b8745585f87218a3f23f1512dbf52c26c28e322dbe54bcede54ccb9 \
    --hash=sha256:3c0fae6c3be832a0a0473ac912810b2877c8cb9d76ca48de1ed31e1c68386575 \
    --hash=sha256:3fd4abcb888d15a94f32b75d8fd18ee162ca0c064f35b11134be77050296d6ba \
    --hash=sha256:42de32b22b6b804f42c5d98be4f7e5e977ecdd9ee9b660fda1a3edf03b11792d \
    --hash=sha256:47d4f1c5f80fc62fdd7777d0d40a2e9dda0a05883ab11374334f6c4de38adffd \
    --hash=sha256:504b320cd4b7eff6f968eddf81127112db685e81f7e36e75f9f84f0df46041c3 \
    --hash=sha256:525808b8019e36eb524b8c68acdd63a37e75714eac50e988180b169d64480a00 \
    --hash=sha256:56d9f2ecac662ca1611d183feb03a3fa4406469dafe241673d521dd5ae92a155 \
    --hash=sha256:5bbe06f8eeafd38e5d0a4894ffec89378b6c6a625ff57e3028921f8ff59318ac \
    --hash=sha256:65c1a9bcdadc6c28eecee2c119465aebff8f7a584dd719facdd9e825ec61ab52 \
    --hash=sha256:68e78619a61ecf91e76aa3e6e8e33fc4894a2bebe93410754bd28fce0a8a4f9f \
    --hash=sha256:69c0f17e9f5a7afdf2cc9fb2d1ce6aabdb3bafb7f38017c0b77862bcec2bbad8 \
    --hash=sha256:6b2b56950d93e41f33b4223ead100ea0fe11f8e6ee5f641eb753ce4b77a7042b \
    --hash=sha256:715d3562f79d540f251b99ebd6d8baa547118974341db04f5ad06d5ea3eb8007 \
    --hash=sha256:787003c0ddb00500e49a10f2844fac87aa6ce977b90b0feaaf9de23c22508b24 \
    --hash=sha256:7ef3cb2ebbf91e330e3bb937efada0edd9003683db6b57bb108c4001f37a02ea \
    --hash=sha256:8023faf4e01efadfa183e863fefde0046de576c6f14659e8782065bcece22198 \
    --hash=sha256:8758846a7e80910096950b67071243da3e5a20ed2546e6392603c096778d48e0 \
    --hash=sha256:8afafd99945ead6e075b973fefa56379c5b5c53fd8937dad92c662da5d8fd5ee \
    --hash=sha256:8c41976a29d078bb235fea9b2ecd3da465df42a562910f9022f1a03107bd02be \
    --hash=sha256:8e254ae696c88d98da6555f5ace2279cf7cd5b3f52be2b5cf97feafe883b58d2 \
    --hash=sha256:8f9293864fe09b8149f0cc42ce56e3f0e54de883a9de90cd427f191c346eb2e1 \
    --hash=sha256:9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707 \
    --hash=sha256:962f82a3086483f5e5f64dbad880d31038b698494799b097bc59c2edf392fce6 \
    --hash=sha256:9aad3c1755095ce347e26488214ef77e0485a3c34a50c5a5e2471dff60b9dd9c \
    --hash=sha256:9dcdfd0eaf283af041973bff14a2e143b8bd64e069f4c383416ecd79a81aab58 \
    --hash=sha256:aa57bd9cf8ae831a362185ee444e15a93ecb2e344c8e52e4d721ea3ab6ef1823 \
    --hash=sha256:aa7bd130efab1c280bed0f45501b7c8795f9fdbeb02e965371bbef3523627779 \
    --hash=sha256:ab4a0df41e7c16a1392727727e7998a467472d0ad65f3ad5e6e765015df08636 \
    --hash=sha256:ad9e82fb8f09ade1c3e1b996a6337afac2b8b9e365f926f5a61aacc71adc5b3c \
    --hash=sha256:af598ed32d6ae86f1b747b82783958b1a4ab8f617b06fe68795c7f026abbdcad \
    --hash=sha256:b076b6226fb84157e3f7c971a47ff3a679d837cf338547532ab866c57930dbee \
    --hash=sha256:b7ff0f54cb4ff66dd38bebd335a38e2c22c41a8ee45aa608efc890ac3e3931bc \
    --hash=sha256:bfce63a9e7834b12b87c64d6b155fdd9b3b96191b6bd334bf37db7ff1fe457f2 \
    --hash=sha256:c011a4149cfbcf9f03994ec2edffcb8b1dc2d2aede7ca243746df97a5d41ce48 \
    --hash=sha256:c9c804664ebe8f83a211cace637506669e7890fec1b4195b505c214e50dd4eb7 \
    --hash=sha256:ca379055a47383d02a5400cb0d110cef0a776fc644cda797db0c5696cfd7e18e \
    --hash=sha256:cb0932dc158471523c9637e807d9bfb93e06a95cbf010f1a38b98623b929ef2b \
    --hash=sha256:cd0f502fe016460680cd20aaa5a76d241d6f35a1c3350c474bac1273803893fa \
    --hash=sha256:ceb01949af7121f9fc39f7d27f91be8546f3fb112c608bc4029aef0bab86a2a5 \
    --hash=sha256:d080e0a5eb2529460b30190fcfcc4199bd7f827663f858a226a81bc27beaa97e \
    --hash=sha256:dd15ff04ffd7e05ffcb7fe79f1b98041b8ea30ae9234aed2a9168b5797c3effb \
    --hash=sha256:df0be2b576a7abbf737b1575f048c23fb1d769f267ec4358296f31c2479db8f9 \
    --hash=sha256:e09031c87a1e51556fdcb46e5bd4f59dfb743061cf93c4d6831bf894f125eb57 \
    --hash=sha256:e4dd52d80b8c83fdce44e12478ad2e85c64ea965e75d66dbeafb0a3e77308fcc \
    --hash=sha256:f698de3fd0c4e6972b92290a45bd9b1536bffe8c6759c62471efaa8acb4c37bc \
    --hash=sha256:fec21693218efe39aa7f8599346e90c705afa52c5b31ae019b2e57e8f6542bb2 \
    --hash=sha256:ffcc3f7c66b5f5b7931a5aa68fc9cecc51e685ef90282f4a82f0f5e9b704ad11
    # via
    #   jinja2
    #   nbconvert
matplotlib-inline==0.1.6 \
    --hash=sha256:f1f41aab5328aa5aaea9b16d083b128102f8712542f819fe7e6a420ff581b311 \
    --hash=sha256:f887e5f10ba98e8d2b150ddcf4702c1e5f8b3a20005eb0f74bfdbd360ee6f304
    # via
    #   ipykernel
    #   ipython
mdit-py-plugins==0.4.0 \
    --hash=sha256:b51b3bb70691f57f974e257e367107857a93b36f322a9e6d44ca5bf28ec2def9 \
    --hash=sha256:d8ab27e9aed6c38aa716819fedfde15ca275715955f8a185a8e1cf90fb1d2c1b
    # via jupytext
mdurl==0.1.2 \
    --hash=sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8 \
    --hash=sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba
    # via markdown-it-py
mistune==3.0.2 \
    --hash=sha256:71481854c30fdbc938963d3605b72501f5c10a9320ecd412c121c163a1c7d205 \
    --hash=sha256:fc7f93ded930c92394ef2cb6f04a8aabab4117a91449e72dcc8dfa646a508be8
    # via nbconvert
nbclient==0.9.0 \
    --hash=sha256:4b28c207877cf33ef3a9838cdc7a54c5ceff981194a82eac59d558f05487295e \
    --hash=sha256:a3a1ddfb34d4a9d17fc744d655962714a866639acd30130e9be84191cd97cd15
    # via nbconvert
nbconvert==7.14.1 \
    --hash=sha256:20cba10e0448dc76b3bebfe1adf923663e3b98338daf77b97b42511ef5a88618 \
    --hash=sha256:aa83e3dd27ea38d0c1d908e3ce9518d15fa908dd30521b6d5040bd23f33fffb0
    # via jupyter-server
nbformat==5.9.2 \
    --hash=sha256:1c5172d786a41b82bcfd0c23f9e6b6f072e8fb49c39250219e4acfff1efe89e9 \
    --hash=sha256:5f98b5ba1997dff175e77e0c17d5c10a96eaed2cbd1de3533d1fc35d5e111192
    # via
    #   jupyter-server
    #   jupytext
    #   nbclient
    #   nbconvert
nest-asyncio==1.5.8 \
    --hash=sha256:25aa2ca0d2a5b5531956b9e273b45cf664cae2b145101d73b86b199978d48fdb \
    --hash=sha256:accda7a339a70599cb08f9dd09a67e0c2ef8d8d6f4c07f96ab203f2ae254e48d
    # via ipykernel
notebook==7.0.6 \
    --hash=sha256:0fe8f67102fea3744fedf652e4c15339390902ca70c5a31c4f547fa23da697cc \
    --hash=sha256:ec6113b06529019f7f287819af06c97a2baf7a95ac21a8f6e32192898e9f9a58
    # via widgetsnbextension
notebook-shim==0.2.3 \
    --hash=sha256:a83496a43341c1674b093bfcebf0fe8e74cbe7eda5fd2bbc56f8e39e1486c0c7 \
    --hash=sha256:f69388ac283ae008cd506dda10d0288b09a017d822d5e8c7129a152cbd3ce7e9
    # via
    #   jupyterlab
    #   notebook
overrides==7.4.0 \
    --hash=sha256:3ad24583f86d6d7a49049695efe9933e67ba62f0c7625d53c59fa832ce4b8b7d \
    --hash=sha256:9502a3cca51f4fac40b5feca985b6703a5c1f6ad815588a7ca9e285b9dca6757
    # via jupyter-server
packaging==23.2 \
    --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \
    --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7
    # via
    #   -c req/dev.txt
    #   ipykernel
    #   jupyter-server
    #   jupyterlab
    #   jupyterlab-server
    #   jupytext
    #   nbconvert
pandocfilters==1.5.0 \
    --hash=sha256:0b679503337d233b4339a817bfc8c50064e2eff681314376a47cb582305a7a38 \
    --hash=sha256:33aae3f25fd1a026079f5d27bdd52496f0e0803b3469282162bafdcbdf6ef14f
    # via nbconvert
parso==0.8.3 \
    --hash=sha256:8c07be290bb59f03588915921e29e8a50002acaf2cdc5fa0e0114f91709fafa0 \
    --hash=sha256:c001d4636cd3aecdaf33cbb40aebb59b094be2a74c556778ef5576c175e19e75
    # via jedi
pexpect==4.9.0 \
    --hash=sha256:7236d1e080e4936be2dc3e326cec0af72acf9212a7e1d060210e70a47e253523 \
    --hash=sha256:ee7d41123f3c9911050ea2c2dac107568dc43b2d3b0c7557a33212c398ead30f
    # via ipython
platformdirs==4.1.0 \
    --hash=sha256:11c8f37bcca40db96d8144522d925583bdb7a31f7b0e37e3ed4318400a8e2380 \
    --hash=sha256:906d548203468492d432bcb294d4bc2fff751bf84971fbb2c10918cc206ee420
    # via
    #   -c req/dev.txt
    #   jupyter-core
prometheus-client==0.19.0 \
    --hash=sha256:4585b0d1223148c27a225b10dbec5ae9bc4c81a99a3fa80774fa6209935324e1 \
    --hash=sha256:c88b1e6ecf6b41cd8fb5731c7ae919bf66df6ec6fafa555cd6c0e16ca169ae92
    # via jupyter-server
prompt-toolkit==3.0.43 \
    --hash=sha256:3527b7af26106cbc65a040bcc84839a3566ec1b051bb0bfe953631e704b0ff7d \
    --hash=sha256:a11a29cb3bf0a28a387fe5122cdb649816a957cd9261dcedf8c9f1fef33eacf6
    # via ipython
psutil==5.9.7 \
    --hash=sha256:032f4f2c909818c86cea4fe2cc407f1c0f0cde8e6c6d702b28b8ce0c0d143340 \
    --hash=sha256:0bd41bf2d1463dfa535942b2a8f0e958acf6607ac0be52265ab31f7923bcd5e6 \
    --hash=sha256:1132704b876e58d277168cd729d64750633d5ff0183acf5b3c986b8466cd0284 \
    --hash=sha256:1d4bc4a0148fdd7fd8f38e0498639ae128e64538faa507df25a20f8f7fb2341c \
    --hash=sha256:3c4747a3e2ead1589e647e64aad601981f01b68f9398ddf94d01e3dc0d1e57c7 \
    --hash=sha256:3f02134e82cfb5d089fddf20bb2e03fd5cd52395321d1c8458a9e58500ff417c \
    --hash=sha256:44969859757f4d8f2a9bd5b76eba8c3099a2c8cf3992ff62144061e39ba8568e \
    --hash=sha256:4c03362e280d06bbbfcd52f29acd79c733e0af33d707c54255d21029b8b32ba6 \
    --hash=sha256:5794944462509e49d4d458f4dbfb92c47539e7d8d15c796f141f474010084056 \
    --hash=sha256:b27f8fdb190c8c03914f908a4555159327d7481dac2f01008d483137ef3311a9 \
    --hash=sha256:c727ca5a9b2dd5193b8644b9f0c883d54f1248310023b5ad3e92036c5e2ada68 \
    --hash=sha256:e469990e28f1ad738f65a42dcfc17adaed9d0f325d55047593cb9033a0ab63df \
    --hash=sha256:ea36cc62e69a13ec52b2f625c27527f6e4479bca2b340b7a452af55b34fcbe2e \
    --hash=sha256:f37f87e4d73b79e6c5e749440c3113b81d1ee7d26f21c19c47371ddea834f414 \
    --hash=sha256:fe361f743cb3389b8efda21980d93eb55c1f1e3898269bc9a2a1d0bb7b1f6508 \
    --hash=sha256:fe8b7f07948f1304497ce4f4684881250cd859b16d06a1dc4d7941eeb6233bfe
    # via ipykernel
ptyprocess==0.7.0 \
    --hash=sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35 \
    --hash=sha256:5c5d0a3b48ceee0b48485e0c26037c0acd7d29765ca3fbb5cb3831d347423220
    # via
    #   pexpect
    #   terminado
pure-eval==0.2.2 \
    --hash=sha256:01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350 \
    --hash=sha256:2b45320af6dfaa1750f543d714b6d1c520a1688dec6fd24d339063ce0aaa9ac3
    # via stack-data
pycparser==2.21 \
    --hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 \
    --hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
    # via cffi
pyflyby==1.8.7 \
    --hash=sha256:d33f87fdb470c2040bf1583c33884dbc913ea8514030ffbb62b396a97a6224a5
    # via i3-workspace-groups (pyproject.toml)
pygments==2.17.2 \
    --hash=sha256:b27c2826c47d0f3219f29554824c30c5e8945175d888647acd804ddd04af846c \
    --hash=sha256:da46cec9fd2de5be3a8a784f434e4c4ab670b4ff54d605c4c2717e9d49c4c367
    # via
    #   ipython
    #   nbconvert
    #   rich
python-dateutil==2.8.2 \
    --hash=sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86 \
    --hash=sha256:961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9
    # via
    #   arrow
    #   jupyter-client
python-json-logger==2.0.7 \
    --hash=sha256:23e7ec02d34237c5aa1e29a070193a4ea87583bb4e7f8fd06d3de8264c4b2e1c \
    --hash=sha256:f380b826a991ebbe3de4d897aeec42760035ac760345e57b812938dc8b35e2bd
    # via jupyter-events
python-xlib==0.33 \
    --hash=sha256:55af7906a2c75ce6cb280a584776080602444f75815a7aff4d287bb2d7018b32 \
    --hash=sha256:c3534038d42e0df2f1392a1b30a15a4ff5fdc2b86cfa94f072bf11b10a164398
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   i3ipc
pyyaml==6.0.1 \
    --hash=sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5 \
    --hash=sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc \
    --hash=sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df \
    --hash=sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741 \
    --hash=sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206 \
    --hash=sha256:18aeb1bf9a78867dc38b259769503436b7c72f7a1f1f4c93ff9a17de54319b27 \
    --hash=sha256:1d4c7e777c441b20e32f52bd377e0c409713e8bb1386e1099c2415f26e479595 \
    --hash=sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62 \
    --hash=sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98 \
    --hash=sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696 \
    --hash=sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290 \
    --hash=sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9 \
    --hash=sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d \
    --hash=sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6 \
    --hash=sha256:4fb147e7a67ef577a588a0e2c17b6db51dda102c71de36f8549b6816a96e1867 \
    --hash=sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47 \
    --hash=sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486 \
    --hash=sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6 \
    --hash=sha256:596106435fa6ad000c2991a98fa58eeb8656ef2325d7e158344fb33864ed87e3 \
    --hash=sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007 \
    --hash=sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938 \
    --hash=sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0 \
    --hash=sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c \
    --hash=sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735 \
    --hash=sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d \
    --hash=sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28 \
    --hash=sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4 \
    --hash=sha256:9046c58c4395dff28dd494285c82ba00b546adfc7ef001486fbf0324bc174fba \
    --hash=sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8 \
    --hash=sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5 \
    --hash=sha256:afd7e57eddb1a54f0f1a974bc4391af8bcce0b444685d936840f125cf046d5bd \
    --hash=sha256:b1275ad35a5d18c62a7220633c913e1b42d44b46ee12554e5fd39c70a243d6a3 \
    --hash=sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0 \
    --hash=sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515 \
    --hash=sha256:baa90d3f661d43131ca170712d903e6295d1f7a0f595074f151c0aed377c9b9c \
    --hash=sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c \
    --hash=sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924 \
    --hash=sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34 \
    --hash=sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43 \
    --hash=sha256:c8098ddcc2a85b61647b2590f825f3db38891662cfc2fc776415143f599bb859 \
    --hash=sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673 \
    --hash=sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54 \
    --hash=sha256:d858aa552c999bc8a8d57426ed01e40bef403cd8ccdd0fc5f6f04a00414cac2a \
    --hash=sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b \
    --hash=sha256:f003ed9ad21d6a4713f0a9b5a7a0a79e08dd0f221aff4525a2be4c346ee60aab \
    --hash=sha256:f22ac1c3cac4dbc50079e965eba2c1058622631e526bd9afd45fedd49ba781fa \
    --hash=sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c \
    --hash=sha256:fca0e3a251908a499833aa292323f32437106001d436eca0e6e7833256674585 \
    --hash=sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d \
    --hash=sha256:fd66fc5d0da6d9815ba2cebeb4205f95818ff4b79c3ebe268e75d961704af52f
    # via
    #   jupyter-events
    #   jupytext
pyzmq==25.1.2 \
    --hash=sha256:004ff469d21e86f0ef0369717351073e0e577428e514c47c8480770d5e24a565 \
    --hash=sha256:00a06faa7165634f0cac1abb27e54d7a0b3b44eb9994530b8ec73cf52e15353b \
    --hash=sha256:00c48ae2fd81e2a50c3485de1b9d5c7c57cd85dc8ec55683eac16846e57ac979 \
    --hash=sha256:01171fc48542348cd1a360a4b6c3e7d8f46cdcf53a8d40f84db6707a6768acc1 \
    --hash=sha256:019744b99da30330798bb37df33549d59d380c78e516e3bab9c9b84f87a9592f \
    --hash=sha256:02bbc1a87b76e04fd780b45e7f695471ae6de747769e540da909173d50ff8e2d \
    --hash=sha256:02c9087b109070c5ab0b383079fa1b5f797f8d43e9a66c07a4b8b8bdecfd88ee \
    --hash=sha256:07cd61a20a535524906595e09344505a9bd46f1da7a07e504b315d41cd42eb07 \
    --hash=sha256:0806175f2ae5ad4b835ecd87f5f85583316b69f17e97786f7443baaf54b9bb98 \
    --hash=sha256:09dfe949e83087da88c4a76767df04b22304a682d6154de2c572625c62ad6886 \
    --hash=sha256:0dabfb10ef897f3b7e101cacba1437bd3a5032ee667b7ead32bbcdd1a8422fe7 \
    --hash=sha256:0ddd6d71d4ef17ba5a87becf7ddf01b371eaba553c603477679ae817a8d84d75 \
    --hash=sha256:0f513130c4c361201da9bc69df25a086487250e16b5571ead521b31ff6b02220 \
    --hash=sha256:0f97bc2f1f13cb16905a5f3e1fbdf100e712d841482b2237484360f8bc4cb3d7 \
    --hash=sha256:11e70516688190e9c2db14fcf93c04192b02d457b582a1f6190b154691b4c93a \
    --hash=sha256:146b9b1f29ead41255387fb07be56dc29639262c0f7344f570eecdcd8d683314 \
    --hash=sha256:16b726c1f6c2e7625706549f9dbe9b06004dfbec30dbed4bf50cbdfc73e5b32a \
    --hash=sha256:1b3cbba2f47062b85fe0ef9de5b987612140a9ba3a9c6d2543c6dec9f7c2ab27 \
    --hash=sha256:1b9b1f2ad6498445a941d9a4fee096d387fee436e45cc660e72e768d3d8ee611 \
    --hash=sha256:1ec23bd7b3a893ae676d0e54ad47d18064e6c5ae1fadc2f195143fb27373f7f6 \
    --hash=sha256:246747b88917e4867e2367b005fc8eefbb4a54b7db363d6c92f89d69abfff4b6 \
    --hash=sha256:25c2dbb97d38b5ac9fd15586e048ec5eb1e38f3d47fe7d92167b0c77bb3584e9 \
    --hash=sha256:2c6441e0398c2baacfe5ba30c937d274cfc2dc5b55e82e3749e333aabffde561 \
    --hash=sha256:2c9a79f1d2495b167119d02be7448bfba57fad2a4207c4f68abc0bab4b92925b \
    --hash=sha256:2e2713ef44be5d52dd8b8e2023d706bf66cb22072e97fc71b168e01d25192755 \
    --hash=sha256:313c3794d650d1fccaaab2df942af9f2c01d6217c846177cfcbc693c7410839e \
    --hash=sha256:3516e0b6224cf6e43e341d56da15fd33bdc37fa0c06af4f029f7d7dfceceabbc \
    --hash=sha256:359f7f74b5d3c65dae137f33eb2bcfa7ad9ebefd1cab85c935f063f1dbb245cc \
    --hash=sha256:39b1067f13aba39d794a24761e385e2eddc26295826530a8c7b6c6c341584289 \
    --hash=sha256:3c00c9b7d1ca8165c610437ca0c92e7b5607b2f9076f4eb4b095c85d6e680a1d \
    --hash=sha256:3c53687dde4d9d473c587ae80cc328e5b102b517447456184b485587ebd18b62 \
    --hash=sha256:3e124e6b1dd3dfbeb695435dff0e383256655bb18082e094a8dd1f6293114642 \
    --hash=sha256:4345c9a27f4310afbb9c01750e9461ff33d6fb74cd2456b107525bbeebcb5be3 \
    --hash=sha256:45999e7f7ed5c390f2e87ece7f6c56bf979fb213550229e711e45ecc7d42ccb8 \
    --hash=sha256:49151b0efece79f6a79d41a461d78535356136ee70084a1c22532fc6383f4ad0 \
    --hash=sha256:4cb8fc1f8d69b411b8ec0b5f1ffbcaf14c1db95b6bccea21d83610987435f1a4 \
    --hash=sha256:4e5837af3e5aaa99a091302df5ee001149baff06ad22b722d34e30df5f0d9097 \
    --hash=sha256:4e6f689880d5ad87918430957297c975203a082d9a036cc426648fcbedae769b \
    --hash=sha256:5074adeacede5f810b7ef39607ee59d94e948b4fd954495bdb072f8c54558181 \
    --hash=sha256:518efd91c3d8ac9f9b4f7dd0e2b7b8bf1a4fe82a308009016b07eaa48681af82 \
    --hash=sha256:55875492f820d0eb3417b51d96fea549cde77893ae3790fd25491c5754ea2f68 \
    --hash=sha256:5a68d491fc20762b630e5db2191dd07ff89834086740f70e978bb2ef2668be08 \
    --hash=sha256:5dde6751e857910c1339890f3524de74007958557593b9e7e8c5f01cd919f8a7 \
    --hash=sha256:5e319ed7d6b8f5fad9b76daa0a68497bc6f129858ad956331a5835785761e003 \
    --hash=sha256:5edac3f57c7ddaacdb4d40f6ef2f9e299471fc38d112f4bc6d60ab9365445fb0 \
    --hash=sha256:6cc0020b74b2e410287e5942e1e10886ff81ac77789eb20bec13f7ae681f0fdd \
    --hash=sha256:6dd0d50bbf9dca1d0bdea219ae6b40f713a3fb477c06ca3714f208fd69e16fd8 \
    --hash=sha256:7598d2ba821caa37a0f9d54c25164a4fa351ce019d64d0b44b45540950458840 \
    --hash=sha256:759cfd391a0996345ba94b6a5110fca9c557ad4166d86a6e81ea526c376a01e8 \
    --hash=sha256:7ae8f354b895cbd85212da245f1a5ad8159e7840e37d78b476bb4f4c3f32a9fe \
    --hash=sha256:7b6d09a8962a91151f0976008eb7b29b433a560fde056ec7a3db9ec8f1075438 \
    --hash=sha256:7c61e346ac34b74028ede1c6b4bcecf649d69b707b3ff9dc0fab453821b04d1e \
    --hash=sha256:7f51a7b4ead28d3fca8dda53216314a553b0f7a91ee8fc46a72b402a78c3e43d \
    --hash=sha256:82544e0e2d0c1811482d37eef297020a040c32e0687c1f6fc23a75b75db8062c \
    --hash=sha256:8807c87fa893527ae8a524c15fc505d9950d5e856f03dae5921b5e9aa3b8783b \
    --hash=sha256:889370d5174a741a62566c003ee8ddba4b04c3f09a97b8000092b7ca83ec9c49 \
    --hash=sha256:8b14c75979ce932c53b79976a395cb2a8cd3aaf14aef75e8c2cb55a330b9b49d \
    --hash=sha256:8c5f80e578427d4695adac6fdf4370c14a2feafdc8cb35549c219b90652536ae \
    --hash=sha256:8e9f3fabc445d0ce320ea2c59a75fe3ea591fdbdeebec5db6de530dd4b09412e \
    --hash=sha256:93f1aa311e8bb912e34f004cf186407a4e90eec4f0ecc0efd26056bf7eda0226 \
    --hash=sha256:94504ff66f278ab4b7e03e4cba7e7e400cb73bfa9d3d71f58d8972a8dc67e7a6 \
    --hash=sha256:967668420f36878a3c9ecb5ab33c9d0ff8d054f9c0233d995a6d25b0e95e1b6b \
    --hash=sha256:9880078f683466b7f567b8624bfc16cad65077be046b6e8abb53bed4eeb82dd3 \
    --hash=sha256:99a6b36f95c98839ad98f8c553d8507644c880cf1e0a57fe5e3a3f3969040882 \
    --hash=sha256:9a18fff090441a40ffda8a7f4f18f03dc56ae73f148f1832e109f9bffa85df15 \
    --hash=sha256:9add2e5b33d2cd765ad96d5eb734a5e795a0755f7fc49aa04f76d7ddda73fd70 \
    --hash=sha256:a793ac733e3d895d96f865f1806f160696422554e46d30105807fdc9841b9f7d \
    --hash=sha256:a86c2dd76ef71a773e70551a07318b8e52379f58dafa7ae1e0a4be78efd1ff16 \
    --hash=sha256:a8c1d566344aee826b74e472e16edae0a02e2a044f14f7c24e123002dcff1c05 \
    --hash=sha256:ac170e9e048b40c605358667aca3d94e98f604a18c44bdb4c102e67070f3ac9b \
    --hash=sha256:b264bf2cc96b5bc43ce0e852be995e400376bd87ceb363822e2cb1964fcdc737 \
    --hash=sha256:b8c8a419dfb02e91b453615c69568442e897aaf77561ee0064d789705ff37a92 \
    --hash=sha256:bc69c96735ab501419c432110016329bf0dea8898ce16fab97c6d9106dc0b348 \
    --hash=sha256:bef02cfcbded83473bdd86dd8d3729cd82b2e569b75844fb4ea08fee3c26ae41 \
    --hash=sha256:c0b5ca88a8928147b7b1e2dfa09f3b6c256bc1135a1338536cbc9ea13d3b7add \
    --hash=sha256:cc69949484171cc961e6ecd4a8911b9ce7a0d1f738fcae717177c231bf77437b \
    --hash=sha256:ced111c2e81506abd1dc142e6cd7b68dd53747b3b7ae5edbea4578c5eeff96b7 \
    --hash=sha256:d1299d7e964c13607efd148ca1f07dcbf27c3ab9e125d1d0ae1d580a1682399d \
    --hash=sha256:d1b604734bec94f05f81b360a272fc824334267426ae9905ff32dc2be433ab96 \
    --hash=sha256:d9a5f194cf730f2b24d6af1f833c14c10f41023da46a7f736f48b6d35061e76e \
    --hash=sha256:db36c27baed588a5a8346b971477b718fdc66cf5b80cbfbd914b4d6d355e44e2 \
    --hash=sha256:df0c7a16ebb94452d2909b9a7b3337940e9a87a824c4fc1c7c36bb4404cb0cde \
    --hash=sha256:e10a4b5a4b1192d74853cc71a5e9fd022594573926c2a3a4802020360aa719d8 \
    --hash=sha256:e624c789359f1a16f83f35e2c705d07663ff2b4d4479bad35621178d8f0f6ea4 \
    --hash=sha256:e690145a8c0c273c28d3b89d6fb32c45e0d9605b2293c10e650265bf5c11cfec \
    --hash=sha256:ea1608dd169da230a0ad602d5b1ebd39807ac96cae1845c3ceed39af08a5c6df \
    --hash=sha256:ea253b368eb41116011add00f8d5726762320b1bda892f744c91997b65754d73 \
    --hash=sha256:eb7e49a17fb8c77d3119d41a4523e432eb0c6932187c37deb6fbb00cc3028088 \
    --hash=sha256:ef12e259e7bc317c7597d4f6ef59b97b913e162d83b421dd0db3d6410f17a244 \
    --hash=sha256:f8429b17cbb746c3e043cb986328da023657e79d5ed258b711c06a70c2ea7537 \
    --hash=sha256:fa99973d2ed20417744fca0073390ad65ce225b546febb0580358e36aa90dba6 \
    --hash=sha256:faf79a302f834d9e8304fafdc11d0d042266667ac45209afa57e5efc998e3872 \
    --hash=sha256:fc31baa0c32a2ca660784d5af3b9487e13b61b3032cb01a115fce6588e1bed30
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-server
referencing==0.32.1 \
    --hash=sha256:3c57da0513e9563eb7e203ebe9bb3a1b509b042016433bd1e45a2853466c3dd3 \
    --hash=sha256:7e4dc12271d8e15612bfe35792f5ea1c40970dadf8624602e33db2758f7ee554
    # via
    #   jsonschema
    #   jsonschema-specifications
    #   jupyter-events
requests==2.31.0 \
    --hash=sha256:58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f \
    --hash=sha256:942c5a758f98d790eaed1a29cb6eefc7ffb0d1cf7af05c3d2791656dbd6ad1e1
    # via jupyterlab-server
rfc3339-validator==0.1.4 \
    --hash=sha256:138a2abdf93304ad60530167e51d2dfb9549521a836871b88d7f4695d0022f6b \
    --hash=sha256:24f6ec1eda14ef823da9e36ec7113124b39c04d50a4d3d3a3c2859577e7791fa
    # via
    #   jsonschema
    #   jupyter-events
rfc3986-validator==0.1.1 \
    --hash=sha256:2f235c432ef459970b4306369336b9d5dbdda31b510ca1e327636e01f528bfa9 \
    --hash=sha256:3d44bde7921b3b9ec3ae4e3adca370438eccebc676456449b145d533b240d055
    # via
    #   jsonschema
    #   jupyter-events
rich==13.7.0 \
    --hash=sha256:5cb5123b5cf9ee70584244246816e9114227e0b98ad9176eede6ad54bf5403fa \
    --hash=sha256:6da14c108c4866ee9520bbffa71f6fe3962e193b7da68720583850cd4548e235
    # via i3-workspace-groups (pyproject.toml)
rpds-py==0.17.1 \
    --hash=sha256:01f58a7306b64e0a4fe042047dd2b7d411ee82e54240284bab63e325762c1147 \
    --hash=sha256:0210b2668f24c078307260bf88bdac9d6f1093635df5123789bfee4d8d7fc8e7 \
    --hash=sha256:02866e060219514940342a1f84303a1ef7a1dad0ac311792fbbe19b521b489d2 \
    --hash=sha256:0387ce69ba06e43df54e43968090f3626e231e4bc9150e4c3246947567695f68 \
    --hash=sha256:060f412230d5f19fc8c8b75f315931b408d8ebf56aec33ef4168d1b9e54200b1 \
    --hash=sha256:071bc28c589b86bc6351a339114fb7a029f5cddbaca34103aa573eba7b482382 \
    --hash=sha256:0bfb09bf41fe7c51413f563373e5f537eaa653d7adc4830399d4e9bdc199959d \
    --hash=sha256:10162fe3f5f47c37ebf6d8ff5a2368508fe22007e3077bf25b9c7d803454d921 \
    --hash=sha256:149c5cd24f729e3567b56e1795f74577aa3126c14c11e457bec1b1c90d212e38 \
    --hash=sha256:1701fc54460ae2e5efc1dd6350eafd7a760f516df8dbe51d4a1c79d69472fbd4 \
    --hash=sha256:1957a2ab607f9added64478a6982742eb29f109d89d065fa44e01691a20fc20a \
    --hash=sha256:1a746a6d49665058a5896000e8d9d2f1a6acba8a03b389c1e4c06e11e0b7f40d \
    --hash=sha256:1bfcad3109c1e5ba3cbe2f421614e70439f72897515a96c462ea657261b96518 \
    --hash=sha256:1d36b2b59e8cc6e576f8f7b671e32f2ff43153f0ad6d0201250a7c07f25d570e \
    --hash=sha256:1db228102ab9d1ff4c64148c96320d0be7044fa28bd865a9ce628ce98da5973d \
    --hash=sha256:1dc29db3900cb1bb40353772417800f29c3d078dbc8024fd64655a04ee3c4bdf \
    --hash=sha256:1e626b365293a2142a62b9a614e1f8e331b28f3ca57b9f05ebbf4cf2a0f0bdc5 \
    --hash=sha256:1f3c3461ebb4c4f1bbc70b15d20b565759f97a5aaf13af811fcefc892e9197ba \
    --hash=sha256:20de7b7179e2031a04042e85dc463a93a82bc177eeba5ddd13ff746325558aa6 \
    --hash=sha256:24e4900a6643f87058a27320f81336d527ccfe503984528edde4bb660c8c8d59 \
    --hash=sha256:2528ff96d09f12e638695f3a2e0c609c7b84c6df7c5ae9bfeb9252b6fa686253 \
    --hash=sha256:25f071737dae674ca8937a73d0f43f5a52e92c2d178330b4c0bb6ab05586ffa6 \
    --hash=sha256:270987bc22e7e5a962b1094953ae901395e8c1e1e83ad016c5cfcfff75a15a3f \
    --hash=sha256:292f7344a3301802e7c25c53792fae7d1593cb0e50964e7bcdcc5cf533d634e3 \
    --hash=sha256:2953937f83820376b5979318840f3ee47477d94c17b940fe31d9458d79ae7eea \
    --hash=sha256:2a792b2e1d3038daa83fa474d559acfd6dc1e3650ee93b2662ddc17dbff20ad1 \
    --hash=sha256:2a7b2f2f56a16a6d62e55354dd329d929560442bd92e87397b7a9586a32e3e76 \
    --hash=sha256:2f4eb548daf4836e3b2c662033bfbfc551db58d30fd8fe660314f86bf8510b93 \
    --hash=sha256:3664d126d3388a887db44c2e293f87d500c4184ec43d5d14d2d2babdb4c64cad \
    --hash=sha256:3677fcca7fb728c86a78660c7fb1b07b69b281964673f486ae72860e13f512ad \
    --hash=sha256:380e0df2e9d5d5d339803cfc6d183a5442ad7ab3c63c2a0982e8c824566c5ccc \
    --hash=sha256:3ac732390d529d8469b831949c78085b034bff67f584559340008d0f6041a049 \
    --hash=sha256:4128980a14ed805e1b91a7ed551250282a8ddf8201a4e9f8f5b7e6225f54170d \
    --hash=sha256:4341bd7579611cf50e7b20bb8c2e23512a3dc79de987a1f411cb458ab670eb90 \
    --hash=sha256:436474f17733c7dca0fbf096d36ae65277e8645039df12a0fa52445ca494729d \
    --hash=sha256:4dc889a9d8a34758d0fcc9ac86adb97bab3fb7f0c4d29794357eb147536483fd \
    --hash=sha256:4e21b76075c01d65d0f0f34302b5a7457d95721d5e0667aea65e5bb3ab415c25 \
    --hash=sha256:516fb8c77805159e97a689e2f1c80655c7658f5af601c34ffdb916605598cda2 \
    --hash=sha256:5576ee2f3a309d2bb403ec292d5958ce03953b0e57a11d224c1f134feaf8c40f \
    --hash=sha256:5a024fa96d541fd7edaa0e9d904601c6445e95a729a2900c5aec6555fe921ed6 \
    --hash=sha256:5d0e8a6434a3fbf77d11448c9c25b2f25244226cfbec1a5159947cac5b8c5fa4 \
    --hash=sha256:5e7d63ec01fe7c76c2dbb7e972fece45acbb8836e72682bde138e7e039906e2c \
    --hash=sha256:60e820ee1004327609b28db8307acc27f5f2e9a0b185b2064c5f23e815f248f8 \
    --hash=sha256:637b802f3f069a64436d432117a7e58fab414b4e27a7e81049817ae94de45d8d \
    --hash=sha256:65dcf105c1943cba45d19207ef51b8bc46d232a381e94dd38719d52d3980015b \
    --hash=sha256:698ea95a60c8b16b58be9d854c9f993c639f5c214cf9ba782eca53a8789d6b19 \
    --hash=sha256:70fcc6c2906cfa5c6a552ba7ae2ce64b6c32f437d8f3f8eea49925b278a61453 \
    --hash=sha256:720215373a280f78a1814becb1312d4e4d1077b1202a56d2b0815e95ccb99ce9 \
    --hash=sha256:7450dbd659fed6dd41d1a7d47ed767e893ba402af8ae664c157c255ec6067fde \
    --hash=sha256:7b7d9ca34542099b4e185b3c2a2b2eda2e318a7dbde0b0d83357a6d4421b5296 \
    --hash=sha256:7fbd70cb8b54fe745301921b0816c08b6d917593429dfc437fd024b5ba713c58 \
    --hash=sha256:81038ff87a4e04c22e1d81f947c6ac46f122e0c80460b9006e6517c4d842a6ec \
    --hash=sha256:810685321f4a304b2b55577c915bece4c4a06dfe38f6e62d9cc1d6ca8ee86b99 \
    --hash=sha256:82ada4a8ed9e82e443fcef87e22a3eed3654dd3adf6e3b3a0deb70f03e86142a \
    --hash=sha256:841320e1841bb53fada91c9725e766bb25009cfd4144e92298db296fb6c894fb \
    --hash=sha256:8587fd64c2a91c33cdc39d0cebdaf30e79491cc029a37fcd458ba863f8815383 \
    --hash=sha256:8ffe53e1d8ef2520ebcf0c9fec15bb721da59e8ef283b6ff3079613b1e30513d \
    --hash=sha256:9051e3d2af8f55b42061603e29e744724cb5f65b128a491446cc029b3e2ea896 \
    --hash=sha256:91e5a8200e65aaac342a791272c564dffcf1281abd635d304d6c4e6b495f29dc \
    --hash=sha256:93432e747fb07fa567ad9cc7aaadd6e29710e515aabf939dfbed8046041346c6 \
    --hash=sha256:938eab7323a736533f015e6069a7d53ef2dcc841e4e533b782c2bfb9fb12d84b \
    --hash=sha256:9584f8f52010295a4a417221861df9bea4c72d9632562b6e59b3c7b87a1522b7 \
    --hash=sha256:9737bdaa0ad33d34c0efc718741abaafce62fadae72c8b251df9b0c823c63b22 \
    --hash=sha256:99da0a4686ada4ed0f778120a0ea8d066de1a0a92ab0d13ae68492a437db78bf \
    --hash=sha256:99f567dae93e10be2daaa896e07513dd4bf9c2ecf0576e0533ac36ba3b1d5394 \
    --hash=sha256:9bdf1303df671179eaf2cb41e8515a07fc78d9d00f111eadbe3e14262f59c3d0 \
    --hash=sha256:9f0e4dc0f17dcea4ab9d13ac5c666b6b5337042b4d8f27e01b70fae41dd65c57 \
    --hash=sha256:a000133a90eea274a6f28adc3084643263b1e7c1a5a66eb0a0a7a36aa757ed74 \
    --hash=sha256:a3264e3e858de4fc601741498215835ff324ff2482fd4e4af61b46512dd7fc83 \
    --hash=sha256:a71169d505af63bb4d20d23a8fbd4c6ce272e7bce6cc31f617152aa784436f29 \
    --hash=sha256:a967dd6afda7715d911c25a6ba1517975acd8d1092b2f326718725461a3d33f9 \
    --hash=sha256:aa5bfb13f1e89151ade0eb812f7b0d7a4d643406caaad65ce1cbabe0a66d695f \
    --hash=sha256:ae35e8e6801c5ab071b992cb2da958eee76340e6926ec693b5ff7d6381441745 \
    --hash=sha256:b686f25377f9c006acbac63f61614416a6317133ab7fafe5de5f7dc8a06d42eb \
    --hash=sha256:b760a56e080a826c2e5af09002c1a037382ed21d03134eb6294812dda268c811 \
    --hash=sha256:b86b21b348f7e5485fae740d845c65a880f5d1eda1e063bc59bef92d1f7d0c55 \
    --hash=sha256:b9412abdf0ba70faa6e2ee6c0cc62a8defb772e78860cef419865917d86c7342 \
    --hash=sha256:bd345a13ce06e94c753dab52f8e71e5252aec1e4f8022d24d56decd31e1b9b23 \
    --hash=sha256:be22ae34d68544df293152b7e50895ba70d2a833ad9566932d750d3625918b82 \
    --hash=sha256:bf046179d011e6114daf12a534d874958b039342b347348a78b7cdf0dd9d6041 \
    --hash=sha256:c3d2010656999b63e628a3c694f23020322b4178c450dc478558a2b6ef3cb9bb \
    --hash=sha256:c64602e8be701c6cfe42064b71c84ce62ce66ddc6422c15463fd8127db3d8066 \
    --hash=sha256:d65e6b4f1443048eb7e833c2accb4fa7ee67cc7d54f31b4f0555b474758bee55 \
    --hash=sha256:d8bbd8e56f3ba25a7d0cf980fc42b34028848a53a0e36c9918550e0280b9d0b6 \
    --hash=sha256:da1ead63368c04a9bded7904757dfcae01eba0e0f9bc41d3d7f57ebf1c04015a \
    --hash=sha256:dbbb95e6fc91ea3102505d111b327004d1c4ce98d56a4a02e82cd451f9f57140 \
    --hash=sha256:dbc56680ecf585a384fbd93cd42bc82668b77cb525343170a2d86dafaed2a84b \
    --hash=sha256:df3b6f45ba4515632c5064e35ca7f31d51d13d1479673185ba8f9fefbbed58b9 \
    --hash=sha256:dfe07308b311a8293a0d5ef4e61411c5c20f682db6b5e73de6c7c8824272c256 \
    --hash=sha256:e796051f2070f47230c745d0a77a91088fbee2cc0502e9b796b9c6471983718c \
    --hash=sha256:efa767c220d94aa4ac3a6dd3aeb986e9f229eaf5bce92d8b1b3018d06bed3772 \
    --hash=sha256:f0b8bf5b8db49d8fd40f54772a1dcf262e8be0ad2ab0206b5a2ec109c176c0a4 \
    --hash=sha256:f175e95a197f6a4059b50757a3dca33b32b61691bdbd22c29e8a8d21d3914cae \
    --hash=sha256:f2f3b28b40fddcb6c1f1f6c88c6f3769cd933fa493ceb79da45968a21dccc920 \
    --hash=sha256:f6c43b6f97209e370124baf2bf40bb1e8edc25311a158867eb1c3a5d449ebc7a \
    --hash=sha256:f7f4cb1f173385e8a39c29510dd11a78bf44e360fb75610594973f5ea141028b \
    --hash=sha256:fad059a4bd14c45776600d223ec194e77db6c20255578bb5bcdd7c18fd169361 \
    --hash=sha256:ff1dcb8e8bc2261a088821b2595ef031c91d499a0c1b031c152d43fe0a6ecec8 \
    --hash=sha256:ffee088ea9b593cc6160518ba9bd319b5475e5f3e578e4552d63818773c6f56a
    # via
    #   jsonschema
    #   referencing
send2trash==1.8.2 \
    --hash=sha256:a384719d99c07ce1eefd6905d2decb6f8b7ed054025bb0e618919f945de4f679 \
    --hash=sha256:c132d59fa44b9ca2b1699af5c86f57ce9f4c5eb56629d5d55fbb7a35f84e2312
    # via jupyter-server
six==1.16.0 \
    --hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \
    --hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   asttokens
    #   bleach
    #   pyflyby
    #   python-dateutil
    #   python-xlib
    #   rfc3339-validator
sniffio==1.3.0 \
    --hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 \
    --hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
    # via anyio
soupsieve==2.5 \
    --hash=sha256:5663d5a7b3bfaeee0bc4372e7fc48f9cff4940b3eec54a6451cc5299f1097690 \
    --hash=sha256:eaa337ff55a1579b6549dc679565eac1e3d000563bcb1c8ab0d0fefbc0c2cdc7
    # via beautifulsoup4
stack-data==0.6.3 \
    --hash=sha256:836a778de4fec4dcd1dcd89ed8abff8a221f58308462e1c4aa2a3cf30148f0b9 \
    --hash=sha256:d5558e0c25a4cb0853cddad3d77da9891a08cb85dd9f9f91b9f8cd66e511e695
    # via ipython
terminado==0.18.0 \
    --hash=sha256:1ea08a89b835dd1b8c0c900d92848147cef2537243361b2e3f4dc15df9b6fded \
    --hash=sha256:87b0d96642d0fe5f5abd7783857b9cab167f221a39ff98e3b9619a788a3c0f2e
    # via
    #   jupyter-server
    #   jupyter-server-terminals
tinycss2==1.2.1 \
    --hash=sha256:2b80a96d41e7c3914b8cda8bc7f705a4d9c49275616e886103dd839dfc847847 \
    --hash=sha256:8cff3a8f066c2ec677c06dbc7b45619804a6938478d9d73c284b29d14ecb0627
    # via nbconvert
toml==0.10.2 \
    --hash=sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b \
    --hash=sha256:b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   i3-workspace-groups (pyproject.toml)
    #   jupytext
    #   pyflyby
tornado==6.4 \
    --hash=sha256:02ccefc7d8211e5a7f9e8bc3f9e5b0ad6262ba2fbb683a6443ecc804e5224ce0 \
    --hash=sha256:10aeaa8006333433da48dec9fe417877f8bcc21f48dda8d661ae79da357b2a63 \
    --hash=sha256:27787de946a9cffd63ce5814c33f734c627a87072ec7eed71f7fc4417bb16263 \
    --hash=sha256:6f8a6c77900f5ae93d8b4ae1196472d0ccc2775cc1dfdc9e7727889145c45052 \
    --hash=sha256:71ddfc23a0e03ef2df1c1397d859868d158c8276a0603b96cf86892bff58149f \
    --hash=sha256:72291fa6e6bc84e626589f1c29d90a5a6d593ef5ae68052ee2ef000dfd273dee \
    --hash=sha256:88b84956273fbd73420e6d4b8d5ccbe913c65d31351b4c004ae362eba06e1f78 \
    --hash=sha256:e43bc2e5370a6a8e413e1e1cd0c91bedc5bd62a74a532371042a18ef19e10579 \
    --hash=sha256:f0251554cdd50b4b44362f73ad5ba7126fc5b2c2895cc62b14a1c2d7ea32f212 \
    --hash=sha256:f7894c581ecdcf91666a0912f18ce5e757213999e183ebfc2c3fdbf4d5bd764e \
    --hash=sha256:fd03192e287fbd0899dd8f81c6fb9cbbc69194d2074b38f384cb6fa72b80e9c2
    # via
    #   ipykernel
    #   jupyter-client
    #   jupyter-server
    #   jupyterlab
    #   notebook
    #   terminado
traitlets==5.14.1 \
    --hash=sha256:2e5a030e6eff91737c643231bfcf04a65b0132078dad75e4936700b213652e74 \
    --hash=sha256:8585105b371a04b8316a43d5ce29c098575c2e477850b62b848b964f1444527e
    # via
    #   comm
    #   ipykernel
    #   ipython
    #   ipywidgets
    #   jupyter-client
    #   jupyter-core
    #   jupyter-events
    #   jupyter-server
    #   jupyterlab
    #   matplotlib-inline
    #   nbclient
    #   nbconvert
    #   nbformat
types-python-dateutil==2.8.19.20240106 \
    --hash=sha256:1f8db221c3b98e6ca02ea83a58371b22c374f42ae5bbdf186db9c9a76581459f \
    --hash=sha256:efbbdc54590d0f16152fa103c9879c7d4a00e82078f6e2cf01769042165acaa2
    # via arrow
typing-extensions==4.9.0 \
    --hash=sha256:23478f88c37f27d76ac8aee6c905017a143b0b1b886c3c9f66bc2fd94f9f5783 \
    --hash=sha256:af72aea155e91adfc61c3ae9e0e342dbc0cba726d6cba4b6c72c1f34e47291cd
    # via
    #   -c req/base.txt
    #   -c req/dev.txt
    #   i3-workspace-groups (pyproject.toml)
uri-template==1.3.0 \
    --hash=sha256:0e00f8eb65e18c7de20d595a14336e9f337ead580c70934141624b6d1ffdacc7 \
    --hash=sha256:a44a133ea12d44a0c0f06d7d42a52d71282e77e2f937d8abd5655b8d56fc1363
    # via jsonschema
urllib3==2.1.0 \
    --hash=sha256:55901e917a5896a349ff771be919f8bd99aff50b79fe58fec595eb37bbc56bb3 \
    --hash=sha256:df7aa8afb0148fa78488e7899b2c59b5f4ffcfa82e6c54ccb9dd37c1d7b52d54
    # via requests
wcwidth==0.2.13 \
    --hash=sha256:3da69048e4540d84af32131829ff948f1e022c1c6bdb8d6102117aac784f6859 \
    --hash=sha256:72ea0c06399eb286d978fdedb6923a9eb47e1c486ce63e9b4e64fc18303972b5
    # via prompt-toolkit
webcolors==1.13 \
    --hash=sha256:29bc7e8752c0a1bd4a1f03c14d6e6a72e93d82193738fa860cbff59d0fcc11bf \
    --hash=sha256:c225b674c83fa923be93d235330ce0300373d02885cef23238813b0d5668304a
    # via jsonschema
webencodings==0.5.1 \
    --hash=sha256:a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78 \
    --hash=sha256:b36a1c245f2d304965eb4e0a82848379241dc04b865afcc4aab16748587e1923
    # via
    #   bleach
    #   tinycss2
websocket-client==1.7.0 \
    --hash=sha256:10e511ea3a8c744631d3bd77e61eb17ed09304c413ad42cf6ddfa4c7787e8fe6 \
    --hash=sha256:f4c3d22fec12a2461427a29957ff07d35098ee2d976d3ba244e688b8b4057588
    # via jupyter-server
widgetsnbextension==3.6.6 \
    --hash=sha256:46f4e3cb2d451bbd6141a13696d6ba17c9b5f50645dca9cfd26fe9644d5a00e1 \
    --hash=sha256:e7fb9999845affc9024ecfbe0a824dd8e633403d027b28ceadab398b633ad51c
    # via ipywidgets



================================================
FILE: req/dev.in
================================================
# pip-compile doesn't support contraints when using pyproject.toml [1], so this file
# must either be compiled by pointing pip-compile to pyproject.toml, or manually adding
# constraints in the invocation.
# [1] https://github.com/jazzband/pip-tools/issues/1092#issuecomment-1256423806
# -c base.txt
pip-tools~=7.3
# pytype is not available for Python 3.12
# pytype
pylint~=3.0
ruff
pyright
yapf~=0.32
isort~=5.10
tox~=3.25
pytest~=7.3
pytest-cov
# pytest-asyncio
# pytest-mock
# pyinstrument~=4.1
validate-pyproject
setuptools-scm

# vim: set ft=requirements :



================================================
FILE: req/dev.txt
================================================
#
# This file is autogenerated by pip-compile with Python 3.11
# by the following command:
#
#    pip-compile --allow-unsafe --constraint=req/base.txt --extra=dev --generate-hashes --output-file=req/dev.txt --strip-extras pyproject.toml
#
astroid==3.0.2 \
    --hash=sha256:4a61cf0a59097c7bb52689b0fd63717cd2a8a14dc9f1eee97b82d814881c8c91 \
    --hash=sha256:d6e62862355f60e716164082d6b4b041d38e2a8cf1c7cd953ded5108bac8ff5c
    # via pylint
build==1.0.3 \
    --hash=sha256:538aab1b64f9828977f84bc63ae570b060a8ed1be419e7870b8b4fc5e6ea553b \
    --hash=sha256:589bf99a67df7c9cf07ec0ac0e5e2ea5d4b37ac63301c4986d1acb126aa83f8f
    # via pip-tools
click==8.1.7 \
    --hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 \
    --hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
    # via pip-tools
coverage==7.4.0 \
    --hash=sha256:04387a4a6ecb330c1878907ce0dc04078ea72a869263e53c72a1ba5bbdf380ca \
    --hash=sha256:0676cd0ba581e514b7f726495ea75aba3eb20899d824636c6f59b0ed2f88c471 \
    --hash=sha256:0e8d06778e8fbffccfe96331a3946237f87b1e1d359d7fbe8b06b96c95a5407a \
    --hash=sha256:0eb3c2f32dabe3a4aaf6441dde94f35687224dfd7eb2a7f47f3fd9428e421058 \
    --hash=sha256:109f5985182b6b81fe33323ab4707011875198c41964f014579cf82cebf2bb85 \
    --hash=sha256:13eaf476ec3e883fe3e5fe3707caeb88268a06284484a3daf8250259ef1ba143 \
    --hash=sha256:164fdcc3246c69a6526a59b744b62e303039a81e42cfbbdc171c91a8cc2f9446 \
    --hash=sha256:26776ff6c711d9d835557ee453082025d871e30b3fd6c27fcef14733f67f0590 \
    --hash=sha256:26f66da8695719ccf90e794ed567a1549bb2644a706b41e9f6eae6816b398c4a \
    --hash=sha256:29f3abe810930311c0b5d1a7140f6395369c3db1be68345638c33eec07535105 \
    --hash=sha256:316543f71025a6565677d84bc4df2114e9b6a615aa39fb165d697dba06a54af9 \
    --hash=sha256:36b0ea8ab20d6a7564e89cb6135920bc9188fb5f1f7152e94e8300b7b189441a \
    --hash=sha256:3cc9d4bc55de8003663ec94c2f215d12d42ceea128da8f0f4036235a119c88ac \
    --hash=sha256:485e9f897cf4856a65a57c7f6ea3dc0d4e6c076c87311d4bc003f82cfe199d25 \
    --hash=sha256:5040148f4ec43644702e7b16ca864c5314ccb8ee0751ef617d49aa0e2d6bf4f2 \
    --hash=sha256:51456e6fa099a8d9d91497202d9563a320513fcf59f33991b0661a4a6f2ad450 \
    --hash=sha256:53d7d9158ee03956e0eadac38dfa1ec8068431ef8058fe6447043db1fb40d932 \
    --hash=sha256:5a10a4920def78bbfff4eff8a05c51be03e42f1c3735be42d851f199144897ba \
    --hash=sha256:5b14b4f8760006bfdb6e08667af7bc2d8d9bfdb648351915315ea17645347137 \
    --hash=sha256:5b2ccb7548a0b65974860a78c9ffe1173cfb5877460e5a229238d985565574ae \
    --hash=sha256:697d1317e5290a313ef0d369650cfee1a114abb6021fa239ca12b4849ebbd614 \
    --hash=sha256:6ae8c9d301207e6856865867d762a4b6fd379c714fcc0607a84b92ee63feff70 \
    --hash=sha256:707c0f58cb1712b8809ece32b68996ee1e609f71bd14615bd8f87a1293cb610e \
    --hash=sha256:74775198b702868ec2d058cb92720a3c5a9177296f75bd97317c787daf711505 \
    --hash=sha256:756ded44f47f330666843b5781be126ab57bb57c22adbb07d83f6b519783b870 \
    --hash=sha256:76f03940f9973bfaee8cfba70ac991825611b9aac047e5c80d499a44079ec0bc \
    --hash=sha256:79287fd95585ed36e83182794a57a46aeae0b64ca53929d1176db56aacc83451 \
    --hash=sha256:799c8f873794a08cdf216aa5d0531c6a3747793b70c53f70e98259720a6fe2d7 \
    --hash=sha256:7d360587e64d006402b7116623cebf9d48893329ef035278969fa3bbf75b697e \
    --hash=sha256:80b5ee39b7f0131ebec7968baa9b2309eddb35b8403d1869e08f024efd883566 \
    --hash=sha256:815ac2d0f3398a14286dc2cea223a6f338109f9ecf39a71160cd1628786bc6f5 \
    --hash=sha256:83c2dda2666fe32332f8e87481eed056c8b4d163fe18ecc690b02802d36a4d26 \
    --hash=sha256:846f52f46e212affb5bcf131c952fb4075b55aae6b61adc9856222df89cbe3e2 \
    --hash=sha256:936d38794044b26c99d3dd004d8af0035ac535b92090f7f2bb5aa9c8e2f5cd42 \
    --hash=sha256:9864463c1c2f9cb3b5db2cf1ff475eed2f0b4285c2aaf4d357b69959941aa555 \
    --hash=sha256:995ea5c48c4ebfd898eacb098164b3cc826ba273b3049e4a889658548e321b43 \
    --hash=sha256:a1526d265743fb49363974b7aa8d5899ff64ee07df47dd8d3e37dcc0818f09ed \
    --hash=sha256:a56de34db7b7ff77056a37aedded01b2b98b508227d2d0979d373a9b5d353daa \
    --hash=sha256:a7c97726520f784239f6c62506bc70e48d01ae71e9da128259d61ca5e9788516 \
    --hash=sha256:b8e99f06160602bc64da35158bb76c73522a4010f0649be44a4e167ff8555952 \
    --hash=sha256:bb1de682da0b824411e00a0d4da5a784ec6496b6850fdf8c865c1d68c0e318dd \
    --hash=sha256:bf477c355274a72435ceb140dc42de0dc1e1e0bf6e97195be30487d8eaaf1a09 \
    --hash=sha256:bf635a52fc1ea401baf88843ae8708591aa4adff875e5c23220de43b1ccf575c \
    --hash=sha256:bfd5db349d15c08311702611f3dccbef4b4e2ec148fcc636cf8739519b4a5c0f \
    --hash=sha256:c530833afc4707fe48524a44844493f36d8727f04dcce91fb978c414a8556cc6 \
    --hash=sha256:cc6d65b21c219ec2072c1293c505cf36e4e913a3f936d80028993dd73c7906b1 \
    --hash=sha256:cd3c1e4cb2ff0083758f09be0f77402e1bdf704adb7f89108007300a6da587d0 \
    --hash=sha256:cfd2a8b6b0d8e66e944d47cdec2f47c48fef2ba2f2dff5a9a75757f64172857e \
    --hash=sha256:d0ca5c71a5a1765a0f8f88022c52b6b8be740e512980362f7fdbb03725a0d6b9 \
    --hash=sha256:e7defbb9737274023e2d7af02cac77043c86ce88a907c58f42b580a97d5bcca9 \
    --hash=sha256:e9d1bf53c4c8de58d22e0e956a79a5b37f754ed1ffdbf1a260d9dcfa2d8a325e \
    --hash=sha256:ea81d8f9691bb53f4fb4db603203029643caffc82bf998ab5b59ca05560f4c06
    # via
    #   coverage
    #   pytest-cov
dill==0.3.7 \
    --hash=sha256:76b122c08ef4ce2eedcd4d1abd8e641114bfc6c2867f49f3c41facf65bf19f5e \
    --hash=sha256:cc1c8b182eb3013e24bd475ff2e9295af86c1a38eb1aff128dac8962a9ce3c03
    # via pylint
distlib==0.3.8 \
    --hash=sha256:034db59a0b96f8ca18035f36290806a9a6e6bd9d1ff91e45a7f172eb17e51784 \
    --hash=sha256:1530ea13e350031b6312d8580ddb6b27a104275a31106523b8f123787f494f64
    # via virtualenv
exceptiongroup==1.2.0 \
    --hash=sha256:4bfd3996ac73b41e9b9628b04e079f193850720ea5945fc96a08633c66912f14 \
    --hash=sha256:91f5c769735f051a4290d52edd0858999b57e5876e9f85937691bd4c9fa3ed68
    # via
    #   -c req/base.txt
    #   i3-workspace-groups (pyproject.toml)
fastjsonschema==2.19.1 \
    --hash=sha256:3672b47bc94178c9f23dbb654bf47440155d4db9df5f7bc47643315f9c405cd0 \
    --hash=sha256:e3126a94bdc4623d3de4485f8d468a12f02a67921315ddc87836d6e456dc789d
    # via validate-pyproject
filelock==3.13.1 \
    --hash=sha256:521f5f56c50f8426f5e03ad3b281b490a87ef15bc6c526f168290f0c7148d44e \
    --hash=sha256:57dbda9b35157b05fb3e58ee91448612eb674172fab98ee235ccb0b5bee19a1c
    # via
    #   tox
    #   virtualenv
i3ipc==2.2.1 \
    --hash=sha256:c0b898223d50d42c90c818deb5033d1304c582755547dee7d15df3e3781bc690 \
    --hash=sha256:e880d7d7147959ead5cb34764f08b97b41385b36eb8256e8af1ce163dbcccce8
    # via
    #   -c req/base.txt
    #   i3-workspace-groups (pyproject.toml)
importlib-metadata==7.0.1 \
    --hash=sha256:4805911c3a4ec7c3966410053e9ec6a1fecd629117df5adee56dfc9432a1081e \
    --hash=sha256:f238736bb06590ae52ac1fab06a3a9ef1d8dce2b7a35b5ab329371d6c8f5d2cc
    # via yapf
iniconfig==2.0.0 \
    --hash=sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3 \
    --hash=sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374
    # via pytest
isort==5.13.2 \
    --hash=sha256:48fdfcb9face5d58a4f6dde2e72a1fb8dcaf8ab26f95ab49fab84c2ddefb0109 \
    --hash=sha256:8ca5e72a8d85860d5a3fa69b8745237f2939afe12dbf656afbcb47fe72d947a6
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   pylint
mccabe==0.7.0 \
    --hash=sha256:348e0240c33b60bbdf4e523192ef919f28cb2c3d7d5c7794f74009290f236325 \
    --hash=sha256:6c2d30ab6be0e4a46919781807b4f0d834ebdd6c6e3dca0bda5a15f863427b6e
    # via pylint
nodeenv==1.8.0 \
    --hash=sha256:d51e0c37e64fbf47d017feac3145cdbb58836d7eee8c6f6d3b6880c5456227d2 \
    --hash=sha256:df865724bb3c3adc86b3876fa209771517b0cfe596beff01a92700e0e8be4cec
    # via pyright
packaging==23.2 \
    --hash=sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5 \
    --hash=sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7
    # via
    #   build
    #   pytest
    #   setuptools-scm
    #   tox
pip-tools==7.3.0 \
    --hash=sha256:8717693288720a8c6ebd07149c93ab0be1fced0b5191df9e9decd3263e20d85e \
    --hash=sha256:8e9c99127fe024c025b46a0b2d15c7bd47f18f33226cf7330d35493663fc1d1d
    # via i3-workspace-groups (pyproject.toml)
platformdirs==4.1.0 \
    --hash=sha256:11c8f37bcca40db96d8144522d925583bdb7a31f7b0e37e3ed4318400a8e2380 \
    --hash=sha256:906d548203468492d432bcb294d4bc2fff751bf84971fbb2c10918cc206ee420
    # via
    #   pylint
    #   virtualenv
    #   yapf
pluggy==1.3.0 \
    --hash=sha256:cf61ae8f126ac6f7c451172cf30e3e43d3ca77615509771b3a984a0730651e12 \
    --hash=sha256:d89c696a773f8bd377d18e5ecda92b7a3793cbe66c87060a6fb58c7b6e1061f7
    # via
    #   pytest
    #   tox
py==1.11.0 \
    --hash=sha256:51c75c4126074b472f746a24399ad32f6053d1b34b68d2fa41e558e6f4a98719 \
    --hash=sha256:607c53218732647dff4acdfcd50cb62615cedf612e72d1724fb1a0cc6405b378
    # via tox
pylint==3.0.3 \
    --hash=sha256:58c2398b0301e049609a8429789ec6edf3aabe9b6c5fec916acd18639c16de8b \
    --hash=sha256:7a1585285aefc5165db81083c3e06363a27448f6b467b3b0f30dbd0ac1f73810
    # via i3-workspace-groups (pyproject.toml)
pyproject-hooks==1.0.0 \
    --hash=sha256:283c11acd6b928d2f6a7c73fa0d01cb2bdc5f07c57a2eeb6e83d5e56b97976f8 \
    --hash=sha256:f271b298b97f5955d53fb12b72c1fb1948c22c1a6b70b315c54cedaca0264ef5
    # via build
pyright==1.1.348 \
    --hash=sha256:1c6994546f7ab130b9da8c357f8b2a99bef268b6d8ae2eae292bde66923aa7af \
    --hash=sha256:e7d4df504c4c082b5c3725a8c15fc3fda62da5d09fc77994baa77f359a1b62f2
    # via i3-workspace-groups (pyproject.toml)
pytest==7.4.4 \
    --hash=sha256:2cf0005922c6ace4a3e2ec8b4080eb0d9753fdc93107415332f50ce9e7994280 \
    --hash=sha256:b090cdf5ed60bf4c45261be03239c2c1c22df034fbffe691abe93cd80cea01d8
    # via
    #   i3-workspace-groups (pyproject.toml)
    #   pytest-cov
pytest-cov==4.1.0 \
    --hash=sha256:3904b13dfbfec47f003b8e77fd5b589cd11904a21ddf1ab38a64f204d6a10ef6 \
    --hash=sha256:6ba70b9e97e69fcc3fb45bfeab2d0a138fb65c4d0d6a41ef33983ad114be8c3a
    # via i3-workspace-groups (pyproject.toml)
python-xlib==0.33 \
    --hash=sha256:55af7906a2c75ce6cb280a584776080602444f75815a7aff4d287bb2d7018b32 \
    --hash=sha256:c3534038d42e0df2f1392a1b30a15a4ff5fdc2b86cfa94f072bf11b10a164398
    # via
    #   -c req/base.txt
    #   i3ipc
ruff==0.1.14 \
    --hash=sha256:1c8eca1a47b4150dc0fbec7fe68fc91c695aed798532a18dbb1424e61e9b721f \
    --hash=sha256:2270504d629a0b064247983cbc495bed277f372fb9eaba41e5cf51f7ba705a6a \
    --hash=sha256:269302b31ade4cde6cf6f9dd58ea593773a37ed3f7b97e793c8594b262466b67 \
    --hash=sha256:62ce2ae46303ee896fc6811f63d6dabf8d9c389da0f3e3f2bce8bc7f15ef5488 \
    --hash=sha256:653230dd00aaf449eb5ff25d10a6e03bc3006813e2cb99799e568f55482e5cae \
    --hash=sha256:6b3dadc9522d0eccc060699a9816e8127b27addbb4697fc0c08611e4e6aeb8b5 \
    --hash=sha256:7060156ecc572b8f984fd20fd8b0fcb692dd5d837b7606e968334ab7ff0090ab \
    --hash=sha256:722bafc299145575a63bbd6b5069cb643eaa62546a5b6398f82b3e4403329cab \
    --hash=sha256:80258bb3b8909b1700610dfabef7876423eed1bc930fe177c71c414921898efa \
    --hash=sha256:87b3acc6c4e6928459ba9eb7459dd4f0c4bf266a053c863d72a44c33246bfdbf \
    --hash=sha256:96f76536df9b26622755c12ed8680f159817be2f725c17ed9305b472a757cdbb \
    --hash=sha256:a53d8e35313d7b67eb3db15a66c08434809107659226a90dcd7acb2afa55faea \
    --hash=sha256:ab3f71f64498c7241123bb5a768544cf42821d2a537f894b22457a543d3ca7a9 \
    --hash=sha256:ad3f8088b2dfd884820289a06ab718cde7d38b94972212cc4ba90d5fbc9955f3 \
    --hash=sha256:b2027dde79d217b211d725fc833e8965dc90a16d0d3213f1298f97465956661b \
    --hash=sha256:bea9be712b8f5b4ebed40e1949379cfb2a7d907f42921cf9ab3aae07e6fba9eb \
    --hash=sha256:e3d241aa61f92b0805a7082bd89a9990826448e4d0398f0e2bc8f05c75c63d99
    # via i3-workspace-groups (pyproject.toml)
setuptools-scm==8.0.4 \
    --hash=sha256:b47844cd2a84b83b3187a5782c71128c28b4c94cad8bfb871da2784a5cb54c4f \
    --hash=sha256:b5f43ff6800669595193fd09891564ee9d1d7dcb196cab4b2506d53a2e1c95c7
    # via i3-workspace-groups (pyproject.toml)
six==1.16.0 \
    --hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \
    --hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254
    # via
    #   -c req/base.txt
    #   python-xlib
    #   tox
toml==0.10.2 \
    --hash=sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b \
    --hash=sha256:b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f
    # via
    #   -c req/base.txt
    #   i3-workspace-groups (pyproject.toml)
tomli==2.0.1 \
    --hash=sha256:939de3e7a6161af0c887ef91b7d41a53e7c5a1ca976325f429cb46ea9bc30ecc \
    --hash=sha256:de526c12914f0c550d15924c62d72abc48d6fe7364aa87328337a31007fe8a4f
    # via yapf
tomlkit==0.12.3 \
    --hash=sha256:75baf5012d06501f07bee5bf8e801b9f343e7aac5a92581f20f80ce632e6b5a4 \
    --hash=sha256:b0a645a9156dc7cb5d3a1f0d4bab66db287fcb8e0430bdd4664a095ea16414ba
    # via pylint
tox==3.28.0 \
    --hash=sha256:57b5ab7e8bb3074edc3c0c0b4b192a4f3799d3723b2c5b76f1fa9f2d40316eea \
    --hash=sha256:d0d28f3fe6d6d7195c27f8b054c3e99d5451952b54abdae673b71609a581f640
    # via i3-workspace-groups (pyproject.toml)
typing-extensions==4.9.0 \
    --hash=sha256:23478f88c37f27d76ac8aee6c905017a143b0b1b886c3c9f66bc2fd94f9f5783 \
    --hash=sha256:af72aea155e91adfc61c3ae9e0e342dbc0cba726d6cba4b6c72c1f34e47291cd
    # via
    #   -c req/base.txt
    #   i3-workspace-groups (pyproject.toml)
    #   setuptools-scm
validate-pyproject==0.15 \
    --hash=sha256:573a5e4858f0bf0cd0f429142cbadbaa83595ce6e3cac322a2a7c3866f4a1458 \
    --hash=sha256:fc82b61f887739a4092de612466a5ab28ec47c407b19c6caef8d54c88c1d10c0
    # via i3-workspace-groups (pyproject.toml)
virtualenv==20.25.0 \
    --hash=sha256:4238949c5ffe6876362d9c0180fc6c3a824a7b12b80604eeb8085f2ed7460de3 \
    --hash=sha256:bf51c0d9c7dd63ea8e44086fa1e4fb1093a31e963b86959257378aef020e1f1b
    # via tox
wheel==0.42.0 \
    --hash=sha256:177f9c9b0d45c47873b619f5b650346d632cdc35fb5e4d25058e09c9e581433d \
    --hash=sha256:c45be39f7882c9d34243236f2d63cbd58039e360f85d0913425fbd7ceea617a8
    # via pip-tools
yapf==0.40.2 \
    --hash=sha256:4dab8a5ed7134e26d57c1647c7483afb3f136878b579062b786c9ba16b94637b \
    --hash=sha256:adc8b5dd02c0143108878c499284205adb258aad6db6634e5b869e7ee2bd548b
    # via i3-workspace-groups (pyproject.toml)
zipp==3.17.0 \
    --hash=sha256:0e923e726174922dce09c53c59ad483ff7bbb8e572e00c7f7c46b88556409f31 \
    --hash=sha256:84e64a1c28cf7e91ed2078bb8cc8c259cb19b76942096c8d7b84947690cabaf0
    # via importlib-metadata

# The following packages are considered to be unsafe in a requirements file:
pip==23.3.2 \
    --hash=sha256:5052d7889c1f9d05224cd41741acb7c5d6fa735ab34e339624a614eaaa7e7d76 \
    --hash=sha256:7fd9972f96db22c8077a1ee2691b172c8089b17a5652a44494a9ecb0d78f9149
    # via pip-tools
setuptools==69.0.3 \
    --hash=sha256:385eb4edd9c9d5c17540511303e39a147ce2fc04bc55289c322b9e5904fe2c05 \
    --hash=sha256:be1af57fc409f93647f2e8e4573a142ed38724b8cdd389706a867bb4efcf1e78
    # via
    #   nodeenv
    #   pip-tools
    #   setuptools-scm



================================================
FILE: tests/__init__.py
================================================
[Empty file]


================================================
FILE: tests/test_config.py
================================================
import pytest

from i3wsgroups import config


# yapf: disable
@pytest.mark.parametrize('merge_from,merge_into,result', [
    ({}, {}, {}),
    ({'a': 0}, {}, {'a': 0}),
    ({'a': 0}, {'a': 1}, {'a': 1}),
    ({'a': []}, {}, {}),
    ({'a': 0}, {'b': 0}, {'a': 0, 'b': 0}),
    ({'a': {'aa': 0, 'ab': 0}}, {}, {'a': {'aa': 0, 'ab': 0}}),
])
# yapf: enable
def test_merge(merge_from, merge_into, result):
    config.merge_config(merge_from, merge_into)
    assert merge_into == result



================================================
FILE: tests/test_py_sockets.py
================================================
#!/usr/bin/env python3

# This is a simple implementation of an i3-workspace-groups client in pure
# python with no external dependencies. This is slower than
# ./i3-workspace-groups-client which uses external tools under the hood (socat,
# nc, etc.), so it's not used except for benchmarking.

# pylint: disable=invalid-name

from __future__ import annotations

import os
import socket
import sys


def main():
    socket_path = os.environ.get(
        'I3_WORKSPACE_GROUPS_SOCKET',
        os.path.expandvars('${XDG_RUNTIME_DIR}/i3-workspace-groups-' +
                           os.environ['DISPLAY'].replace(':', '')))
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(socket_path)
    sock.sendall('\n'.join(sys.argv[1:]).encode('utf-8'))
    output = sock.recv(100000).decode('utf-8')
    print(output)
    if output.startswith('error:'):
        sys.exit(1)


if __name__ == '__main__':
    main()



================================================
FILE: tests/test_util.py
================================================
from __future__ import annotations

import unittest.mock

import i3ipc

from i3wsgroups import workspace_names


def create_workspace(workspace_id: int,
                     ws_metadata: workspace_names.WorkspaceGroupingMetadata) -> i3ipc.Con:
    workspace = unittest.mock.create_autospec(i3ipc.Con)
    workspace.id = workspace_id
    if ws_metadata.group is None:
        ws_metadata.group = ''
    workspace.name = workspace_names.create_name(ws_metadata)
    return workspace



================================================
FILE: tests/test_workspace_names.py
================================================
from __future__ import annotations

from i3wsgroups.workspace_names import compute_global_number
from i3wsgroups.workspace_names import compute_local_numbers
from i3wsgroups.workspace_names import get_group_index
from i3wsgroups.workspace_names import global_number_to_group_index
from i3wsgroups.workspace_names import global_number_to_local_number
from i3wsgroups.workspace_names import WorkspaceGroupingMetadata
from tests import test_util


def test_compute_global_number():
    assert compute_global_number(0, 0, 1) == 1
    assert compute_global_number(0, 1, 1) == 101
    assert compute_global_number(1, 1, 1) == 100101


def test_global_number_to_group_index():
    assert global_number_to_group_index(1) == 0
    assert global_number_to_group_index(2) == 0
    assert global_number_to_group_index(101) == 1
    assert global_number_to_group_index(102) == 1


def test_global_number_to_local_number():
    assert global_number_to_local_number(1) == 1
    assert global_number_to_local_number(2) == 2
    assert global_number_to_local_number(101) == 1
    assert global_number_to_local_number(10205) == 5


def test_compute_local_numbers1():
    monitor_workspaces = [
        test_util.create_workspace(1, WorkspaceGroupingMetadata(global_number=1, local_number=1))
    ]
    local_numbers = compute_local_numbers(monitor_workspaces, monitor_workspaces, False)
    assert local_numbers == [1]


def test_compute_local_numbers2():
    monitor_workspaces = [
        test_util.create_workspace(2, WorkspaceGroupingMetadata(global_number=1, local_number=2))
    ]
    local_numbers = compute_local_numbers(monitor_workspaces, monitor_workspaces, True)
    assert local_numbers == [1]


def test_compute_local_numbers3():
    monitor_workspaces = [
        test_util.create_workspace(1, WorkspaceGroupingMetadata(global_number=1, local_number=1)),
        test_util.create_workspace(2, WorkspaceGroupingMetadata(global_number=2, local_number=2))
    ]
    all_workspaces = monitor_workspaces + [
        test_util.create_workspace(3, WorkspaceGroupingMetadata(global_number=3, local_number=1))
    ]
    local_numbers = compute_local_numbers(monitor_workspaces, all_workspaces, True)
    assert local_numbers == [2, 3]


def test_compute_local_numbers4():
    monitor_workspaces = [
        test_util.create_workspace(1, WorkspaceGroupingMetadata(global_number=1, local_number=1)),
        test_util.create_workspace(2, WorkspaceGroupingMetadata(global_number=2, local_number=2))
    ]
    all_workspaces = monitor_workspaces + [
        test_util.create_workspace(3, WorkspaceGroupingMetadata(global_number=3, local_number=2))
    ]
    local_numbers = compute_local_numbers(monitor_workspaces, all_workspaces, False)
    assert local_numbers == [1, 3]


def test_compute_group_index_empty():
    assert get_group_index('', {}) == 0


def test_compute_group_index_simple():
    group_to_workspaces = {
        'a': [
            test_util.create_workspace(1, WorkspaceGroupingMetadata(global_number=1,
                                                                    local_number=1)),
        ],
    }
    assert get_group_index('a', group_to_workspaces) == 0
    assert get_group_index('', group_to_workspaces) == 1
    assert get_group_index('test', group_to_workspaces) == 1


def test_compute_group_index_gaps():
    group_to_workspaces = {
        'a': [
            test_util.create_workspace(1, WorkspaceGroupingMetadata(global_number=1,
                                                                    local_number=1)),
        ],
        'b': [
            test_util.create_workspace(2,
                                       WorkspaceGroupingMetadata(global_number=201,
                                                                 local_number=1)),
        ],
    }
    assert get_group_index('a', group_to_workspaces) == 0
    assert get_group_index('b', group_to_workspaces) == 2
    assert get_group_index('', group_to_workspaces) == 3
    assert get_group_index('test', group_to_workspaces) == 3



================================================
FILE: tools/lint
================================================
#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

_print_bold() {
  local bold normal
  bold="$(tput bold 2> /dev/null)" || true
  normal="$(tput sgr0 2> /dev/null)" || true
  printf '%s' "${bold}"
  printf '%s' "${@}"
  printf '%s\n' "${normal}"
}

main() {
  cd -- "${DIR}/.."
  local s=0
  _print_bold 'Running ruff...'
  ruff check . || s=$?
  _print_bold 'Running yapf...'
  yapf -d -r -p . || s=$?
  _print_bold 'Running isort...'
  isort --check --diff . || s=$?
  _print_bold 'Running pylint...'
  pylint -j 8 --recursive=y . || s=$?
  _print_bold 'Running pyright...'
  pyright || s=$?
  return "${s}"
}

main "$@"



================================================
FILE: tools/pipc
================================================
#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

_pip_compile() {
  pip-compile -q --strip-extras --generate-hashes --allow-unsafe pyproject.toml "$@"
}

main() {
  cd -- "${DIR}/.."
  echo 'Compiling base deps...'
  _pip_compile -o req/base.txt "$@"
  echo 'Compiling dev deps...'
  _pip_compile --extra dev -c req/base.txt -o req/dev.txt "$@"
  echo 'Compiling dev-extra deps...'
  _pip_compile --extra dev_extra -c req/base.txt -c req/dev.txt -o req/dev-extra.txt "$@"
  echo 'Syncing deps...'
  pip-sync req/*.txt
}

main "$@"



================================================
FILE: tools/release_to_pypi.sh
================================================
#!/usr/bin/env bash

# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -o errexit -o errtrace -o nounset -o pipefail

DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
cd "${DIR}/.."
[[ -d dist ]] && rm -rf dist
python -m build
twine upload --verbose dist/*



================================================
FILE: .github/workflows/python-publish.yml
================================================
# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ['3.8.17', '3.9.17', '3.10.12', '3.11.4']
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*


