Directory structure:
└── jonnyhaystack-i3-resurrect/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── Pipfile
    ├── requirements.txt
    ├── setup.py
    ├── tox.ini
    ├── .envrc
    ├── .travis.yml
    ├── contrib/
    │   └── scripts/
    │       └── i3-resurrect-dmenu
    ├── i3_resurrect/
    │   ├── __init__.py
    │   ├── config.py
    │   ├── layout.py
    │   ├── main.py
    │   ├── programs.py
    │   ├── treeutils.py
    │   └── util.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_layout.py
    │   ├── test_programs.py
    │   └── test_treeutils.py
    └── .github/
        ├── FUNDING.yml
        └── ISSUE_TEMPLATE/
            ├── bug_report.md
            └── feature_request.md

================================================
FILE: README.md
================================================
# i3-resurrect

A simple but flexible solution to saving and restoring i3 workspaces

[![Build Status](https://travis-ci.org/JonnyHaystack/i3-resurrect.svg?branch=master)](https://travis-ci.org/JonnyHaystack/i3-resurrect)
[![Coverage Status](https://coveralls.io/repos/github/JonnyHaystack/i3-resurrect/badge.svg)](https://coveralls.io/github/JonnyHaystack/i3-resurrect)
[![GitHub issues](https://img.shields.io/github/issues/JonnyHaystack/i3-resurrect)](https://github.com/JonnyHaystack/i3-resurrect/issues)
![GitHub pull requests](https://img.shields.io/github/issues-pr/JonnyHaystack/i3-resurrect)
![PyPI - Version](https://img.shields.io/pypi/v/i3-resurrect)

## Table of Contents

* [Introduction](#introduction)
* [Background](#background)
* [Getting Started](#getting-started)
   * [Requirements](#requirements)
   * [Installation](#installation)
* [Usage](#usage)
   * [Command line](#command-line)
   * [Scratchpad](#scratchpad)
   * [Example configuration in i3](#example-configuration-in-i3)
   * [rofi/dmenu](#rofidmenu)
* [Configuration](#configuration)
   * [Window command mappings](#window-command-mappings)
   * [Terminals](#terminals)
   * [Per window swallow criteria](#per-window-swallow-criteria)
   * [Default directory](#default-directory)
* [Troubleshooting](#troubleshooting)
* [Contributing](#contributing)
* [Contributors](#contributors)
* [License](#license)

## Introduction

i3-resurrect is a program which can save and restore the layout and running
programs in your i3 workspaces.

Layouts are saved by using i3ipc to take necessary information from the
workspace tree and write it to a JSON file.

Programs are saved by looking up each process in the workspace and writing their
`cmdline` (the command used to launch the program) and `cwd` (current working
directory) to a JSON file.

When restoring programs, Python's subprocess module is used to launch the saved
programs with the correct working directory.

When restoring layouts, i3's built-in ability layout restoring functionality is
used. This creates placeholder windows where each one will "swallow" any new
window that matches specified criteria (window class, instance, title etc).

xdotool is used to make i3 see existing windows as new windows.
This is necessary on older i3 versions for matching by window title because the
title must match when the window first appears and programs usually only update
the title after the window is created.
This is fixed on newer i3 versions, but it is also necessary to do this to apply
a layout to existing windows if they are created before the placeholder windows.

## Background

This project originated as a mixture of hacked together Python and bash scripts
that I wrote in order to be able to quickly save and load workspaces on the fly.

I hate having to reboot my computer because it disrupts everything I have open
(which tends to be a lot).

To cope with this problem, I try to make it as easy as possible for myself to
get everything back to its pre-reboot state.

I quickly found out about the `i3-save-tree` utility and i3's `append-layout`
command, but these weren't much use to me on their own, as you are expected to
customise a layout manually after saving it and relaunch all your programs
manually when you restore the layout.

My solution was to create a script that would extract just the bits from
i3-save-tree that are needed, and use
[i3ipc](https://github.com/acrisci/i3ipc-python),
[xprop](https://gitlab.freedesktop.org/xorg/app/xprop), and
[psutil](https://github.com/giampaolo/psutil) to obtain the
commands necessary to launch the programs in a saved workspace.

Since I decided to release this publicly, I have improved the standard of the
code a great deal and gotten rid of the hacky bash parts.
The code is all Python now, and i3-save-tree is no longer needed as I have
reimplemented it in Python.

## Getting Started

### Requirements

- Python 3.6+
- i3
- xprop
- xdotool

### Installation

#### Arch Linux

Install from the AUR using yay.

Latest release:
```
yay -S i3-resurrect
```

Latest development version:
```
yay -S i3-resurrect-git
```

#### Gentoo

You can emerge [x11-misc/i3-resurrect](https://github.com/gentoo/guru/tree/master/x11-misc/i3-resurrect) from Guru overlay.

#### From PyPI (recommended for everyone else)

```
pip3 install --user --upgrade i3-resurrect
```

Make sure `~/.local/bin` is in your PATH environment variable.

#### Manual

Obtain source code
```
git clone git@github.com:JonnyHaystack/i3-resurrect.git
```

Install locally using pip
```
cd i3-resurrect
pip3 install --user .
```

## Usage

### Command line

Full command line documentation:
```
Usage: i3-resurrect save [OPTIONS]

  Save an i3 workspace's layout and running programs to a file.

Options:
  -w, --workspace TEXT       The workspace to save.
                             [default: current workspace]
  -n, --numeric              Select workspace by number instead of name.
  -d, --directory DIRECTORY  The directory to save the workspace to.
                             [default: ~/.i3/i3-resurrect]
  -p, --profile TEXT         The profile to save the workspace to.
  -s, --swallow TEXT         The swallow criteria to use.
                             [options: class,instance,title,window_role]
                             [default: class,instance]
  --layout-only              Only save layout.
  --programs-only            Only save running programs.


Usage: i3-resurrect restore [OPTIONS]

  Restore i3 workspace layout and programs.

Options:
  -w, --workspace TEXT       The workspace to restore.
                             [default: current workspace]
  -n, --numeric              Select workspace by number instead of name.
  -d, --directory DIRECTORY  The directory to restore the workspace from.
                             [default: ~/.i3/i3-resurrect]
  -p, --profile TEXT         The profile to restore the workspace from.
  --layout-only              Only restore layout.
  --programs-only            Only restore running programs.


Usage: i3-resurrect ls [OPTIONS] [[workspaces|profiles]]

  List saved workspaces or profiles.

Options:
  -d, --directory DIRECTORY  The directory to search in.
                             [default: ~/.i3/i3-resurrect]


Usage: i3-resurrect rm [OPTIONS]

  Remove saved layout or programs.

Options:
  -w, --workspace TEXT       The saved workspace to delete.
  -d, --directory DIRECTORY  The directory to delete from.
                             [default: ~/.i3/i3-resurrect]
  -p, --profile TEXT         The profile to delete.
  --layout-only              Only delete saved layout.
  --programs-only            Only delete saved programs.
```

Basic usage, matching only window class/instance:
```
# Save workspace '1'
i3-resurrect save -w 1

# Restore workspace '1'
i3-resurrect restore -w 1
```

More accurate layout restoring by matching title:
```
# Save workspace '1'
i3-resurrect save -w 1 --swallow=class,instance,title

# Restore workspace '1' programs
i3-resurrect restore -w 1 --programs-only

# Apply workspace '1' layout
i3-resurrect restore -w 1 --layout-only
```
When matching windows by title, the programs must be restored before the layout,
because the title often won't match when the window first appears.

When restoring a layout, i3-resurrect uses xdotool to unmap and remap every
window on the workspace which causes i3 to see them as new windows so they will
be swallowed by the placeholder windows.

### Scratchpad

The scratchpad can be saved and restored like so:
```
i3-resurrect save -w __i3_scratch
i3-resurrect restore -w __i3_scratch
```

### Example configuration in i3

A very basic setup without window title matching:
```
set $i3_resurrect i3-resurrect

# Save workspace mode.
mode "save" {
  bindsym 1 exec $i3_resurrect save -w 1
  bindsym 2 exec $i3_resurrect save -w 2
  bindsym 3 exec $i3_resurrect save -w 3
  bindsym 4 exec $i3_resurrect save -w 4
  bindsym 5 exec $i3_resurrect save -w 5
  bindsym 6 exec $i3_resurrect save -w 6
  bindsym 7 exec $i3_resurrect save -w 7
  bindsym 8 exec $i3_resurrect save -w 8
  bindsym 9 exec $i3_resurrect save -w 9
  bindsym 0 exec $i3_resurrect save -w 0

  # Back to normal: Enter, Escape, or s
  bindsym Return mode "default"
  bindsym Escape mode "default"
  bindsym s mode "default"
  bindsym $mod+s mode "default"
}

bindsym $mod+s mode "save"

# Restore workspace mode.
mode "restore" {
  bindsym 1 exec $i3_resurrect restore -w 1
  bindsym 2 exec $i3_resurrect restore -w 2
  bindsym 3 exec $i3_resurrect restore -w 3
  bindsym 4 exec $i3_resurrect restore -w 4
  bindsym 5 exec $i3_resurrect restore -w 5
  bindsym 6 exec $i3_resurrect restore -w 6
  bindsym 7 exec $i3_resurrect restore -w 7
  bindsym 8 exec $i3_resurrect restore -w 8
  bindsym 9 exec $i3_resurrect restore -w 9
  bindsym 0 exec $i3_resurrect restore -w 0

  # Back to normal: Enter, Escape, or n
  bindsym Return mode "default"
  bindsym Escape mode "default"
  bindsym n mode "default"
  bindsym $mod+n mode "default"
}

bindsym $mod+n mode "restore"
```

A more advanced setup where windows are matched by title:
```
set $i3_resurrect i3-resurrect

# Save workspace mode.
mode "save" {
  bindsym 1 exec "$i3_resurrect save -w 1 --swallow=class,instance,title"
  bindsym 2 exec "$i3_resurrect save -w 2 --swallow=class,instance,title"
  bindsym 3 exec "$i3_resurrect save -w 3 --swallow=class,instance,title"
  bindsym 4 exec "$i3_resurrect save -w 4 --swallow=class,instance,title"
  bindsym 5 exec "$i3_resurrect save -w 5 --swallow=class,instance,title"
  bindsym 6 exec "$i3_resurrect save -w 6 --swallow=class,instance,title"
  bindsym 7 exec "$i3_resurrect save -w 7 --swallow=class,instance,title"
  bindsym 8 exec "$i3_resurrect save -w 8 --swallow=class,instance,title"
  bindsym 9 exec "$i3_resurrect save -w 9 --swallow=class,instance,title"
  bindsym 0 exec "$i3_resurrect save -w 10 --swallow=class,instance,title"

  # Back to normal: Enter, Escape, or s
  bindsym Return mode "default"
  bindsym Escape mode "default"
  bindsym s mode "default"
  bindsym $mod+s mode "default"
}

bindsym $mod+s mode "save"

# Restore workspace mode.
mode "restore" {
  bindsym 1 exec "$i3_resurrect restore -w 1 --programs-only"
  bindsym 2 exec "$i3_resurrect restore -w 2 --programs-only"
  bindsym 3 exec "$i3_resurrect restore -w 3 --programs-only"
  bindsym 4 exec "$i3_resurrect restore -w 4 --programs-only"
  bindsym 5 exec "$i3_resurrect restore -w 5 --programs-only"
  bindsym 6 exec "$i3_resurrect restore -w 6 --programs-only"
  bindsym 7 exec "$i3_resurrect restore -w 7 --programs-only"
  bindsym 8 exec "$i3_resurrect restore -w 8 --programs-only"
  bindsym 9 exec "$i3_resurrect restore -w 9 --programs-only"
  bindsym 0 exec "$i3_resurrect restore -w 10 --programs-only"

  bindsym $mod+1 exec "$i3_resurrect restore -w 1 --layout-only"
  bindsym $mod+2 exec "$i3_resurrect restore -w 2 --layout-only"
  bindsym $mod+3 exec "$i3_resurrect restore -w 3 --layout-only"
  bindsym $mod+4 exec "$i3_resurrect restore -w 4 --layout-only"
  bindsym $mod+5 exec "$i3_resurrect restore -w 5 --layout-only"
  bindsym $mod+6 exec "$i3_resurrect restore -w 6 --layout-only"
  bindsym $mod+7 exec "$i3_resurrect restore -w 7 --layout-only"
  bindsym $mod+8 exec "$i3_resurrect restore -w 8 --layout-only"
  bindsym $mod+9 exec "$i3_resurrect restore -w 9 --layout-only"
  bindsym $mod+0 exec "$i3_resurrect restore -w 10 --layout-only"

  # Back to normal: Enter, Escape, or n
  bindsym Return mode "default"
  bindsym Escape mode "default"
  bindsym n mode "default"
  bindsym $mod+n mode "default"
}

bindsym $mod+n mode "restore"
```

Example of usage with the second configuration:

[![Example of usage with the second configuration](https://i.imgur.com/mi9Uml8.gif)](https://gfycat.com/selfreliantdarkkoodoo)

### rofi/dmenu

There is a sample rofi/dmenu script available
[here](contrib/scripts/i3-resurrect-dmenu) for convenience.
This can be given a keybinding and allows easy saving, restoring, and deletion
of workspaces and profiles.

## Configuration

The config file should be located at `~/.config/i3-resurrect/config.json`.
A default config file will be created when you first run i3-resurrect.

### Window command mappings

In the case of a window where the process `cmdline` is not the same as the
command you must run to launch that program, you can add an explicit window
command mapping in the config file.

For example, gnome-terminal's process is gnome-terminal-server, but we need to
launch it with the command `gnome-terminal`. To get this working, you would put
the following in your config file:

```
{
  ...
  "window_command_mappings": [
    {
      "class": "Gnome-terminal",
      "command": "gnome-terminal"
    }
  ]
  ...
}
```

Another example use case is where:
- You have multiple windows for a single instance of an application
- When restoring, you only want one instance of the program to be launched for
each instance of the application's main window

In this scenario, you could create one rule that by default maps the
application's window class to have no command, and another that sets the command
if it also matches a certain title:

```
{
  ...
  "window_command_mappings": [
    ...
    {
      "class": "Some-program"
    },
    {
      "class": "Some-program",
      "title": "Main window's title",
      "command": ["some-program", "arg1", "arg2"]
    }
    ...
  ]
  ...
}
```

Hint:
If you need to find out a window's class/instance, type `xprop | grep WM_CLASS`
in a terminal and then click on the desired window.

#### Argument interpolation

You can also interpolate arguments from the actual process's cmdline into a
custom command mapping using Python format specifiers. This is useful when you
want to keep parts of the original command. Example:

Command mapping:
```
{
  ...
  "window_command_mappings": [
    ...
    {
      "class": "Code",
      "command": "code -n {1}"
    }
    ...
  ]
  ...
}
```

Actual cmdline: `['code', '/path/to/file.txt']`

Resulting command that gets saved: `code -n /path/to/file.txt`

### Terminals

For terminal emulator windows, we must get the working directory from the
first subprocess (usually this will be your shell) instead of the window's root
process (the terminal emulator).

i3-resurrect deals with this by allowing you to specify a list of terminal
emulator window classes in your config file.

For example, if you use both Alacritty and gnome-terminal and you want their
working directories to be restored correctly, you would put the following in
your config file:

```
{
  ...
  "terminals": [
    "Gnome-terminal",
    "Alacritty"
  ]
  ...
}
```

Some examples are included in the default config. If you would like me to add
more command mappings or terminals to the default config, please open an issue
for it.

### Per window swallow criteria

It is also possible to configure swallow criteria on a per window basis, which
will override the criteria set by the `--swallow` command line parameter.

Example use case:
- I usually want to include the window title in the swallow criteria to more
accurately restore layouts
- Among other programs that I use, Ario (an mpd client) always has the currently
playing song in the window title
- This makes matching the layout by window title inconvenient, so I want to have
Ario always be matched by only the window class/instance

This can be achieved by putting the following in your config file:

```
{
  ...
  "window_swallow_criteria": {
    "Ario": ["class", "instance"]
  }
  ...
}
```

### Default directory

The default directory used for the saving and loading of workspaces can also be
set in the config file:

```
{
  ...
  "directory": "~/.i3-resurrect/"
  ...
}
```

## Troubleshooting

### Programs with spaces in the executable path

If the process of a program you are saving has one only argument (the
executable) and the executable path is a relative path containing spaces, it
cannot be saved/restored correctly unless you
[create a custom command mapping](#window-command-mappings) for it.

See issue #55 for why this is the case.

I think this is a pretty far out edge case though and I'd be surprised if it
caused anyone issues.

### Manually editing programs files

If you manually edit a saved programs file, you must be aware of a few things:

If using an array to specify the command, each array element must be a distinct
argument, otherwise it won't work. For example:
```
"command": ["some-program arg1 arg2"]
```
is invalid, but both
```
"command": ["some-program", "arg1", "arg2"]
```
and
```
"command": "some-program arg1 arg2"
```
are valid.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.

### Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/JonnyHaystack/i3-resurrect/tags).

## Built With

* [Click](https://github.com/pallets/click) - Used to create the command line interface
* [i3ipc](https://github.com/acrisci/i3ipc-python) - Used to get/build the workspace tree
* [xprop](https://gitlab.freedesktop.org/xorg/app/xprop) - Used to get the PIDs of the windows that are retrieved using i3ipc
* [psutil](https://github.com/giampaolo/psutil) - Used to get the cmdline and cwd of each process
* [xdotool](https://www.semicomplete.com/projects/xdotool/) - Used to unmap and remap windows

## Contributors

* **Jonathan Haylett** - *Creator* - [@JonnyHaystack](https://github.com/JonnyHaystack)

See also the list of [contributors](https://github.com/JonnyHaystack/i3-resurrect/contributors) who participated in this project.

### Acknowledgments

* [@pallets](https://github.com/pallets) - for Click
* [@acrisci](https://github.com/acrisci) - for the i3ipc Python library
* [@giampaolo](https://github.com/giampaolo) - for the psutil Python library
* [@jordansissel](https://github.com/jordansissel) - for xdotool
* Everyone who has worked on i3

## Related projects

For those interested, other excellent software I use to get things up and running quickly includes:
- [tmux-resurrect](https://github.com/tmux-plugins/tmux-resurrect) - which obviously also inspired
the name of this project
- [tmux-continuum](https://github.com/tmux-plugins/tmux-continuum) - an excellent companion to
tmux-resurrect
- [qutebrowser](https://github.com/qutebrowser/qutebrowser) - which has excellent session
management, especially if you create bindings for saving and loading individual windows

## License

This project is licensed under the GNU GPL Version 3 - see the [LICENSE](LICENSE) file for details



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing

When contributing to this repository, please first discuss the change you wish to make via issue,
email, or any other method with the owners of this repository before making a change. 

Please note we have a code of conduct, please follow it in all your interactions with the project.

## Pull Request Process

1. Ensure any install or build dependencies are removed before the end of the layer when doing a 
   build.
2. Update the README.md with details of changes to the interface, this includes new environment 
   variables, exposed ports, useful file locations and container parameters.
3. Increase the version numbers in any examples files and the README.md to the new version that this
   Pull Request would represent. The versioning scheme we use is [SemVer](http://semver.org/).
4. You may merge the Pull Request in once you have the sign-off of two other developers, or if you 
   do not have permission to do that, you may request the second reviewer to merge it for you.

## Code of Conduct

### Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, gender identity and expression, level of experience,
nationality, personal appearance, race, religion, or sexual identity and
orientation.

### Our Standards

Examples of behavior that contributes to creating a positive environment
include:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints and experiences
* Gracefully accepting constructive criticism
* Focusing on what is best for the community
* Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

* The use of sexualized language or imagery and unwelcome sexual attention or
advances
* Trolling, insulting/derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or electronic
  address, without explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

### Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

### Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

### Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at [INSERT EMAIL ADDRESS]. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

### Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at [http://contributor-covenant.org/version/1/4][version]

[homepage]: http://contributor-covenant.org
[version]: http://contributor-covenant.org/version/1/4/


================================================
FILE: LICENSE
================================================
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.



================================================
FILE: Pipfile
================================================
[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]
pytest = "*"
tox = "*"
coveralls = "*"
black = "*"
pylint = "*"
jedi = "*"

[packages]
click = "*"
i3ipc = "*"
psutil = "*"
natsort = "*"

[requires]
python_version = "3.12"



================================================
FILE: requirements.txt
================================================
astroid==2.2.5	
Click==7.0	
enum-compat==0.0.2	
i3ipc==2.1.1	
isort==4.3.20	
lazy-object-proxy==1.4.1	
mccabe==0.6.1	
psutil==5.6.6
six==1.12.0	
typed-ast==1.4.0	
wrapt==1.11.2	
pytest==5.0.1	
tox==3.13.2	
pytest-cov==2.7.1	
coveralls==1.8.2	
natsort==6.0.0



================================================
FILE: setup.py
================================================
from setuptools import setup
from setuptools import find_packages

with open("README.md", "r") as fh:
    long_description = fh.read()

setup(
    name="i3-resurrect",
    version="2.0.0",
    packages=["i3_resurrect"],
    author="Jonathan Haylett",
    author_email="jonathan@haylett.dev",
    url="https://github.com/JonnyHaystack/i3-resurrect",
    license="GNU GPL Version 3",
    python_requires=">=3.6",
    install_requires=[
        "Click",
        "i3ipc",
        "natsort",
        "psutil",
    ],
    entry_points={
        "console_scripts": ["i3-resurrect=i3_resurrect.main:main"],
    },
    description=(
        "A simple but flexible solution to saving and restoring i3 workspace layouts"
    ),
    long_description=long_description,
    long_description_content_type="text/markdown",
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
        "Operating System :: POSIX :: Linux",
    ],
)



================================================
FILE: tox.ini
================================================
[tox]
envlist = py3

[testenv]
deps = pytest
passenv = DISPLAY XAUTHORITY
commands =
  pytest -vv
  i3-resurrect -h
  i3-resurrect --help
  i3-resurrect --version
  i3-resurrect save -h
  i3-resurrect save --help
  i3-resurrect restore -h
  i3-resurrect restore --help
  i3-resurrect save -d /tmp/i3-resurrect
  i3-resurrect save -d /tmp/i3-resurrect --swallow=class,instance,title
  i3-resurrect save -d /tmp/i3-resurrect --swallow=class,instance,title --layout-only
  i3-resurrect save -d /tmp/i3-resurrect --swallow=class,instance,title --programs-only
  sleep 0.5
  i3-resurrect restore -d /tmp/i3-resurrect --programs-only
  sleep 1
  i3-resurrect restore -d /tmp/i3-resurrect --layout-only
  sleep 0.5
  i3-resurrect save -d /tmp/i3-resurrect -w "2 " --swallow=class,instance,title
  sleep 1
  i3-resurrect restore -d /tmp/i3-resurrect -w "2 "
  i3-resurrect save -d /tmp/i3-resurrect -p testing --swallow=class,instance,title
  i3-resurrect restore -d /tmp/i3-resurrect -p testing
  i3-resurrect ls -d /tmp/i3-resurrect -h
  i3-resurrect ls --help
  i3-resurrect ls -d /tmp/i3-resurrect
  i3-resurrect ls -d /tmp/i3-resurrect workspaces
  i3-resurrect ls -d /tmp/i3-resurrect profiles
  i3-resurrect rm -d /tmp/i3-resurrect -w "2 " --layout-only
  i3-resurrect rm -d /tmp/i3-resurrect -w "2 " --programs-only
  i3-resurrect rm -d /tmp/i3-resurrect -p testing



================================================
FILE: .envrc
================================================
layout pipenv



================================================
FILE: .travis.yml
================================================
language: python
python:
- '3.6'
- 3.6-dev
- '3.7'
- 3.7-dev
dist: disco
services:
- xvfb
before_install:
- sudo /usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2020.02.03_all.deb keyring.deb SHA256:c5dd35231930e3c8d6a9d9539c846023fe1a08e4b073ef0d2833acd815d80d48
- sudo dpkg -i ./keyring.deb
- echo "deb https://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe" | sudo tee -a /etc/apt/sources.list.d/sur5r-i3.list
- sudo apt update
- sudo apt install -y i3 i3status wmctrl xdotool
install:
- pip install -r requirements.txt
before_script:
- i3 &
- sleep 3
script:
- i3 -v
- pytest -vv --cov=i3_resurrect tests/
- tox
after_success:
- coveralls
notifications:
  pushover:
    api_key:
      secure: UidUZv7HZ2BAXrKpNWXPGOQyQg7SREktVo14lNvbKMpKMavaQ+y0KMRRUb3K6JL7ylNSVGYXwro3kRa1HV0La5PDnDk2ancnGkZ91ti7BO/Vync5pZwzTWhRZr+vDhysW7ZFbW8H2gISytWinV68nnCn3Xra+wYLRLr0CqwsLmxmeykl4Fz/zSjV0R5rYojSp0KUnhyGAGht64Rym/IGQzD9FZk6mNHFjM9jU+K6gigWod7XmbOzaN8MLi03+33PWJBRwbyF7lf8hnDPkmVOkBd5aweRnr11gxkngTBlcZm8MgubqSLXhhclbws0Fgc4wt4NA6KE4gCBDFe3KKnOoLBaNYKVeHlCpQ/7fZq9Ed4/acrNHyGX/fgd+hfiPCae4w9IQvGXpYqvTxOHblSseyzJiIb0QbKIhPJK8VrNU/BhP/j1UwBbgIUlXV8IJ7uR2+x6+ZcR27+DFaA391PE57QMaOFCZQIOpoQRVI6GgAt7eEJ6FCnXMs/rNuVuQlYo7z+rWYjSDcgOWzOtg1DDsjjlziu+d7wWR1ENwcbn1tJXpHX8mpR8HO9ortDKDXYToCLJTOn2MsMhHhNoPIK86knuoqIQ415M23l1Os+iVIVd33+LTXJYmLxmwc35TreBM/wOz4XZSGdHSQZfOCoyuaNiAFmEYiQWr9O0OK+bvOU=
    users:
      secure: VoiqQxvfYMJFqpwVAu9kcRI6M1GXnj/u9ewE/cBNYIUcFnC1WtHFUZEiOAJtzZ0uT2IYYe71zuH7GNIxxpIC4OBPatRCMbm+wXtjz6TPdc3rHZEbMzMATD/EIx4IbyzXLZVTFOs6ytUQLiUuFDw3QqY+2IoCtX1qv2TIfrlrPCMJMdOpUJH5tGXPjAEdTirqW8Ef7cjZvKOta04RU59kV4Gh3nPCO2lCkfRtLSxnF+CZ1ZHjpNmFt0aP+GsHhuC1sZtsFlzJPe2s2XNVbwB8as5/BV7q64v+vrCdrk8CYiVIsOSzlZBcsV6vO1Mc2CmNb9lpSSbUMuklIxQCB00orrSmqewv711KLx4bksa1KvOvqAg38QUejfB7cqs76mrcW479oJ/EXTZMQhS27xzbVyk+Z03mewq6Xfwaqfchdq3Tq7VLfCDA6w4lTk9b0KuZLJKuV7u1tcmLHccTSxT4UJ6RvcW1RwfMuaxiIMwnuan/K0dY11ernvnccyU55COE4Ha3o8BQkSc3DKmvEze++8/IBml1CItoVG3N+7N29W4Dkw1TzZfnMRLXDDLpAEwstCBXW8hgH5maUXhUlaXclYuTRdhuDtZ2xY35DSJM5nPiHolJgPaM/DLJZXJ8Yy9VBtTR0K5KpqLsvytTNfTxeuBcqrP0I1+MTcGRT2T6aHg=
  on_success: change
  on_failure: always



================================================
FILE: contrib/scripts/i3-resurrect-dmenu
================================================
#!/usr/bin/env bash

ACTIONS=("Restore" "Save" "Delete")
TARGETS=("Both" "Programs" "Layout")
DMENU="dmenu -i"

prompt="i3-resurrect"
action=$(printf "%s\n" ${ACTIONS[@]} | $DMENU -p $prompt)

case $action in
  Save)
    command="i3-resurrect save --swallow=class,instance,title -p"
    ;;
  Restore)
    command="i3-resurrect restore -p"
    ;;
  Delete)
    command="i3-resurrect rm -p"
    ;;
  *)
    echo "Invalid action"
    exit 1
    ;;
esac

prompt="Profile"
profile=$(i3-resurrect ls profiles | awk '{$NF=""; $1=""; print $0}' | uniq | $DMENU -p "$prompt" | xargs)

if [[ "$profile" == "" ]]; then
  echo "Invalid profile"
  exit 1
fi

prompt="Target"
target=$(printf "%s\n" ${TARGETS[@]} | $DMENU -p $prompt)

case $target in
  Programs)
    target_option="--programs-only"
    ;;
  Layout)
    target_option="--layout-only"
    ;;
  Both)
    target_option=""
    ;;
  *)
    echo "Invalid target"
    exit 1
    ;;
esac

if [[ -n "$target_option" ]]; then
  $command "$profile" "$target_option"
else
  $command "$profile"
fi



================================================
FILE: i3_resurrect/__init__.py
================================================
__all__ = ["config", "layout", "main", "programs", "treeutils", "util"]

from . import config
from . import layout
from . import main
from . import programs
from . import treeutils
from . import util



================================================
FILE: i3_resurrect/config.py
================================================
"""
Lazy-initialized singleton for config.
"""

import json
from pathlib import Path


def create_default():
    """
    Creates the default config file.
    """
    global _config
    global _config_dir
    global _config_file

    _config = {
        "directory": "~/.i3/i3-resurrect/",
        "window_command_mappings": [
            {
                "class": "^Gnome-terminal$",
                "command": "gnome-terminal",
            },
        ],
        "window_swallow_criteria": {},
        "terminals": ["Gnome-terminal", "Alacritty"],
    }

    # Make config directory if it doesn't exist.
    Path(_config_dir).mkdir(parents=True, exist_ok=True)

    # Write default config.
    with _config_file.open("w") as f:
        f.write(json.dumps(_config, indent=2))


def get(key, default):
    """
    Gets a config value.
    """
    global _config

    # Load config if it hasn't already been loaded.
    if _config is None:
        try:
            _config = json.loads(_config_file.read_text())
        except json.decoder.JSONDecodeError as e:
            print(f'Error in config file: "{str(e)}"')
            exit(1)
        except PermissionError as e:
            print(f"Could not read config file: {str(e)}")
            exit(1)
        except FileNotFoundError:
            # Create default config if no config exists.
            create_default()

    return _config.get(key, default)


_config = None

_config_dir = Path("~/.config/i3-resurrect/").expanduser()
_config_file = _config_dir / "config.json"

if not _config_file.is_file():
    # Create default config if no config exists.
    create_default()



================================================
FILE: i3_resurrect/layout.py
================================================
import json
import shlex
import subprocess
import sys
import tempfile
from pathlib import Path

import i3ipc

from . import treeutils
from . import util


def save(workspace, numeric, directory, profile, swallow_criteria):
    """
    Save an i3 workspace layout to a file.
    """
    workspace_id = util.filename_filter(workspace)
    filename = f"workspace_{workspace_id}_layout.json"
    if profile is not None:
        filename = f"{profile}_layout.json"
    layout_file = Path(directory) / filename

    workspace_tree = treeutils.get_workspace_tree(workspace, numeric)

    with layout_file.open("w") as f:
        # Build new workspace tree suitable for restoring and write it to a
        # file.
        f.write(
            json.dumps(
                build_layout(workspace_tree, swallow_criteria),
                indent=2,
            )
        )


def read(workspace, directory, profile):
    """
    Read saved layout file.
    """
    workspace_id = util.filename_filter(workspace)
    filename = f"workspace_{workspace_id}_layout.json"
    if profile is not None:
        filename = f"{profile}_layout.json"
    layout_file = Path(directory) / filename

    layout = None
    try:
        layout = json.loads(layout_file.read_text())
    except FileNotFoundError:
        if profile is not None:
            util.eprint(f'Could not find saved layout for profile "{profile}"')
        else:
            util.eprint('Could not find saved layout for workspace "{workspace}"')
        sys.exit(1)
    return layout


def restore(workspace_name, layout):
    """
    Restore an i3 workspace layout.
    """
    if layout == {}:
        return
    window_ids = []
    placeholder_window_ids = []

    # Get ids of all placeholder or normal windows in workspace.
    ws = treeutils.get_workspace_tree(workspace_name, False)
    windows = treeutils.get_leaves(ws)
    for con in windows:
        window_id = con["window"]
        if is_placeholder(con):
            # If window is a placeholder, add it to list of placeholder
            # windows.
            placeholder_window_ids.append(window_id)
        else:
            # Otherwise, add it to the list of regular windows.
            window_ids.append(window_id)

    # Unmap all non-placeholder windows in workspace.
    for window_id in window_ids:
        xdo_unmap_window(window_id)

    # Remove any remaining placeholder windows in workspace so that we don't
    # have duplicates.
    for window_id in placeholder_window_ids:
        xdo_kill_window(window_id)

    try:
        i3 = i3ipc.Connection()

        # append_layout can only insert nodes so we must separately change the
        # layout mode of the workspace node.
        ws_layout_mode = layout.get("layout", "default")
        tree = i3.get_tree()
        focused = tree.find_focused()
        workspace_node = focused.workspace()
        workspace_node.command(f"layout {ws_layout_mode}")

        # We don't want to pass the whole layout file because we don't want to
        # append a new workspace. append_layout requires a file path so we must
        # extract the part of the json that we want and store it in a tempfile.
        restorable_layout = (
            layout.get("nodes", []) + layout.get("floating_nodes", []),
        )
        restorable_layout_file = tempfile.NamedTemporaryFile(
            mode="w",
            prefix="i3-resurrect_",
        )
        restorable_layout_file.write(json.dumps(restorable_layout))
        restorable_layout_file.flush()

        # Create fresh placeholder windows by appending layout to workspace.
        i3.command(f"append_layout {restorable_layout_file.name}")

        # Move workspace to original output
        if "output" in layout:
            i3.command(
                f'[workspace="{workspace_name}"] move workspace to output {layout["output"]}'
            )

        # Delete tempfile.
        restorable_layout_file.close()
    except Exception as e:
        util.eprint(
            "Error occurred restoring workspace layout. Note that if the layout was saved by a "
            "version prior to 1.4.0 it must be recreated."
        )
        util.eprint(str(e))
    finally:
        # Map all unmapped windows. We use finally because we don't want the
        # user to lose their windows no matter what.
        for window_id in window_ids:
            xdo_map_window(window_id)


def build_layout(tree, swallow):
    """
    Builds a restorable layout tree with basic Python data structures which are
    JSON serialisable.
    """
    processed = treeutils.process_node(tree, swallow)
    return processed


def is_placeholder(container):
    """
    Check if a container is a placeholder window.

    Args:
        container: The container to check.
    """
    return container["swallows"] not in [[], None]


def xdo_unmap_window(window_id):
    command = shlex.split(f"xdotool windowunmap {window_id}")
    subprocess.call(
        command,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
    )


def xdo_map_window(window_id):
    command = shlex.split(f"xdotool windowmap {window_id}")
    subprocess.call(
        command,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
    )


def xdo_kill_window(window_id):
    command = shlex.split(f"xdotool windowkill {window_id}")
    subprocess.call(
        command,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
    )



================================================
FILE: i3_resurrect/main.py
================================================
import sys
from pathlib import Path

import click
import i3ipc
from natsort import natsorted

from . import config
from . import layout
from . import programs
from . import util

DEFAULT_DIRECTORY = config.get("directory", "~/.i3/i3-resurrect/")


@click.group(
    context_settings=dict(help_option_names=["-h", "--help"], max_content_width=150)
)
@click.version_option()
def main():
    pass


@main.command("save")
@click.option(
    "--workspace", "-w", help="The workspace to save.\n[default: current workspace]"
)
@click.option(
    "--numeric", "-n", is_flag=True, help="Select workspace by number instead of name."
)
@click.option(
    "--directory",
    "-d",
    type=click.Path(file_okay=False, writable=True),
    default=DEFAULT_DIRECTORY,
    help="The directory to save the workspace to.\n[default: ~/.i3/i3-resurrect]",
)
@click.option(
    "--profile", "-p", default=None, help=("The profile to save the workspace to.")
)
@click.option(
    "--swallow",
    "-s",
    default="class,instance",
    help=(
        "The swallow criteria to use.\n"
        "[options: class,instance,title,window_role]\n"
        "[default: class,instance]"
    ),
)
@click.option(
    "--layout-only", "target", flag_value="layout_only", help="Only save layout."
)
@click.option(
    "--programs-only",
    "target",
    flag_value="programs_only",
    help="Only save running programs.",
)
def save_workspace(workspace, numeric, directory, profile, swallow, target):
    """
    Save an i3 workspace's layout and running programs to a file.
    """
    if workspace is None:
        i3 = i3ipc.Connection()
        workspace = i3.get_tree().find_focused().workspace().name

    directory = util.resolve_directory(directory, profile)

    # Create directory if non-existent.
    Path(directory).mkdir(parents=True, exist_ok=True)

    if target != "programs_only":
        # Save workspace layout to file.
        swallow_criteria = swallow.split(",")
        layout.save(workspace, numeric, directory, profile, swallow_criteria)

    if target != "layout_only":
        # Save running programs to file.
        programs.save(workspace, numeric, directory, profile)


@main.command("restore")
@click.option(
    "--workspace", "-w", help="The workspace to restore.\n[default: current workspace]"
)
@click.option(
    "--numeric", "-n", is_flag=True, help="Select workspace by number instead of name."
)
@click.option(
    "--directory",
    "-d",
    type=click.Path(file_okay=False),
    default=DEFAULT_DIRECTORY,
    help="The directory to restore the workspace from.\n[default: ~/.i3/i3-resurrect]",
)
@click.option(
    "--profile", "-p", default=None, help=("The profile to restore the workspace from.")
)
@click.option(
    "--layout-only", "target", flag_value="layout_only", help="Only restore layout."
)
@click.option(
    "--programs-only",
    "target",
    flag_value="programs_only",
    help="Only restore running programs.",
)
def restore_workspace(workspace, numeric, directory, profile, target):
    """
    Restore i3 workspace layout and programs.
    """
    i3 = i3ipc.Connection()

    if workspace is None:
        workspace = i3.get_tree().find_focused().workspace().name

    directory = util.resolve_directory(directory, profile)

    if numeric and not workspace.isdigit():
        util.eprint("Invalid workspace number.")
        sys.exit(1)

    # Get layout name from file.
    workspace_layout = layout.read(workspace, directory, profile)
    if "name" in workspace_layout and profile is None:
        workspace_name = workspace_layout["name"]
    else:
        workspace_name = workspace

    # Switch to the workspace which we are loading.
    i3.command(f'workspace --no-auto-back-and-forth "{workspace_name}"')

    if target != "programs_only":
        # Load workspace layout.
        layout.restore(workspace_name, workspace_layout)

    if target != "layout_only":
        # Restore programs.
        saved_programs = programs.read(workspace, directory, profile)
        programs.restore(workspace_name, saved_programs)


@main.command("ls")
@click.option(
    "--directory",
    "-d",
    type=click.Path(file_okay=False),
    default=DEFAULT_DIRECTORY,
    help="The directory to search in.\n[default: ~/.i3/i3-resurrect]",
)
@click.argument(
    "item", type=click.Choice(["workspaces", "profiles"]), default="workspaces"
)
def list_workspaces(directory, item):
    """
    List saved workspaces or profiles.
    """
    directory = util.resolve_directory(directory)

    if item == "workspaces":
        workspaces = []
        for entry in directory.iterdir():
            if entry.is_file():
                name = entry.name
                name = name[name.index("_") + 1 :]
                workspace = name[: name.rfind("_")]
                file_type = name[name.rfind("_") + 1 : name.index(".json")]
                workspaces.append(f"Workspace {workspace} {file_type}")
        workspaces = natsorted(workspaces)
        for workspace in workspaces:
            print(workspace)
    else:
        directory = directory / "profiles"
        profiles = []
        try:
            for entry in directory.iterdir():
                if entry.is_file():
                    name = entry.name
                    profile = name[: name.rfind("_")]
                    file_type = name[name.rfind("_") + 1 : name.index(".json")]
                    profiles.append(f"Profile {profile} {file_type}")
            profiles = natsorted(profiles)
            for profile in profiles:
                print(profile)
        except FileNotFoundError:
            print("No profiles found")


@main.command("rm")
@click.option("--workspace", "-w", default=None, help="The saved workspace to delete.")
@click.option(
    "--directory",
    "-d",
    type=click.Path(file_okay=False),
    default=DEFAULT_DIRECTORY,
    help="The directory to delete from.\n[default: ~/.i3/i3-resurrect]",
)
@click.option("--profile", "-p", default=None, help=("The profile to delete."))
@click.option(
    "--layout-only",
    "target",
    flag_value="layout_only",
    help="Only delete saved layout.",
)
@click.option(
    "--programs-only",
    "target",
    flag_value="programs_only",
    help="Only delete saved programs.",
)
def remove(workspace, directory, profile, target):
    """
    Remove saved layout or programs.
    """
    directory = util.resolve_directory(directory, profile)

    if profile is not None:
        programs_filename = f"{profile}_programs.json"
        layout_filename = f"{profile}_layout.json"
    elif workspace is not None:
        workspace_id = util.filename_filter(workspace)
        programs_filename = f"workspace_{workspace_id}_programs.json"
        layout_filename = f"workspace_{workspace_id}_layout.json"
    else:
        util.eprint("Either --profile or --workspace must be specified.")
        sys.exit(1)
    programs_file = Path(directory) / programs_filename
    layout_file = Path(directory) / layout_filename

    if target != "programs_only":
        # Delete programs file.
        programs_file.unlink()

    if target != "layout_only":
        # Delete layout file.
        layout_file.unlink()


if __name__ == "__main__":
    main()



================================================
FILE: i3_resurrect/programs.py
================================================
import json
import shlex
import shutil
import subprocess
import sys
from pathlib import Path

import i3ipc
import psutil

from . import config
from . import treeutils
from . import util


def save(workspace, numeric, directory, profile):
    """
    Save the commands to launch the programs open in the specified workspace
    to a file.
    """
    workspace_id = util.filename_filter(workspace)
    filename = f"workspace_{workspace_id}_programs.json"
    if profile is not None:
        filename = f"{profile}_programs.json"
    programs_file = Path(directory) / filename

    window_command_mappings = config.get("window_command_mappings", [])

    programs = get_programs(workspace, numeric)

    # Write list of commands to file as JSON.
    with programs_file.open("w") as f:
        f.write(json.dumps(programs, indent=2))


def read(workspace, directory, profile):
    """
    Read saved programs file.
    """
    workspace_id = util.filename_filter(workspace)
    filename = f"workspace_{workspace_id}_programs.json"
    if profile is not None:
        filename = f"{profile}_programs.json"
    programs_file = Path(directory) / filename

    programs = None
    try:
        programs = json.loads(programs_file.read_text())
    except FileNotFoundError:
        if profile is not None:
            util.eprint(f'Could not find saved programs for profile "{profile}"')
        else:
            util.eprint(f'Could not find saved programs for workspace "{workspace}"')
        sys.exit(1)
    return programs


def restore(workspace_name, saved_programs):
    """
    Restore the running programs from an i3 workspace.
    """
    # Remove already running programs from the list of program to restore.
    running_programs = get_programs(workspace_name, False)
    for program in running_programs:
        if program in saved_programs:
            saved_programs.remove(program)

    i3 = i3ipc.Connection()
    for entry in saved_programs:
        cmdline = entry["command"]
        working_directory = entry["working_directory"]

        # If the working directory does not exist, set working directory to
        # user's home directory.
        if not Path(working_directory).exists():
            working_directory = Path.home()

        # If cmdline is array, join it into one string for use with i3's exec
        # command.
        if isinstance(cmdline, list):
            # Quote each argument of the command in case some of
            # them contain spaces. Also protect quotes contained in the
            # arguments and those to be added from i3's command parser.
            cmdline = [
                '\\"' + arg.replace('"', '\\\\\\"') + '\\"'
                for arg in cmdline
                if arg != ""
            ]
            command = " ".join(cmdline)
        else:
            command = cmdline

        # Execute command via i3 exec.
        i3.command(f'exec "cd \\"{working_directory}\\" && {command}"')


def get_programs(workspace, numeric):
    """
    Get running programs in specified workspace.

    Args:
        workspace: The workspace to search.
        numeric: Identify workspace by number instead of name.
    """
    # Loop through windows and save commands to launch programs on saved
    # workspace.
    programs = []
    for con, pid in windows_in_workspace(workspace, numeric):
        if pid == 0:
            continue

        # Get process info for the window.
        procinfo = psutil.Process(pid)

        # Try to get absolute path to executable.
        exe = None
        try:
            exe = procinfo.exe()
        except Exception:
            pass

        # Create command to launch program.
        command = get_window_command(
            con["window_properties"],
            procinfo.cmdline(),
            exe,
        )
        if command in ([], ""):
            continue

        # Remove empty string arguments from command.
        command = [arg for arg in command if arg != ""]

        terminals = config.get("terminals", [])

        try:
            # Obtain working directory using psutil.
            if con["window_properties"]["class"] in terminals:
                # If the program is a terminal emulator, get the working
                # directory from its first subprocess.
                working_directory = procinfo.children()[0].cwd()
            else:
                working_directory = procinfo.cwd()
        except Exception:
            working_directory = str(Path.home())

        # Add the command to the list.
        programs.append({"command": command, "working_directory": working_directory})

    return programs


def windows_in_workspace(workspace, numeric):
    """
    Generator to iterate over windows in a workspace.

    Args:
        workspace: The name of the workspace whose windows to iterate over.
    """
    ws = treeutils.get_workspace_tree(workspace, numeric)
    for con in treeutils.get_leaves(ws):
        pid = get_window_pid(con)
        yield (con, pid)


def get_window_pid(con):
    """
    Get window PID using xprop.

    Args:
        con: The window container node whose PID to look up.
    """
    window_id = con["window"]
    if window_id is None:
        return 0

    try:
        xprop_output = (
            subprocess.check_output(
                shlex.split(f"xprop _NET_WM_PID -id {window_id}"),
                stderr=subprocess.DEVNULL,
            )
            .decode("utf-8")
            .split(" ")
        )
        pid = int(xprop_output[len(xprop_output) - 1])
    except (subprocess.CalledProcessError, ValueError, IndexError):
        return 0

    return pid


def get_window_command(window_properties, cmdline, exe):
    """
    Gets a window command.

    This function starts with the process's cmdline, then loops through the
    window mappings and scores each matching rule. The command mapping with the
    highest score is then returned.
    """
    window_command_mappings = config.get("window_command_mappings", [])

    # Remove empty args from cmdline.
    cmdline = [arg for arg in cmdline if arg != ""]

    # If cmdline has only one argument which is not a known executable path,
    # try to split it. This means we can cover cases where the process
    # overwrote its own cmdline, with the tradeoff that legitimate single
    # argument cmdlines with a relative executable path containing spaces will
    # be broken.
    if len(cmdline) == 1 and shutil.which(cmdline[0]) is None:
        cmdline = shlex.split(cmdline[0])
    # Use the absolute executable path in case a relative path was used.
    if exe is not None:
        cmdline[0] = exe

    command = cmdline

    # If window command mappings is a dictionary in the config file, use the
    # old way.
    # TODO: Remove in 2.0.0
    if isinstance(window_command_mappings, dict):
        window_class = window_properties["class"]
        if window_class in window_command_mappings:
            command = window_command_mappings[window_class]
        return command

    # Find the mapping that gets the highest score.
    current_score = 0
    best_match = None
    for rule in window_command_mappings:
        # Calculate score.
        score = calc_rule_match_score(rule, window_properties)

        if score > current_score:
            current_score = score
            best_match = rule

    # If no match found, just use the original cmdline.
    if best_match is None:
        return command

    try:
        if "command" not in best_match:
            command = []
        elif isinstance(best_match["command"], list):
            command = [arg.format(*cmdline) for arg in best_match["command"]]
        else:
            command = shlex.split(best_match["command"].format(*cmdline))
    except IndexError:
        util.eprint(
            "IndexError occurred while processing command mapping:\n"
            f"  Mapping: {best_match}\n"
            f"  Process cmdline: {cmdline}"
        )

    return command


def calc_rule_match_score(rule, window_properties):
    """
    Score window command mapping match based on which criteria match.

    Scoring is done based on which criteria are considered "more specific".
    """
    # Window properties and value to add to score when match is found.
    criteria = {
        "window_role": 1,
        "class": 2,
        "instance": 3,
        "title": 10,
    }

    score = 0
    for criterion in criteria:
        if criterion in rule:
            # Score is zero if there are any non-matching criteria.
            if (
                criterion not in window_properties
                or rule[criterion] != window_properties[criterion]
            ):
                return 0
            score += criteria[criterion]
    return score



================================================
FILE: i3_resurrect/treeutils.py
================================================
import json
import re
import shlex
import subprocess

from . import config

# The tree node attributes that we want to save.
REQUIRED_ATTRIBUTES = [
    "border",
    "current_border_width",
    "floating",
    "fullscreen_mode",
    "geometry",
    "layout",
    "marks",
    "name",
    "orientation",
    "percent",
    "scratchpad_state",
    "sticky",
    "type",
    "workspace_layout",
]


def process_node(original, swallow):
    """
    Recursive function which traverses a layout tree and builds a new tree from
    it which can be restored using append_layout and only contains attributes
    necessary for accurately restoring the layout.
    """
    processed = {}

    # Base case.
    if original is None or original == {}:
        return processed

    # Set attributes.
    for attribute in REQUIRED_ATTRIBUTES:
        if attribute in original:
            processed[attribute] = original[attribute]

    # Keep output attribute for workspace nodes.
    if "type" in original and original["type"] == "workspace":
        processed["output"] = original["output"]

    # Keep rect attribute for floating nodes.
    if "type" in original and original["type"] == "floating_con":
        processed["rect"] = original["rect"]

    # Set swallow criteria if the node is a window.
    if "window_properties" in original:
        processed["swallows"] = [{}]
        # Local variable for swallow criteria.
        swallow_criteria = swallow
        # Get swallow criteria from config.
        window_swallow_mappings = config.get("window_swallow_criteria", {})
        window_class = original["window_properties"].get("class", "")
        # Swallow criteria from config override the command line parameters
        # if present.
        if window_class in window_swallow_mappings:
            swallow_criteria = window_swallow_mappings[window_class]
        for criterion in swallow_criteria:
            if criterion in original["window_properties"]:
                # Escape special characters in swallow criteria.
                escaped = re.escape(original["window_properties"][criterion])
                processed["swallows"][0][criterion] = escaped

    # Recurse over child nodes (normal and floating).
    for node_type in ["nodes", "floating_nodes"]:
        if node_type in original and original[node_type] != []:
            processed[node_type] = []
            for child in original[node_type]:
                # Step case.
                processed[node_type].append(process_node(child, swallow))

    return processed


def get_workspace_tree(workspace, numeric):
    """
    Get full workspace layout tree from i3.
    """
    root = json.loads(subprocess.check_output(shlex.split("i3-msg -t get_tree")))
    for output in root["nodes"]:
        for container in output["nodes"]:
            if container["type"] != "con":
                pass
            for ws in container["nodes"]:
                # Select workspace and trigger name and num field
                if numeric:
                    if (
                        workspace.isdigit()
                        and "num" in ws
                        and ws["num"] == int(workspace)
                    ):
                        return ws
                elif ws["name"] == workspace:
                    return ws
    return {}


def get_leaves(container):
    """
    Recursive generator for retrieving a list of a container's leaf nodes.

    Args:
        container: The container to traverse.
    """
    # Base cases.
    if container is None:
        return

    nodes = container.get("nodes", []) + container.get("floating_nodes", [])

    # Step case.
    for node in nodes:
        if "window_properties" in node:
            yield node
        yield from get_leaves(node)



================================================
FILE: i3_resurrect/util.py
================================================
import sys
from os.path import expandvars
from pathlib import Path


def eprint(*args, **kwargs):
    """
    Function for printing to stderr.
    """
    print(*args, file=sys.stderr, **kwargs)


def filename_filter(filename):
    """
    Take a string and return a valid filename constructed from the string.
    """
    blacklist = '/\\:*"<>|'
    if filename is None:
        return filename

    # Remove blacklisted chars.
    for char in blacklist:
        filename = filename.replace(char, "")

    return filename


def resolve_directory(directory, profile=None):
    directory = Path(expandvars(directory)).expanduser()
    if profile is not None:
        directory = directory / "profiles"
    return directory



================================================
FILE: tests/__init__.py
================================================
from . import test_layout
from . import test_programs
from . import test_treeutils



================================================
FILE: tests/test_layout.py
================================================
from i3_resurrect import config
from i3_resurrect import layout


def test_build_layout(monkeypatch):
    # Monkeypatch config.
    monkeypatch.setattr(
        config,
        '_config',
        {
            'window_swallow_criteria': {
                'Ario': ['class', 'instance'],
            },
        },
    )

    workspace_container = {
        "id": 94067986102992,
        "type": "workspace",
        "orientation": "horizontal",
        "scratchpad_state": "none",
        "percent": None,
        "urgent": False,
        "focused": False,
        "output": "HDMI-1-1",
        "layout": "splith",
        "workspace_layout": "default",
        "last_split_layout": "splith",
        "border": "normal",
        "current_border_width": -1,
        "rect": {
            "x": 1366,
            "y": 0,
            "width": 1920,
            "height": 1048
        },
        "deco_rect": {
            "x": 0,
            "y": 0,
            "width": 0,
            "height": 0
        },
        "window_rect": {
            "x": 0,
            "y": 0,
            "width": 0,
            "height": 0
        },
        "geometry": {
            "x": 0,
            "y": 0,
            "width": 0,
            "height": 0
        },
        "name": "8",
        "num": 8,
        "gaps": {
            "inner": 0,
            "outer": 0
        },
        "window": None,
        "nodes": [
            {
                "id": 94067985558992,
                "type": "con",
                "orientation": "none",
                "scratchpad_state": "none",
                "percent": 0.5,
                "urgent": False,
                "focused": False,
                "output": "HDMI-1-1",
                "layout": "splith",
                "workspace_layout": "default",
                "last_split_layout": "splith",
                "border": "pixel",
                "current_border_width": 2,
                "rect": {
                    "x": 1376,
                    "y": 10,
                    "width": 945,
                    "height": 1028
                },
                "deco_rect": {
                    "x": 0,
                    "y": 0,
                    "width": 0,
                    "height": 0
                },
                "window_rect": {
                    "x": 2,
                    "y": 2,
                    "width": 941,
                    "height": 1024
                },
                "geometry": {
                    "x": 2049,
                    "y": 486,
                    "width": 553,
                    "height": 107
                },
                "name": "Ario",
                "title_format": " %title ",
                "window": 140509206,
                "window_properties": {
                    "class": "Ario",
                    "instance": "ario",
                    "title": "Ario",
                    "transient_for": None
                },
                "nodes": [],
                "floating_nodes": [],
                "focus": [],
                "fullscreen_mode": 0,
                "sticky": False,
                "floating": "auto_off",
                "swallows": []
            },
            {
                "id": 94067986549632,
                "type": "con",
                "orientation": "vertical",
                "scratchpad_state": "none",
                "percent": 0.5,
                "urgent": False,
                "focused": False,
                "output": "HDMI-1-1",
                "layout": "splitv",
                "workspace_layout": "default",
                "last_split_layout": "splitv",
                "border": "normal",
                "current_border_width": -1,
                "rect": {
                    "x": 2326,
                    "y": 0,
                    "width": 960,
                    "height": 1048
                },
                "deco_rect": {
                    "x": 0,
                    "y": 0,
                    "width": 0,
                    "height": 0
                },
                "window_rect": {
                    "x": 0,
                    "y": 0,
                    "width": 0,
                    "height": 0
                },
                "geometry": {
                    "x": 0,
                    "y": 0,
                    "width": 0,
                    "height": 0
                },
                "name": None,
                "window": None,
                "nodes": [
                    {
                        "id": 94067986605168,
                        "type": "con",
                        "orientation": "none",
                        "scratchpad_state": "none",
                        "percent": 0.5,
                        "urgent": False,
                        "focused": False,
                        "output": "HDMI-1-1",
                        "layout": "splith",
                        "workspace_layout": "default",
                        "last_split_layout": "splith",
                        "border": "pixel",
                        "current_border_width": 2,
                        "rect": {
                            "x": 2331,
                            "y": 10,
                            "width": 945,
                            "height": 509
                        },
                        "deco_rect": {
                            "x": 0,
                            "y": 0,
                            "width": 0,
                            "height": 0
                        },
                        "window_rect": {
                            "x": 2,
                            "y": 2,
                            "width": 941,
                            "height": 505
                        },
                        "geometry": {
                            "x": 2331,
                            "y": 10,
                            "width": 941,
                            "height": 1024
                        },
                        "name": "Faster Melee - Slippi (r18)",
                        "title_format": " %title ",
                        "window": 142606648,
                        "window_properties": {
                            "class": "Dolphin-emu",
                            "instance": "dolphin-emu",
                            "title": "Faster Melee - Slippi (r18)",
                            "transient_for": None
                        },
                        "nodes": [],
                        "floating_nodes": [],
                        "focus": [],
                        "fullscreen_mode": 0,
                        "sticky": False,
                        "floating": "auto_off",
                        "swallows": []
                    },
                    {
                        "id": 94067986105456,
                        "type": "con",
                        "orientation": "none",
                        "scratchpad_state": "none",
                        "percent": 0.5,
                        "urgent": False,
                        "focused": False,
                        "output": "HDMI-1-1",
                        "layout": "splith",
                        "workspace_layout": "default",
                        "last_split_layout": "splith",
                        "border": "pixel",
                        "current_border_width": 2,
                        "rect": {
                            "x": 2331,
                            "y": 529,
                            "width": 945,
                            "height": 509
                        },
                        "deco_rect": {
                            "x": 0,
                            "y": 0,
                            "width": 0,
                            "height": 0
                        },
                        "window_rect": {
                            "x": 2,
                            "y": 2,
                            "width": 941,
                            "height": 505
                        },
                        "geometry": {
                            "x": 2542,
                            "y": 344,
                            "width": 518,
                            "height": 356
                        },
                        "name": "Dolphin NetPlay Setup",
                        "title_format": " %title ",
                        "window": 142607489,
                        "window_properties": {
                            "class": "Dolphin-emu",
                            "instance": "dolphin-emu",
                            "title": "Dolphin NetPlay Setup",
                            "transient_for": None
                        },
                        "nodes": [],
                        "floating_nodes": [],
                        "focus": [],
                        "fullscreen_mode": 0,
                        "sticky": False,
                        "floating": "auto_off",
                        "swallows": []
                    }
                ],
                "floating_nodes": [],
                "focus": [
                    94067986105456,
                    94067986605168
                ],
                "fullscreen_mode": 0,
                "sticky": False,
                "floating": "auto_off",
                "swallows": []
            }
        ],
        "floating_nodes": [],
        "focus": [
            94067986549632,
            94067985558992
        ],
        "fullscreen_mode": 0,
        "sticky": False,
        "floating": "auto_off",
        "swallows": []
    }
    expected_tree = {
        "type": "workspace",
        "orientation": "horizontal",
        "scratchpad_state": "none",
        "percent": None,
        "layout": "splith",
        "workspace_layout": "default",
        "sticky": False,
        "border": "normal",
        "current_border_width": -1,
        "floating": "auto_off",
        "fullscreen_mode": 0,
        "geometry": {
            "x": 0,
            "y": 0,
            "width": 0,
            "height": 0
        },
        "name": "8",
        "nodes": [
            {
                "border": "pixel",
                "current_border_width": 2,
                "floating": "auto_off",
                "fullscreen_mode": 0,
                "geometry": {
                    "x": 2049,
                    "y": 486,
                    "width": 553,
                    "height": 107
                },
                "layout": "splith",
                "name": "Ario",
                "orientation": "none",
                "percent": 0.5,
                "scratchpad_state": "none",
                "type": "con",
                "workspace_layout": "default",
                "swallows": [
                    {
                        "class": "^Ario$",
                        "instance": "^ario$"
                    }
                ],
                "sticky": False
            },
            {
                "border": "normal",
                "current_border_width": -1,
                "floating": "auto_off",
                "fullscreen_mode": 0,
                "geometry": {
                    "x": 0,
                    "y": 0,
                    "width": 0,
                    "height": 0
                },
                "layout": "splitv",
                "name": None,
                "orientation": "vertical",
                "percent": 0.5,
                "scratchpad_state": "none",
                "sticky": False,
                "type": "con",
                "workspace_layout": "default",
                "nodes": [
                    {
                        "border": "pixel",
                        "current_border_width": 2,
                        "floating": "auto_off",
                        "fullscreen_mode": 0,
                        "geometry": {
                            "x": 2331,
                            "y": 10,
                            "width": 941,
                            "height": 1024
                        },
                        "layout": "splith",
                        "name": "Faster Melee - Slippi (r18)",
                        "orientation": "none",
                        "percent": 0.5,
                        "scratchpad_state": "none",
                        "sticky": False,
                        "type": "con",
                        "workspace_layout": "default",
                        "swallows": [
                            {
                                "class": "^Dolphin\\-emu$",
                                "instance": "^dolphin\\-emu$",
                                "title": "^Faster\\ Melee\\ \\-\\ Slippi\\ \\(r18\\)$"
                            }
                        ]
                    },
                    {
                        "border": "pixel",
                        "current_border_width": 2,
                        "floating": "auto_off",
                        "fullscreen_mode": 0,
                        "geometry": {
                            "x": 2542,
                            "y": 344,
                            "width": 518,
                            "height": 356
                        },
                        "layout": "splith",
                        "name": "Dolphin NetPlay Setup",
                        "orientation": "none",
                        "percent": 0.5,
                        "scratchpad_state": "none",
                        "sticky": False,
                        "type": "con",
                        "workspace_layout": "default",
                        "swallows": [
                            {
                                "class": "^Dolphin\\-emu$",
                                "instance": "^dolphin\\-emu$",
                                "title": "^Dolphin\\ NetPlay\\ Setup$"
                            }
                        ]
                    }
                ]
            }
        ]
    }
    tree = layout.build_layout(workspace_container, ['class', 'instance', 'title'])
    assert tree == expected_tree



================================================
FILE: tests/test_programs.py
================================================
from i3_resurrect import config
from i3_resurrect import programs


def test_get_window_command(monkeypatch):
    # Monkeypatch config.
    monkeypatch.setattr(
        config,
        '_config',
        {
            'window_command_mappings': [
                {
                    'class': 'Program1'
                },
                {
                    'class': 'Program1',
                    'title': 'Main window title',
                    'command': 'run_program1'
                },
                {
                    'title': 'Some arbitrary title',
                },
                {
                    'class': 'Program4',
                    'command': 'run_program4 {1}'
                },
                {
                    'class': 'Program6',
                    'command': 'chrome {1}'
                },
                {
                    'class': 'Program7',
                    'command': ['/opt/Pulse SMS/pulse-sms'],
                }
            ],
        },
    )

    # Test class + title mapping.
    program1_main = {
        'class': 'Program1',
        'title': 'Main window title',
    }
    assert programs.get_window_command(
        program1_main,
        ['program1'],
        '/usr/bin/program1',
    ) == [
        'run_program1',
    ]

    # Test class only mapping.
    program1_secondary = {
        'class': 'Program1',
        'title': 'Blah random title',
    }
    assert programs.get_window_command(
        program1_secondary,
        ['program1'],
        '/usr/bin/program1',
    ) == []

    # Test with separate program window with matching title but not class.
    program2_main = {
        'class': 'Program2',
        'title': 'Main window title',
    }
    assert programs.get_window_command(
        program2_main,
        ['program2'],
        '/usr/bin/program2'
    ) == ['/usr/bin/program2']

    # Test that title only mapping matches any window with matching title.
    program3 = {
        'class': 'Program3',
        'title': 'Some arbitrary title',
    }
    assert programs.get_window_command(
        program3,
        ['program3'],
        '/usr/bin/program3',
    ) == []

    # Test cmdline arg interpolation.
    program4 = {
        'class': 'Program4',
        'title': 'Blah random title',
    }
    assert programs.get_window_command(
        program4,
        ['/opt/Program4/program4', '/tmp/test.txt'],
        '/opt/Program4/program4',
    ) == ['run_program4', '/tmp/test.txt']

    # Test splitting of single arg command.
    program5 = {
        'class': 'Program5',
        'title': 'program 5 title',
    }
    assert programs.get_window_command(
        program5,
        ['/opt/google/chrome/chrome --profile-directory=Default '
         '--app=http://instacalc.com --user-data-dir=.config'],
        '/opt/google/chrome/chrome',
    ) == [
        '/opt/google/chrome/chrome',
        '--profile-directory=Default',
        '--app=http://instacalc.com',
        '--user-data-dir=.config',
    ]

    # Test splitting of single arg command when used with mapping and cmdline
    # interpolation.
    program6 = {
        'class': 'Program6',
    }
    assert programs.get_window_command(
        program6,
        ['/opt/google/chrome/chrome --profile-directory=Default '
         '--app=http://instacalc.com --user-data-dir=.config'],
        '/opt/google/chrome/chrome',
    ) == [
        'chrome',
        '--profile-directory=Default',
    ]

    # Test single arg command with space in executable path.
    program7 = {
        'class': 'Program7',
    }
    assert programs.get_window_command(
        program7,
        ['/opt/Pulse SMS/pulse-sms'],
        None
    ) == ['/opt/Pulse SMS/pulse-sms']

    # Test single arg command with space in executable path with exe available.
    program8 = {
        'class': 'Program8',
    }
    assert programs.get_window_command(
        program8,
        ['/opt/Pulse SMS/pulse-sms'],
        '/opt/Pulse SMS/pulse-sms',
    ) == ['/opt/Pulse SMS/pulse-sms', 'SMS/pulse-sms']

    # Test cmdline with empty args is processed correctly.
    assert programs.get_window_command(
        program5,
        ['/opt/google/chrome/chrome --profile-directory=Default '
         '--app=http://instacalc.com --user-data-dir=.config', '', '', '', ''],
        '/opt/google/chrome/chrome',
    ) == [
        '/opt/google/chrome/chrome',
        '--profile-directory=Default',
        '--app=http://instacalc.com',
        '--user-data-dir=.config',
    ]



================================================
FILE: tests/test_treeutils.py
================================================
from i3_resurrect import treeutils


def test_windows_in_container():
    workspace_tree = {
        'id': 93860418230528,
        'type': 'workspace',
        'orientation': 'horizontal',
        'scratchpad_state': 'none',
        'percent': 0.5,
        'urgent': False,
        'focused': False,
        'output': 'HDMI-1-1',
        'layout': 'splith',
        'workspace_layout': 'default',
        'last_split_layout': 'splith',
        'border': 'normal',
        'current_border_width': -1,
        'rect': {'x': 1366, 'y': 0, 'width': 1920, 'height': 1048},
        'deco_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
        'window_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
        'geometry': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
        'name': '2',
        'num': 2,
        'gaps': {'inner': 0, 'outer': 0},
        'window': None,
        'nodes': [
            {
                'id': 93860418434672,
                'type': 'con',
                'orientation': 'vertical',
                'scratchpad_state': 'none',
                'percent': 0.5,
                'urgent': False,
                'focused': False,
                'output': 'HDMI-1-1',
                'layout': 'splitv',
                'workspace_layout': 'default',
                'last_split_layout': 'splitv',
                'border': 'normal',
                'current_border_width': -1,
                'rect': {'x': 1366, 'y': 0, 'width': 960, 'height': 1048},
                'deco_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'window_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'geometry': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'name': None,
                'window': None,
                'nodes': [
                    {
                        'id': 93860418452384,
                        'type': 'con',
                        'orientation': 'none',
                        'scratchpad_state': 'none',
                        'percent': 0.5,
                        'urgent': False,
                        'focused': False,
                        'output': 'HDMI-1-1',
                        'layout': 'splith',
                        'workspace_layout': 'default',
                        'last_split_layout': 'splith',
                        'border': 'pixel',
                        'current_border_width': 2,
                        'rect': {
                            'x': 1376,
                            'y': 10,
                            'width': 945,
                            'height': 509
                        },
                        'deco_rect': {
                            'x': 0,
                            'y': 0,
                            'width': 0,
                            'height': 0
                        },
                        'window_rect': {
                            'x': 2,
                            'y': 2,
                            'width': 941,
                            'height': 505
                        },
                        'geometry': {
                            'x': 0,
                            'y': 0,
                            'width': 724,
                            'height': 412
                        },
                        'name': '~/Projects',
                        'title_format': ' %title ',
                        'window': 52428803,
                        'window_properties': {
                            'class': 'Alacritty',
                            'instance': 'Alacritty',
                            'title': '~/Projects',
                            'transient_for': None
                        },
                        'nodes': [

                        ],
                        'floating_nodes':[

                        ],
                        'focus':[

                        ],
                        'fullscreen_mode':0,
                        'sticky':False,
                        'floating':'auto_off',
                        'swallows':[

                        ]
                    },
                    {
                        'id': 93860418285248,
                        'type': 'con',
                        'orientation': 'none',
                        'scratchpad_state': 'none',
                        'percent': 0.5,
                        'urgent': False,
                        'focused': False,
                        'output': 'HDMI-1-1',
                        'layout': 'splith',
                        'workspace_layout': 'default',
                        'last_split_layout': 'splith',
                        'border': 'pixel',
                        'current_border_width': 2,
                        'rect': {
                            'x': 1376,
                            'y': 529,
                            'width': 945,
                            'height': 509
                        },
                        'deco_rect': {
                            'x': 0,
                            'y': 0,
                            'width': 0,
                            'height': 0
                        },
                        'window_rect': {
                            'x': 2,
                            'y': 2,
                            'width': 941,
                            'height': 505
                        },
                        'geometry': {
                            'x': 0,
                            'y': 0,
                            'width': 724,
                            'height': 412
                        },
                        'name': '~/.dotfiles',
                        'title_format': ' %title ',
                        'window': 6291459,
                        'window_properties': {
                            'class': 'Alacritty',
                            'instance': 'Alacritty',
                            'title': '~/.dotfiles',
                            'transient_for': None
                        },
                        'nodes': [

                        ],
                        'floating_nodes':[

                        ],
                        'focus':[

                        ],
                        'fullscreen_mode':0,
                        'sticky':False,
                        'floating':'auto_off',
                        'swallows':[]
                    }
                ],
                'floating_nodes':[],
                'focus':[93860418285248, 93860418452384],
                'fullscreen_mode':0,
                'sticky':False,
                'floating':'auto_off',
                'swallows':[

                ]
            },
            {
                'id': 93860418798800,
                'type': 'con',
                'orientation': 'vertical',
                'scratchpad_state': 'none',
                'percent': 0.5,
                'urgent': False,
                'focused': False,
                'output': 'HDMI-1-1',
                'layout': 'splitv',
                'workspace_layout': 'default',
                'last_split_layout': 'splitv',
                'border': 'normal',
                'current_border_width': -1,
                'rect': {'x': 2326, 'y': 0, 'width': 960, 'height': 1048},
                'deco_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'window_rect': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'geometry': {'x': 0, 'y': 0, 'width': 0, 'height': 0},
                'name': None,
                'window': None,
                'nodes': [
                    {
                        'id': 93860418425760,
                        'type': 'con',
                        'orientation': 'none',
                        'scratchpad_state': 'none',
                        'percent': 0.5,
                        'urgent': False,
                        'focused': False,
                        'output': 'HDMI-1-1',
                        'layout': 'splith',
                        'workspace_layout': 'default',
                        'last_split_layout': 'splith',
                        'border': 'pixel',
                        'current_border_width': 2,
                        'rect': {
                            'x': 2331,
                            'y': 10,
                            'width': 945,
                            'height': 509
                        },
                        'deco_rect': {
                            'x': 0,
                            'y': 0,
                            'width': 0,
                            'height': 0
                        },
                        'window_rect': {
                            'x': 2,
                            'y': 2,
                            'width': 941,
                            'height': 505
                        },
                        'geometry': {
                            'x': 0,
                            'y': 0,
                            'width': 1366,
                            'height': 736
                        },
                        'name': 'System Monitor',
                        'title_format': ' %title ',
                        'window': 54525962,
                        'window_properties': {
                            'class': 'ksysguard',
                            'instance': 'ksysguard',
                            'window_role': 'MainWindow#1',
                            'title': 'System Monitor',
                            'transient_for': None
                        },
                        'nodes': [

                        ],
                        'floating_nodes':[

                        ],
                        'focus':[

                        ],
                        'fullscreen_mode':0,
                        'sticky':False,
                        'floating':'auto_off',
                        'swallows':[

                        ]
                    },
                    {
                        'id': 93860418808208,
                        'type': 'con',
                        'orientation': 'none',
                        'scratchpad_state': 'none',
                        'percent': 0.5,
                        'urgent': False,
                        'focused': False,
                        'output': 'HDMI-1-1',
                        'layout': 'splith',
                        'workspace_layout': 'default',
                        'last_split_layout': 'splith',
                        'border': 'pixel',
                        'current_border_width': 2,
                        'rect': {
                            'x': 2331,
                            'y': 529,
                            'width': 945,
                            'height': 509
                        },
                        'deco_rect': {
                            'x': 0,
                            'y': 0,
                            'width': 0,
                            'height': 0
                        },
                        'window_rect': {
                            'x': 2,
                            'y': 2,
                            'width': 941,
                            'height': 505
                        },
                        'geometry': {
                            'x': 0,
                            'y': 0,
                            'width': 724,
                            'height': 412
                        },
                        'name': '~/.dotfiles',
                        'title_format': ' %title ',
                        'window': 50331651,
                        'window_properties': {
                            'class': 'Alacritty',
                            'instance': 'Alacritty',
                            'title': '~/.dotfiles',
                            'transient_for': None
                        },
                        'nodes': [

                        ],
                        'floating_nodes':[

                        ],
                        'focus':[

                        ],
                        'fullscreen_mode':0,
                        'sticky':False,
                        'floating':'auto_off',
                        'swallows':[

                        ]
                    }
                ],
                'floating_nodes':[],
                'focus':[93860418425760, 93860418808208],
                'fullscreen_mode':0,
                'sticky':False,
                'floating':'auto_off',
                'swallows':[]
            }
        ],
        'floating_nodes': [],
        'focus': [93860418434672, 93860418798800],
        'fullscreen_mode': 0,
        'sticky': False,
        'floating': 'auto_off',
        'swallows': []
    }
    windows = treeutils.get_leaves(workspace_tree)
    assert windows is not None



================================================
FILE: .github/FUNDING.yml
================================================
# These are supported funding model platforms

github: JonnyHaystack
liberapay: Haystack
custom: https://paypal.me/JonnyHaystack



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**System information (please complete the following information):**
 - Linux distribution: 
 - i3-resurrect version (output of `i3-resurrect --version`): 
 - i3 version (output of `i3 -v`): 
 - Python version (output of `python -V`): 

**Additional context**
Add any other context about the problem here.



================================================
FILE: .github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: enhancement
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.


