Directory structure:
└── i3run/
    ├── config.mak
    ├── i3run
    ├── i3run.1
    ├── options
    ├── docs/
    │   ├── description.md
    │   ├── environment_variables.md
    │   └── options/
    │       ├── class
    │       ├── command
    │       ├── conid
    │       ├── FORCE
    │       ├── force
    │       ├── help
    │       ├── hide
    │       ├── instance
    │       ├── mouse
    │       ├── nohide
    │       ├── rename
    │       ├── rename-class
    │       ├── rename-instance
    │       ├── rename-title
    │       ├── silent
    │       ├── summon
    │       ├── title
    │       ├── verbose
    │       ├── version
    │       └── winid
    ├── func/
    │   ├── CLEANUP.sh
    │   ├── focuswindow.sh
    │   ├── hidewindow.sh
    │   ├── launchcommand.sh
    │   ├── run_command.sh
    │   ├── sendtomouse.sh
    │   ├── ERR.sh -> ERR.sh
    │   ├── LOG.sh -> LOG.sh
    │   ├── MSG.sh -> MSG.sh
    │   └── TIMER.sh -> TIMER.sh
    ├── GNUmakefile -> Makefile
    └── share.mak -> share.mak

================================================
FILE: src/i3run/config.mak
================================================
NAME         := i3run
VERSION      := 0.2.2
CREATED      := 2017-04-20
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := Run, Raise or hide windows in i3wm
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  :=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(DOCS_DIR)/environment_variables.md \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS'

	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  echo '## OPTIONS'
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md
	  cat $(DOCS_DIR)/environment_variables.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
		  '## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3run/i3run
================================================
#!/bin/bash

: "${I3RUN_BOTTOM_GAP:=10}"
: "${I3RUN_TOP_GAP:=10}"
: "${I3RUN_LEFT_GAP:=10}"
: "${I3RUN_RIGHT_GAP:=10}"

main(){

  declare -ag _criteria   # options passed to i3list/i3get/i3viswiz
  declare -A   i3list     # globals array
  declare -g  _msgstring  # passed to i3-msg ( messy() )
  declare -ag _pass_array # helper var for storing --array option
  declare -ag _command    # command to execute
  declare -g  _array      # result of i3list

  for k in instance class title conid winid; do
    [[ ${_o[$k]} ]] || continue
    _criteria+=("--$k" "${_o[$k]}")
  done ; unset -v k

  [[ -z ${_criteria[*]} ]] \
    && ERX "please specify a criteria"

  _array=$(i3list "${_criteria[@]}")
  _pass_array=(${_o[verbose]:+--verbose} --array "$_array")
  eval "$_array"

  # shellcheck disable=SC2206
  # SC2206:  Quote to prevent word splitting/globbin.
  # the only way to win, regarding i3run --command COMMAND
  # is to not use it and do: i3run -- COMMAND , instead 
  if [[ ${_o[command]} ]] 
    then _command=(${_o[command]})
    else _command=("$@")
  fi

  # if window doesn't exist, launch the command.
  if [[ ${i3list[TWC]} ]]
    then focuswindow
    else [[ ${_o[hide]} ]] || launchcommand
  fi
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3run/i3run.1
================================================
.nh
.TH I3RUN   2022-05-22 budlabs "User Manuals"
.SH NAME
.PP
i3run - Run, Raise or hide windows in i3wm

.SH SYNOPSIS
.PP
.RS

.nf
i3run --instance|-i INSTANCE  [--hide] [--summon|-s] [--nohide|-g] [--verbose] [--silent]
i3run --class|-c    CLASS     [--hide] [--rename|-x OLD_NAME] 
i3run --title|-t    TITLE     [--hide] [--rename-instance OLD_NAME] [--rename-class OLD_NAME] [--rename-title OLD_NAME]
i3run --conid|-n    CON_ID    [--hide] [--force|-f] [--FORCE|-F] 
i3run --winid|-d    WIN_ID    [--hide] [--command|-e COMMAND] [--mouse|-m]
i3run --help|-h
i3run --version|-v

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
-F, --FORCE                    | Execute COMMAND (`--command`), even if the window already exist. 
-c, --class           CLASS    | Search for windows with the given CLASS
-e, --command         COMMAND  | execute COMMAND if window is not found  
-n, --conid           CON_ID   | Search for windows with the given CON_ID 
-f, --force                    | Execute COMMAND (`--command`), even if the window already exist. But not when hiding a window.
-h, --help                     | print help and exit  
--hide                         | always send target window to the scratchpad  
-i, --instance        INSTANCE | Search for windows with the given INSTANCE  
-m, --mouse                    | windows will be summoned to the mouse cursor  
-g, --nohide                   | Don't hide window/container if it's active.  
-x, --rename          OLD_NAME | rename window properties on creation  
--rename-class        OLD_NAME | explicitly rename the class.
--rename-instance     OLD_NAME | explicitly rename the instance. 
--rename-title        OLD_NAME | explicitly rename the title.
--silent                       | don't print the container ID of found/created window  
-s, --summon                   | summon window instead of switching workspace focus  
-t, --title           TITLE    | Search for windows with the given TITLE  
--verbose                      | More stuff is printed to stderr  
-v, --version                  | print version info and exit  
-d, --winid           WIN_ID   | Search for windows with WIN_ID  

.fi
.RE

.SS -e, --command         COMMAND
.PP
\fBExample\fP

.PP
.RS

.nf
# with --command:
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# with -- (recomended)
i3run --instance sublime_text -- subl "&&" notify-send "sublime is started"

.fi
.RE

.PP
Notice that you will need to \fIescape\fP some shell
builtins that effect the commandline (\fB\fC&&\fR, \fB\fC;\fR,
\fB\fC&\fR, \fB\fC|\fR, \fB\fC||\fR ...) in the second example.

.SS -x, --rename          OLD_NAME
.PP
If the search criteria is \fB\fC--instance\fR, the window
with instance: \fIOLDNAME\fP will get a new instance
name matching the criteria when it is created
(\fIneeds \fB\fCxdotool\fR\fP).

.PP
\fBNB\fP
.br
This option will not work reliably when using multiple
search criteria. When you want to do that instead use:
.br
\fB\fC--rename-instance , --rename-class , --rename-title\fR .

.PP
.RS

.nf
i3run --instance budswin --rename sublime_main -- subl

# when the command above is executed:
# a window with the instance name: "budswin" will be searched for.
# if no window is found the command: "subl" will get executed,
# and when a window with the instance name: "sublime_main" is found,
# the instance name of that window will get renamed to: "budswin"

# the example below, will not work properly:  
i3run --title bud --instance budswin --rename sublime_main -- subl

# it will start like the first example, but if it
# doesnt find the custom instance budswin, it will
# try to search for a window with the TITLE sublime_main

# do this instead:  
i3run --title bud --instance budswin --rename-instance sublime_main -- subl

.fi
.RE

.SH USAGE
.PP
i3run will try to find a window matching a criteria.
Criteria is specified with one or more command line options:
.br
\fB\fC--class , --instance , --title , --conid , --winid\fR
.br
All criteria specified must match, if multiple windows
match all criteria one will be chosen at random.

.PP
Depending on the state of target window different actions will apply:

.PP
.RS

.nf
Active and not handled by i3fyra     | send to scratchpad
Active and handled by i3fyra         | send container to scratchpad
Handled by i3fyra and hidden         | **show** container
Not handled by i3fyra and hidden     | **show** window
Not on current workspace             | goto workspace and focus window
Not active, not hidden, on workspace | focus window
Not found                            | execute COMMAND

.fi
.RE

.PP
Hidden in this context,  means that window is on
the scratchpad. Show in this context means,  move
window to current workspace.

.PP
With \fB\fC--nohide\fR set windows/containers will not be
sent to the scratchpad by \fBi3run\fP\&.

.PP
With \fB\fC--summon\fR windows not on current workspace
will be sent to current workspace instead of switching
workspace.

.PP
COMMAND is everything after -- , or the argument to \fB\fC--command\fR\&.

.PP
If COMMAND doesn't result in a window that matches the criteria
\fBi3run\fP will \fIget stuck\fP waiting for such a window, and it can
lead to undesired behavior.
.br
Don't do this: \fB\fCi3run --class Google-chrome -- firefox\fR

.SH ENVIRONMENT
.SS I3RUN_BOTTOM_GAP, I3RUN_RIGHT_GAP, I3RUN_LEFT_GAP, I3RUN_TOP_GAP
.PP
Distance from the screen edge to
show floating windows. This only has effect When
\fB\fC--mouse\fR option is used and the window needs to
be autoadjusted not to be rendered \fIoutisde\fP the
workspace.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3run/options
================================================
--instance|-i INSTANCE  [--hide] [--summon|-s] [--nohide|-g] [--verbose] [--silent]
--class|-c    CLASS     [--hide] [--rename|-x OLD_NAME] 
--title|-t    TITLE     [--hide] [--rename-instance OLD_NAME] [--rename-class OLD_NAME] [--rename-title OLD_NAME]
--conid|-n    CON_ID    [--hide] [--force|-f] [--FORCE|-F] 
--winid|-d    WIN_ID    [--hide] [--command|-e COMMAND] [--mouse|-m]
--help|-h
--version|-v



================================================
FILE: src/i3run/docs/description.md
================================================

i3run will try to find a window matching a criteria.
Criteria is specified with one or more command line options:  
`--class , --instance , --title , --conid , --winid`  
All criteria specified must match, if multiple windows
match all criteria one will be chosen at random.  

Depending on the state of target window different actions will apply:  

    Active and not handled by i3fyra     | send to scratchpad
    Active and handled by i3fyra         | send container to scratchpad
    Handled by i3fyra and hidden         | **show** container
    Not handled by i3fyra and hidden     | **show** window
    Not on current workspace             | goto workspace and focus window
    Not active, not hidden, on workspace | focus window
    Not found                            | execute COMMAND

Hidden in this context,  means that window is on
the scratchpad. Show in this context means,  move
window to current workspace.

With `--nohide` set windows/containers will not be
sent to the scratchpad by **i3run**.  

With `--summon` windows not on current workspace
will be sent to current workspace instead of switching
workspace.

COMMAND is everything after -- , or the argument to `--command`.  

If COMMAND doesn't result in a window that matches the criteria
**i3run** will *get stuck* waiting for such a window, and it can
lead to undesired behavior.  
Don't do this: `i3run --class Google-chrome -- firefox`



================================================
FILE: src/i3run/docs/environment_variables.md
================================================


## ENVIRONMENT

### I3RUN_BOTTOM_GAP, I3RUN_RIGHT_GAP, I3RUN_LEFT_GAP, I3RUN_TOP_GAP

Distance from the screen edge to
show floating windows. This only has effect When
`--mouse` option is used and the window needs to
be autoadjusted not to be rendered *outisde* the
workspace.



================================================
FILE: src/i3run/docs/options/class
================================================
Search for windows with the given CLASS



================================================
FILE: src/i3run/docs/options/command
================================================
execute COMMAND if window is not found  

**Example**

``` shell
# with --command:
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# with -- (recomended)
i3run --instance sublime_text -- subl "&&" notify-send "sublime is started"
```

Notice that you will need to *escape* some shell
builtins that effect the commandline (`&&`, `;`,
`&`, `|`, `||` ...) in the second example.



================================================
FILE: src/i3run/docs/options/conid
================================================
Search for windows with the given CON_ID 



================================================
FILE: src/i3run/docs/options/FORCE
================================================
Execute COMMAND (`--command`), even if the window already exist. 



================================================
FILE: src/i3run/docs/options/force
================================================
Execute COMMAND (`--command`), even if the window already exist. But not when hiding a window.



================================================
FILE: src/i3run/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3run/docs/options/hide
================================================
always send target window to the scratchpad  



================================================
FILE: src/i3run/docs/options/instance
================================================
Search for windows with the given INSTANCE  



================================================
FILE: src/i3run/docs/options/mouse
================================================
windows will be summoned to the mouse cursor  



================================================
FILE: src/i3run/docs/options/nohide
================================================
Don't hide window/container if it's active.  



================================================
FILE: src/i3run/docs/options/rename
================================================
rename window properties on creation  

If the search criteria is `--instance`, the window
with instance: *OLDNAME* will get a new instance
name matching the criteria when it is created
(*needs `xdotool`*).

**NB**  
This option will not work reliably when using multiple
search criteria. When you want to do that instead use:  
`--rename-instance , --rename-class , --rename-title` .

```shell
i3run --instance budswin --rename sublime_main -- subl

# when the command above is executed:
# a window with the instance name: "budswin" will be searched for.
# if no window is found the command: "subl" will get executed,
# and when a window with the instance name: "sublime_main" is found,
# the instance name of that window will get renamed to: "budswin"

# the example below, will not work properly:  
i3run --title bud --instance budswin --rename sublime_main -- subl

# it will start like the first example, but if it
# doesnt find the custom instance budswin, it will
# try to search for a window with the TITLE sublime_main

# do this instead:  
i3run --title bud --instance budswin --rename-instance sublime_main -- subl
```



================================================
FILE: src/i3run/docs/options/rename-class
================================================
explicitly rename the class.



================================================
FILE: src/i3run/docs/options/rename-instance
================================================
explicitly rename the instance. 



================================================
FILE: src/i3run/docs/options/rename-title
================================================
explicitly rename the title.



================================================
FILE: src/i3run/docs/options/silent
================================================
don't print the container ID of found/created window  



================================================
FILE: src/i3run/docs/options/summon
================================================
summon window instead of switching workspace focus  



================================================
FILE: src/i3run/docs/options/title
================================================
Search for windows with the given TITLE  



================================================
FILE: src/i3run/docs/options/verbose
================================================
More stuff is printed to stderr  



================================================
FILE: src/i3run/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3run/docs/options/winid
================================================
Search for windows with WIN_ID  



================================================
FILE: src/i3run/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3run/func/focuswindow.sh
================================================
#!/bin/bash

focuswindow(){

  local hvar target_container

  # prioritize "visible" containers 
  # when we get multiple matches (SUS)
  if [[ ${i3list[SUS]} = 1 || ${i3list[TWC]} = "${i3list[AWC]}" ]]; then
    target_container=${i3list[TWC]}
  elif [[ ${i3list[WTN]} = "${i3list[WAN]}" ]]; then
    target_container=$(i3viswiz "${_criteria[@]}")
  elif [[ ${i3list[WTN]} = __i3_scratch ]]; then 
    target_container=$(i3viswiz --scratchpad "${_criteria[@]}")
  fi
  
  : "${target_container:=${i3list[TWC]}}"

  [[ $target_container != "${i3list[TWC]}" ]] && {
    _array=$(i3list --conid "$target_container")
    _pass_array=(${_o[verbose]:+--verbose} --array "$_array")
    eval "$_array"
  }

  # hide target window if it is active
  # or --hide option is used
  if ((i3list[AWC] == target_container)); then
    hidewindow
  elif [[ ${_o[hide]} ]]; then
    [[ ${i3list[WTN]} != __i3_scratch ]] && hidewindow
  else # focus target window.
    # hvar can contain floating state of target
    hvar=$(i3var get "hidden${target_container}")
    if [[ -n $hvar ]]; then
      # windows need to be floating on scratchpad
      # so to "restore" a tiling window we do this
      ((hvar == 1)) && fs=enable || fs=disable
      # clear the variable
      i3var set "hidden${target_container}"
    else
      ((i3list[TWF] == 1)) && fs=enable || fs=disable
    fi
    
    if [[ -z ${i3list[TWP]} && ${i3list[WAN]} != "${i3list[WTN]}" ]]; then
      # target is not handled by i3fyra and not active
      # TWP - target window parent container name
      # target is not on active workspace
      if [[ ${i3list[WTN]} = __i3_scratch || ${_o[summon]} ]]; then
        messy "[con_id=${target_container}]"           \
              move --no-auto-back-and-forth to workspace "${i3list[WAN]}", \
              floating "$fs"
          ((i3list[TWF] && _o[mouse])) && sendtomouse
      else
        messy workspace --no-auto-back-and-forth "${i3list[WTN]}"
      fi
        
    elif [[ ${i3list[WAN]} != "${i3list[WTN]}" ]]; then
      # window is handled by i3fyra and not active
      if [[ ${i3list[WFN]} = "${i3list[WAN]}" ]]; then
        # target window is in a hidden (LHI) container
        [[ ${i3list[TWP]} =~ [${i3list[LHI]}] ]] \
          && i3fyra --force --show "${i3list[TWP]}" "${_pass_array[@]}"

      else # current ws is not i3fyra WS
        if [[ ${i3list[WTN]} = __i3_scratch || ${_o[summon]} ]]; then

          messy "[con_id=${target_container}]" \
                "move --no-auto-back-and-forth to workspace ${i3list[WAN]}," \
                "floating $fs"

          ((hvar && _o[mouse])) && sendtomouse
        else # goto target windows workspace
          # WTN == name (string) of workspace
          messy workspace --no-auto-back-and-forth "${i3list[WTN]}"
        fi
      fi
    fi

    messy "[con_id=${target_container}]" focus

   ((_o[force] + _o[FORCE] > 0)) && [[ ${_command[*]} ]] && run_command
  fi

  ((_o[silent])) || echo "${target_container}"
}



================================================
FILE: src/i3run/func/hidewindow.sh
================================================
#!/bin/bash

hidewindow() {
  # send it to the scratchpad
  if ((!_o[nohide])); then
    if [[ -z ${i3list[TWP]} ]]; then
      # keep floating state in a var
      messy "[con_id=${i3list[TWC]}]" floating enable, move scratchpad
      i3var set "hidden${i3list[TWC]}" "${i3list[TWF]}"
    else
      # if it is handled by i3fyra  hide the (A|B|C|D) container
      i3fyra --force --hide "${i3list[TWP]}" "${_pass_array[@]}" 
    fi

   ((_o[FORCE])) && [[ ${_command[*]} ]] && run_command

  else

   ((_o[force] + _o[FORCE] > 0)) && [[ ${_command[*]} ]] && run_command
  fi
}



================================================
FILE: src/i3run/func/launchcommand.sh
================================================
#!/bin/bash

launchcommand(){

  local winid conid k l
  declare -a xdtopt

  [[ $_command ]] || ERX i3run no command, no action
  
  run_command

  if   [[ -n ${_o[rename]} ]]; then

    [[ ${_criteria[0]} = '--class'    ]] && xdtopt=("--class")
    [[ ${_criteria[0]} = '--instance' ]] && xdtopt=("--classname")
    [[ ${_criteria[0]} = '--title   ' ]] && xdtopt=("--name")

    xdtopt+=("${_criteria[1]}")
    _criteria[1]=${_o[rename]}

  elif [[ -n "${_o[rename-title]}${_o[rename-class]}${_o[rename-instance]}" ]]; then

    for k in title class instance ; do

      [[ ${_o[rename-$k]} ]] || continue
      
      case "$k" in
        title    ) xdtopt+=(--name "${_o[$k]}")      ;;
        class    ) xdtopt+=(--class "${_o[$k]}")     ;;
        instance ) xdtopt+=(--classname "${_o[$k]}") ;;
      esac

      # when renaming, replace the criteria arg (--? + 1)
      # with the argument to the replace (OLD_NAME)
      for l in "${!_criteria[@]}"; do
        [[ ${_criteria[$l]} = --$k ]] && {
          _criteria[l+1]=${_o[rename-$k]} 
          break
        }
      done

    done

  fi

  [[ -n "${xdtopt[*]}" ]] && {

    read -rs winid conid \
      <<< "$(i3get "${_criteria[@]}" -yr dn --print-format '%v ')"

    ((_o[verbose])) \
      && ERM "i3run -> xdotool set_window ${xdtopt[*]} $winid"
      
    xdotool \
      set_window "${xdtopt[@]}" "$winid"       \
      set_window --overrideredirect 1 "$winid" \
      set_window --overrideredirect 0 "$winid" \
      windowunmap "$winid"                     \
      windowmap   "$winid"                           

    # need to re-get conid here because a the window
    # gets a new conid when we --overrideredirect
    conid=$(i3get -d "$winid")
  }
  
  : "${conid:=$(i3get -y "${_criteria[@]}")}"
  
  ((_o[mouse])) && sendtomouse

  messy "[con_id=$conid]" focus
  ((_o[silent])) || echo "$conid"
}



================================================
FILE: src/i3run/func/run_command.sh
================================================
#!/bin/bash

run_command() {
  [[ ${_command[*]} ]] || return
  ((_o[verbose])) && ERM "i3run -> ${_command[*]}"
  
  nohup env "${_command[@]}"  > /dev/null 2>&1 &
}



================================================
FILE: src/i3run/func/sendtomouse.sh
================================================
#!/bin/bash

sendtomouse(){
  declare -i X Y newy newx tmpx tmpy breakx breaky

  eval "$(i3list "${_criteria[@]}")"

  messy "[con_id=${i3list[TWC]}]" focus

  ((i3list[TWF])) && {
    breaky=$((i3list[WAH]-(I3RUN_BOTTOM_GAP+i3list[TWH])))
    breakx=$((i3list[WAW]-(I3RUN_RIGHT_GAP+i3list[TWW])))

    eval "$(xdotool getmouselocation --shell)"

    tmpy=$((Y-(i3list[TWH]/2)))
    tmpx=$((X-(i3list[TWW]/2))) 

    ((Y>(i3list[WAH]/2))) \
      && newy=$((tmpy>breaky
              ? breaky
              : tmpy)) \
      || newy=$((tmpy<I3RUN_TOP_GAP
              ? I3RUN_TOP_GAP
              : tmpy))

    ((X<(i3list[WAW]/2))) \
      && newx=$((tmpx<I3RUN_LEFT_GAP 
              ? I3RUN_LEFT_GAP 
              : tmpx)) \
      || newx=$((tmpx>breakx
              ? breakx 
              : tmpx))

    messy "[con_id=${i3list[TWC]}]" \
      move absolute position $newx $newy
  }
}



================================================
SYMLINK: src/i3run/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3run/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3run/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3run/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3run/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3run/share.mak -> share.mak
================================================


