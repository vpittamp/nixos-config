Directory structure:
└── budlabs-i3ass/
    ├── README.md
    ├── GNUmakefile
    ├── LICENSE
    ├── docs/
    │   ├── readme_about.md
    │   ├── readme_header.md
    │   ├── readme_install.md
    │   ├── readme_issues.md
    │   ├── readme_license.md
    │   ├── readme_links.md
    │   └── releasenotes/
    │       ├── 0next.md
    │       ├── 2018.09.12.0.md
    │       ├── 2018.09.15.0.md
    │       ├── 2018.09.20.0.md
    │       ├── 2018.09.21.0.md
    │       ├── 2019.01.11.0.md
    │       ├── 2019.01.15.0.md
    │       ├── 2019.01.30.1.md
    │       ├── 2019.02.07.4.md
    │       ├── 2019.02.19.3.md
    │       ├── 2019.03.07.md
    │       ├── 2019.03.14.4.md
    │       ├── 2019.03.14.5.md
    │       ├── 2020.01.26.md
    │       ├── 2020.08.11.md
    │       ├── 2021.05.28.md
    │       ├── 2021.08.04.md
    │       ├── 2021.08.05.md
    │       ├── 2021.08.06.2.md
    │       ├── 2021.08.06.md
    │       ├── 2021.08.25.md
    │       ├── 2021.09.01.md
    │       ├── 2021.09.05.md
    │       ├── 2021.09.11.md
    │       ├── 2021.10.16.md
    │       ├── 2021.12.07.md
    │       ├── 2022.03.12.md
    │       ├── 2022.05.20.md
    │       ├── 2022.05.21.md
    │       ├── 2022.06.05.md
    │       ├── 2022.07.21.1.md
    │       ├── 2023.06.04.md
    │       ├── 2023.07.13.md
    │       ├── 2023.08.19.md
    │       ├── 2024.04.21.md
    │       ├── 23.07.13.1.md
    │       ├── v.0.1.6.md
    │       ├── v.0.1.65.md
    │       ├── v.0.1.66.md
    │       ├── v.0.1.7.md
    │       ├── v.0.1.75.md
    │       └── v.0.1.77.md
    ├── share/
    │   ├── ERR.sh
    │   ├── LOG.sh
    │   ├── main.awk
    │   ├── Makefile
    │   ├── MSG.sh
    │   ├── share.mak
    │   └── TIMER.sh
    ├── src/
    │   ├── i3ass/
    │   │   ├── config.mak
    │   │   ├── i3ass
    │   │   ├── i3ass.1
    │   │   ├── options
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── help
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3flip/
    │   │   ├── config.mak
    │   │   ├── i3flip
    │   │   ├── i3flip.1
    │   │   ├── options
    │   │   ├── watch.sh
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── dryrun
    │   │   │       ├── help
    │   │   │       ├── json
    │   │   │       ├── move
    │   │   │       ├── verbose
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   ├── share.mak -> share.mak
    │   │   └── tests/
    │   │       ├── ref1
    │   │       ├── results
    │   │       └── tree.json
    │   ├── i3fyra/
    │   │   ├── config.mak
    │   │   ├── i3fyra
    │   │   ├── i3fyra.1
    │   │   ├── options
    │   │   ├── watch.sh
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   ├── environment_variables.md
    │   │   │   └── options/
    │   │   │       ├── array
    │   │   │       ├── clear-virtuals
    │   │   │       ├── conid
    │   │   │       ├── dryrun
    │   │   │       ├── float
    │   │   │       ├── force
    │   │   │       ├── hello
    │   │   │       ├── help
    │   │   │       ├── hide
    │   │   │       ├── layout
    │   │   │       ├── mono
    │   │   │       ├── move
    │   │   │       ├── orientation
    │   │   │       ├── show
    │   │   │       ├── speed
    │   │   │       ├── verbose
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── active_move_in_direction.sh
    │   │   │   ├── active_move_to_container.sh
    │   │   │   ├── apply_splits.sh
    │   │   │   ├── CLEANUP_.sh
    │   │   │   ├── container_create.sh
    │   │   │   ├── container_hide.sh
    │   │   │   ├── container_show.sh
    │   │   │   ├── family_create.sh
    │   │   │   ├── family_hide.sh
    │   │   │   ├── family_show.sh
    │   │   │   ├── float_toggle.sh
    │   │   │   ├── initialize_globals.sh
    │   │   │   ├── monocle.sh
    │   │   │   ├── multi_hide.sh
    │   │   │   ├── multi_show.sh
    │   │   │   ├── orientation.sh
    │   │   │   ├── sezzy.sh
    │   │   │   ├── swap_move.sh
    │   │   │   ├── varset.sh
    │   │   │   ├── virtual_position.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   ├── share.mak -> share.mak
    │   │   └── tests/
    │   │       ├── array
    │   │       ├── ref1
    │   │       └── results
    │   ├── i3get/
    │   │   ├── config.mak
    │   │   ├── i3get
    │   │   ├── i3get.1
    │   │   ├── options
    │   │   ├── watch.sh
    │   │   ├── awklib/
    │   │   │   ├── END.awk
    │   │   │   └── main.awk -> main.awk
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── active
    │   │   │       ├── class
    │   │   │       ├── conid
    │   │   │       ├── help
    │   │   │       ├── id
    │   │   │       ├── instance
    │   │   │       ├── json
    │   │   │       ├── mark
    │   │   │       ├── print
    │   │   │       ├── print-format
    │   │   │       ├── role
    │   │   │       ├── synk
    │   │   │       ├── timeout
    │   │   │       ├── title
    │   │   │       ├── titleformat
    │   │   │       ├── type
    │   │   │       ├── verbose
    │   │   │       ├── version
    │   │   │       └── winid
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── get_window.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   ├── share.mak -> share.mak
    │   │   └── tests/
    │   │       ├── benchmark
    │   │       └── test.json
    │   ├── i3gw/
    │   │   ├── config.mak
    │   │   ├── i3gw
    │   │   ├── i3gw.1
    │   │   ├── options
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── help
    │   │   │       ├── verbose
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3king/
    │   │   ├── config.mak
    │   │   ├── i3king
    │   │   ├── i3king.1
    │   │   ├── options
    │   │   ├── watch.sh
    │   │   ├── conf/
    │   │   │   └── rules
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   ├── environment_variables.md
    │   │   │   └── options/
    │   │   │       ├── apply
    │   │   │       ├── config
    │   │   │       ├── conid
    │   │   │       ├── dryrun
    │   │   │       ├── help
    │   │   │       ├── json
    │   │   │       ├── log
    │   │   │       ├── no-apply
    │   │   │       ├── no-restart
    │   │   │       ├── print-commands
    │   │   │       ├── reload
    │   │   │       ├── verbose
    │   │   │       ├── version
    │   │   │       └── winid
    │   │   ├── func/
    │   │   │   ├── apply_rules.sh
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── make_regex.sh
    │   │   │   ├── match_window.sh
    │   │   │   ├── parse_rules.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3Kornhe/
    │   │   ├── config.mak
    │   │   ├── i3Kornhe
    │   │   ├── i3Kornhe.1
    │   │   ├── options
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   ├── environment_variables.md
    │   │   │   └── options/
    │   │   │       ├── array
    │   │   │       ├── help
    │   │   │       ├── json
    │   │   │       ├── margin
    │   │   │       ├── margin-bottom
    │   │   │       ├── margin-left
    │   │   │       ├── margin-right
    │   │   │       ├── margin-top
    │   │   │       ├── oneshot
    │   │   │       ├── speed
    │   │   │       ├── verbose
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── exit_mode.sh
    │   │   │   ├── modify_floating.sh
    │   │   │   ├── modify_tiled.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3list/
    │   │   ├── config.mak
    │   │   ├── i3list
    │   │   ├── i3list.1
    │   │   ├── options
    │   │   ├── awklib/
    │   │   │   ├── descriptions.awk
    │   │   │   ├── END.awk
    │   │   │   ├── print_fyra_window.awk
    │   │   │   ├── print_window.awk
    │   │   │   ├── print_workspace.awk
    │   │   │   └── main.awk -> main.awk
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── class
    │   │   │       ├── conid
    │   │   │       ├── help
    │   │   │       ├── instance
    │   │   │       ├── json
    │   │   │       ├── mark
    │   │   │       ├── title
    │   │   │       ├── verbose
    │   │   │       ├── version
    │   │   │       └── winid
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   ├── share.mak -> share.mak
    │   │   └── tests/
    │   │       ├── 0
    │   │       ├── 1
    │   │       └── benchmarks
    │   ├── i3run/
    │   │   ├── config.mak
    │   │   ├── i3run
    │   │   ├── i3run.1
    │   │   ├── options
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   ├── environment_variables.md
    │   │   │   └── options/
    │   │   │       ├── class
    │   │   │       ├── command
    │   │   │       ├── conid
    │   │   │       ├── FORCE
    │   │   │       ├── force
    │   │   │       ├── help
    │   │   │       ├── hide
    │   │   │       ├── instance
    │   │   │       ├── mouse
    │   │   │       ├── nohide
    │   │   │       ├── rename
    │   │   │       ├── rename-class
    │   │   │       ├── rename-instance
    │   │   │       ├── rename-title
    │   │   │       ├── silent
    │   │   │       ├── summon
    │   │   │       ├── title
    │   │   │       ├── verbose
    │   │   │       ├── version
    │   │   │       └── winid
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── focuswindow.sh
    │   │   │   ├── hidewindow.sh
    │   │   │   ├── launchcommand.sh
    │   │   │   ├── run_command.sh
    │   │   │   ├── sendtomouse.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3var/
    │   │   ├── config.mak
    │   │   ├── i3var
    │   │   ├── i3var.1
    │   │   ├── options
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── help
    │   │   │       ├── json
    │   │   │       ├── verbose
    │   │   │       └── version
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   └── share.mak -> share.mak
    │   ├── i3viswiz/
    │   │   ├── config.mak
    │   │   ├── i3viswiz
    │   │   ├── i3viswiz.1
    │   │   ├── options
    │   │   ├── awklib/
    │   │   │   ├── END.awk
    │   │   │   ├── find_window.awk
    │   │   │   ├── is_container_at_pos.awk
    │   │   │   ├── listvis.awk
    │   │   │   └── main.awk -> main.awk
    │   │   ├── docs/
    │   │   │   ├── description.md
    │   │   │   └── options/
    │   │   │       ├── class
    │   │   │       ├── debug
    │   │   │       ├── debug-format
    │   │   │       ├── focus
    │   │   │       ├── gap
    │   │   │       ├── help
    │   │   │       ├── instance
    │   │   │       ├── json
    │   │   │       ├── p
    │   │   │       ├── parent
    │   │   │       ├── role
    │   │   │       ├── scratchpad
    │   │   │       ├── title
    │   │   │       ├── titleformat
    │   │   │       ├── type
    │   │   │       ├── verbose
    │   │   │       ├── version
    │   │   │       └── winid
    │   │   ├── func/
    │   │   │   ├── CLEANUP.sh
    │   │   │   ├── ERR.sh -> ERR.sh
    │   │   │   ├── LOG.sh -> LOG.sh
    │   │   │   ├── MSG.sh -> MSG.sh
    │   │   │   └── TIMER.sh -> TIMER.sh
    │   │   ├── GNUmakefile -> Makefile
    │   │   ├── share.mak -> share.mak
    │   │   └── tests/
    │   │       └── tree.json
    │   └── i3zen/
    │       ├── config.mak
    │       ├── i3zen
    │       ├── i3zen.1
    │       ├── options
    │       ├── watch.sh
    │       ├── docs/
    │       │   ├── description.md
    │       │   ├── manpage_footer.md
    │       │   └── options/
    │       │       ├── dryrun
    │       │       ├── height
    │       │       ├── help
    │       │       ├── mark
    │       │       ├── verbose
    │       │       ├── version
    │       │       ├── width
    │       │       ├── workspace
    │       │       ├── xpos
    │       │       └── ypos
    │       ├── func/
    │       │   ├── CLEANUP.sh
    │       │   ├── create_zen_workspace.sh
    │       │   ├── move_to_zen_container.sh
    │       │   ├── next_vacant_workspace.sh
    │       │   ├── tile_with_i3king.sh
    │       │   ├── unzen_container.sh
    │       │   ├── ERR.sh -> ERR.sh
    │       │   ├── LOG.sh -> LOG.sh
    │       │   ├── MSG.sh -> MSG.sh
    │       │   └── TIMER.sh -> TIMER.sh
    │       ├── GNUmakefile -> Makefile
    │       └── share.mak -> share.mak
    └── .github/
        └── ISSUE_TEMPLATE/
            └── bug_report.md

================================================
FILE: README.md
================================================
# i3ass  

commands to assist and extend the use of i3wm.

![logo](assets/i3ass-first-logo2021-05-26-300x200.png?raw=true)    

### installation

~~If you are using **Arch linux**, you can install
the i3ass package from [AUR].~~ (AUR is no longer supported, but as of writing this it still "works")

Or follow the instructions below to install from source:  

``` text
$ git clone https://github.com/budlabs/i3ass.git
$ cd i3ass
$ make
# make install
```

#### build dependencies
[GNU make], [Gawk], [bash], [GNU sed](https://www.gnu.org/software/sed/)  
[go-md2man] is needed to **re**-build the manpages (optional)

[go-md2man]: https://github.com/cpuguy83/go-md2man

#### runtime dependencies
[bash], [i3wm], [xdotool], [Gawk]  

### changelog

See the [last releasenote](docs/releasenotes/0next.md).

### usage

The table below lists the included commands. The
links go to the **[wiki]** page of each commands. 
There is also a lot of videos on the budlabs [youtube channel],
where i3ass is used and explained.

In the **[wiki]** there are also two examples on how
i3's config file can be configured to make use
of most of **i3ass**.  
(<https://github.com/budlabs/i3ass/wiki/i3-config-example>)  


script | description
|:-|:-|
[i3Kornhe] | move and resize windows gracefully  
[i3ass] | Print environment information  
[i3flip] | Tabswitching done right  
[i3fyra] | An advanced, simple grid-based tiling layout  
[i3get] | prints info about a specific window to stdout  
[i3gw] | a ghost window wrapper for i3wm  
[i3king] | window ruler  
[i3list] | list information about the current i3 session  
[i3run] | Run, Raise or hide windows in i3wm  
[i3var] | get or set a i3 variable  
[i3viswiz] | professional window focus for i3wm  
[i3zen] | zentered container, full focus  


### license

i3ass is licensed under the **MIT** license


[wiki]: https://github.com/budlabs/i3ass/wiki
[Makefile]: https://github.com/budRich/i3ass/blob/master/Makefile
[install.sh]: https://github.com/budRich/i3ass/blob/master/install.sh
[i3add]: https://github.com/budRich/scripts/i3add/
[AUR]: https://aur.archlinux.org/packages/i3ass/
[i3]: https://i3wm.org/
[i3wm]: https://i3wm.org/
[bashbud]: https://github.com/budlabs/bashbud
[i3flip]: https://github.com/budlabs/i3ass/wiki/i3flip
[i3fyra]: https://github.com/budlabs/i3ass/wiki/i3fyra
[i3get]: https://github.com/budlabs/i3ass/wiki/i3get
[i3gw]: https://github.com/budlabs/i3ass/wiki/i3gw
[i3Kornhe]: https://github.com/budlabs/i3ass/wiki/i3Kornhe
[i3list]: https://github.com/budlabs/i3ass/wiki/i3list
[i3var]: https://github.com/budlabs/i3ass/wiki/i3var
[i3run]: https://github.com/budlabs/i3ass/wiki/i3run
[i3menu]: https://github.com/budlabs/i3ass/wiki/i3menu
[i3viswiz]: https://github.com/budlabs/i3ass/wiki/i3viswiz
[i3king]: https://github.com/budlabs/i3ass/wiki/i3king
[i3ass]: https://github.com/budlabs/i3ass/wiki/i3ass
[i3zen]: https://github.com/budlabs/i3ass/wiki/i3zen
[youtube channel]: https://youtube.com/c/dubbeltumme
[rofi]: https://github.com/davatorium/rofi
[Gawk]: https://www.gnu.org/software/gawk/
[bash]: https://www.gnu.org/software/bash/
[lowdown]: https://kristaps.bsd.lv/lowdown/
[GNU make]: https://www.gnu.org/software/make/
[xdotool]: https://www.semicomplete.com/projects/xdotool/



================================================
FILE: GNUmakefile
================================================
.PHONY:               \
	all clean check     \
	wiki readme manpage \
	install uninstall   \
	install-dev uninstall-dev

default: all

.ONESHELL:
SHELL     := /bin/bash

README_LAYOUT  =         \
	docs/readme_header.md  \
	docs/readme_install.md \
	docs/readme_about.md   \
	docs/_readme_table.md  \
	docs/readme_issues.md  \
	docs/readme_license.md \
	docs/readme_links.md

ass_dirs            := $(wildcard src/*)
wiki_mds            := $(ass_dirs:src/%=wiki/doc/%.md)
wiki_src            := $(ass_dirs:%=%/.cache/wiki.md)

$(wiki_src):
	@[[ $@ =~ ^(src/[^/]+) ]] && trg=$${BASH_REMATCH[1]}
	$(MAKE) -C $$trg .cache/wiki.md

wiki: $(wiki_mds)

$(wiki_mds): wiki/doc/%.md : src/%/.cache/wiki.md
	cat $< > $@	

readme: README.md

README.md: $(README_LAYOUT)
	cat $^ > $@

docs/_readme_table.md: $(addsuffix /config.mak,$(ass_dirs))
	@{
		echo
		printf '%s\n' "script | description" "|:-|:-|"
		gawk '
			$$1 == "NAME" {name=$$3}
			$$1 == "DESCRIPTION" {
				printf ("[%s] | %s  \n", name , gensub(".+:= ","",1,$$0))
			}' $^ 
	} > $@

ass_names           := $(ass_dirs:src/%=%)

each_check          := $(ass_names:%=%-check)
each_all            := $(ass_names:%=%-all)
each_clean          := $(ass_names:%=%-clean)
each_manpage        := $(ass_names:%=%-manpage)
each_install        := $(ass_names:%=%-install)
each_install-dev    := $(ass_names:%=%-install-dev)
each_uninstall      := $(ass_names:%=%-uninstall)
each_uninstall-dev  := $(ass_names:%=%-uninstall-dev)

each_each := $(each_check) $(each_all) $(each_clean) $(each_manpage) $(each_install) $(each_install-dev) $(each_uninstall) $(each_uninstall-dev)

check:         $(each_check)
all:           $(each_all)
clean:         $(each_clean)
manpage:       $(each_manpage)
install:       $(each_install)
install-dev:   $(each_install-dev)
uninstall:     $(each_uninstall)
uninstall-dev: $(each_uninstall-dev)

$(each_each):
	@v=$@ action=$${v#*-} name=$${v%%-*}
	$(MAKE) -C src/$$name $$action



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2017-2023, budRich

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: docs/readme_about.md
================================================

### changelog

See the [last releasenote](docs/releasenotes/0next.md).

### usage

The table below lists the included commands. The
links go to the **[wiki]** page of each commands. 
There is also a lot of videos on the budlabs [youtube channel],
where i3ass is used and explained.

In the **[wiki]** there are also two examples on how
i3's config file can be configured to make use
of most of **i3ass**.  
(<https://github.com/budlabs/i3ass/wiki/i3-config-example>)  




================================================
FILE: docs/readme_header.md
================================================
# i3ass  

commands to assist and extend the use of i3wm.

![logo](assets/i3ass-first-logo2021-05-26-300x200.png?raw=true)    



================================================
FILE: docs/readme_install.md
================================================

### installation

~~If you are using **Arch linux**, you can install
the i3ass package from [AUR].~~ (AUR is no longer supported, but as of writing this it still "works")

Or follow the instructions below to install from source:  

``` text
$ git clone https://github.com/budlabs/i3ass.git
$ cd i3ass
$ make
# make install
```

#### build dependencies
[GNU make], [Gawk], [bash], [GNU sed](https://www.gnu.org/software/sed/)  
[go-md2man] is needed to **re**-build the manpages (optional)

[go-md2man]: https://github.com/cpuguy83/go-md2man

#### runtime dependencies
[bash], [i3wm], [xdotool], [Gawk]  



================================================
FILE: docs/readme_issues.md
================================================




================================================
FILE: docs/readme_license.md
================================================

### license

i3ass is licensed under the **MIT** license



================================================
FILE: docs/readme_links.md
================================================


[wiki]: https://github.com/budlabs/i3ass/wiki
[Makefile]: https://github.com/budRich/i3ass/blob/master/Makefile
[install.sh]: https://github.com/budRich/i3ass/blob/master/install.sh
[i3add]: https://github.com/budRich/scripts/i3add/
[AUR]: https://aur.archlinux.org/packages/i3ass/
[i3]: https://i3wm.org/
[i3wm]: https://i3wm.org/
[bashbud]: https://github.com/budlabs/bashbud
[i3flip]: https://github.com/budlabs/i3ass/wiki/i3flip
[i3fyra]: https://github.com/budlabs/i3ass/wiki/i3fyra
[i3get]: https://github.com/budlabs/i3ass/wiki/i3get
[i3gw]: https://github.com/budlabs/i3ass/wiki/i3gw
[i3Kornhe]: https://github.com/budlabs/i3ass/wiki/i3Kornhe
[i3list]: https://github.com/budlabs/i3ass/wiki/i3list
[i3var]: https://github.com/budlabs/i3ass/wiki/i3var
[i3run]: https://github.com/budlabs/i3ass/wiki/i3run
[i3menu]: https://github.com/budlabs/i3ass/wiki/i3menu
[i3viswiz]: https://github.com/budlabs/i3ass/wiki/i3viswiz
[i3king]: https://github.com/budlabs/i3ass/wiki/i3king
[i3ass]: https://github.com/budlabs/i3ass/wiki/i3ass
[i3zen]: https://github.com/budlabs/i3ass/wiki/i3zen
[youtube channel]: https://youtube.com/c/dubbeltumme
[rofi]: https://github.com/davatorium/rofi
[Gawk]: https://www.gnu.org/software/gawk/
[bash]: https://www.gnu.org/software/bash/
[lowdown]: https://kristaps.bsd.lv/lowdown/
[GNU make]: https://www.gnu.org/software/make/
[xdotool]: https://www.semicomplete.com/projects/xdotool/



================================================
FILE: docs/releasenotes/0next.md
================================================
## experimenta i3fyra --mono 
Monocle mode toggle. Will keep if it doesn't break too much stuff.
Some of the logic regarding "family memory" relating to split memory
was changed. I have not noticed anything broken, yet.

## support for i3fyra --orientation toggle
(#218 @1ntronaut )


## i3king GLOBAL/DEFAULT rules without a criteria
was never parsed. big thanks to @TimRegeant && @1ntronaut
for reporting and helping out with this (#214)

## Don't trigger i3king rules on float toggle on non-i3fyra workspace

## i3ass command now includes i3run, i3term, i3menu and dmenu
(#218 @1ntronaut )



================================================
FILE: docs/releasenotes/2018.09.12.0.md
================================================
### 2018.09.12.0

Added [focusvisible] and [getvisible].  
[i3get] now allows multiple search criterion and longoptions:  

```shell
i3get --class Thunar --instance thunar --ret wtf
```

The command above will print **w**orkspace, **t**itle and **f**loatstate of the first found window that have **both** the class *Thunar* and instance *thunar*.  



================================================
FILE: docs/releasenotes/2018.09.15.0.md
================================================
### 2018.09.15.0

[i3Kornhe]
- refactored code
- fixed issue with title format not reseting
- add longoption support (`--speed`)



================================================
FILE: docs/releasenotes/2018.09.20.0.md
================================================
### 2018.09.20.0

# [i3get] BREAKING CHANGE
leading and trailing doublequotes are now trimmed from all output (affecting title and titleformat), this might break script which include the quotes in f.i. regex searched.  

[i3list]
fixed issue #32 related to getting workspace name and number of the active workspace if it is empty.



================================================
FILE: docs/releasenotes/2018.09.21.0.md
================================================
### 2018.09.21.0

[i3list]
fixed issue #32 for real (*i hope ;*) related to getting workspace name and number of the active workspace if it is empty.



================================================
FILE: docs/releasenotes/2019.01.11.0.md
================================================
### 2019.01.11.0

Extreme refactoring edition.  
The project now uses [bashbud] as the backbone for code and documentation organization. A lot of changes "under the hood" and to documentation, but few functional changes except:  

A new command will get installed, `i3ass`, when executed a list of installed i3 ass scripts, their version number and dependencies will get printed. Please include this output in any submitted issues.

[i3fyra] Should now work well with the latest (4.16) version of [i3].
A new environment variable can be set for i3fyra, **I3FYRA_ORIENTATION**, setting this to 'vertical' changes the layout, read more in the [wiki].  

[i3viswiz] No includes `--focus` option, that will replace the previous `focusvisible` command. Likewise specifying a search option (`--title`, `--instance`, `--parent`, `--class`, `--winid`, `--parent`, `--titleformat`) and a search string, will return the **CON_ID** of any found visible window, replacing `getvisible` command. If no search string is passed, a list of all visible tiles windows and a string representing the search option will be displayed.

EXAMPLE
-------

```text
i3viswiz --class
trgcon=94759781247616 trgx=0 trgy=0 wall=none trgpar=A sx=0 sy=0 sw=1080 sh=1920
* 94759781247616 x: 0     y: 0     w: 514   h: 399   | URxvt
- 94759780179248 x: 515   y: 0     w: 564   h: 399   | Pavucontrol
- 94759779366272 x: 0     y: 400   w: 1079  h: 1519  | Sublime_text
```

Starting with this release a [wiki] for i3ass is available here on github.



================================================
FILE: docs/releasenotes/2019.01.15.0.md
================================================
### 2019.01.15.0

Removed execution of `i3ass` command from the **Makefile**,
and added `make uninstall` to the **PKGBUILD** on [AUR]. To improve the installation process. (*thanks to Johan for reporting issue with i3ass command in makefil*).



================================================
FILE: docs/releasenotes/2019.01.30.1.md
================================================
### 2019.01.30.2

Fixed two bugs (#46,#47) in [i3fyra] and [i3list].
`--hide` in [i3fyra] now works again. The issue in [i3list]
was affecting targeted windows and their floating state, 
resulting in unpredictable behavior when 
fi summoning a window from the scratchpad. 
All should be good now thanks to user **APotOfSoup**
who reported and found the solution to both these issues.
(the cause was the major refactoring and adaptation of the codebase to the `bashsbud` framework, introduced in the last release).



================================================
FILE: docs/releasenotes/2019.02.07.4.md
================================================
### 2019.02.07.06

Added [i3menu] which is an improved version of the script `oneliner` that has been available in the **budlabs organization** for some time. I figured i include it with **i3ass** instead, since it is very *i3 focused*, see the wiki for more info.  

Refactored [i3list] to make it easier to manage and fixed a small issue that resulted in splits being reported with the wrong size if the *main container* of the split was hidden. The issue had never caused any serious issues, but now that it is fixed I experience faster creation of the [i3fyra] layout, it also made some functions in the new script [i3menu] work as expected.




================================================
FILE: docs/releasenotes/2019.02.19.3.md
================================================
### 2019.02.19.3

Refactored the code for [i3get] to have a standalone `awk` file and also added better handling of regular expressions when they are passed as search strings to [i3get]. (*this might break some scripts that used esacped quotes and backslashes in the search strings*). You can now write a search like this: `i3get --instance '^sublime$` the "old" way of doing it would look something like this: `i3get -i "sublime\"\$"` and was more unreliable.  

[i3list] had one more of those small issues not reporting the correct screenheight in some cases, but it is now fixed.

All man pages had a typo that said "Linx manual" instead of "Linux manual" that is fixed now.





================================================
FILE: docs/releasenotes/2019.03.07.md
================================================
### 2019.03.07.1

grand reorganization of i3ass. created a new GitHub organization: i3ass-dev.
Where all the i3ass scripts have it's own repo. It's on these repos development will be done from now on. This (budlabs/i3ass), will be the repo where all issues should be reported host the wiki and the installable version of i3ass. I think this will be great.

This repo also contains two fixes to issues reported by APotOfSoup:
i3get reported wrong info when criteria was **con_id**. and [i3flip] was not moving containers at all (the latter issue is only partially fixed, moving in containers that are not tabbed or stacked with i3flip is temporarily disabled)

more [i3get] fixes: there where some issues related to special characters in title of a window, and a bug that made all class searching and fetching not work. both fixed now.




================================================
FILE: docs/releasenotes/2019.03.14.4.md
================================================
### 2019.03.14.4

[i3get]  
- fix: issue in resulting in wrong conid being returned.  

[i3menu]  
- fix: removed extra row in vertical menus. 
- fix: less twitchy moving of menu when invoked with mouse and off screen. 
- add: negative position argument for xpos and ypos

**example**  
```
echo list | i3menu --xpos -10 --ypos -20 --width 200 --orientation vertical
this will result in a menu displayed at a position calculated from
the right and bottom edges of the screen.
x=(screenwidth-(menuwidth+xpos))
y=(screenheight-(menuheight+ypos))

if you really want the menu to appear at a "real" negative coordinate (to the left of the left screen edge or above the top), use: --xoffset or --yoffset:

echo list | i3menu \
    --xpos -0 \
    --ypos 0 \
    --width 200 \
    --orientation vertical \
    --yoffset -20 \
    --xoffset 30

 this would place the "top right corner" of the menu, 20 pixels above the active screen and 30 pixels to the right of the active screen.

```








================================================
FILE: docs/releasenotes/2019.03.14.5.md
================================================
### 2019.03.14.5

[i3menu]  
- fix: improved autopositioning (negative xoffset works), less delay when invoked by mouse. 
- removed: test notifications.




================================================
FILE: docs/releasenotes/2020.01.26.md
================================================
### 2020.01.26.5

[i3menu]  
- added `sleep .05` before reading from STDIN. Hopefully fixes issue with list not getting populated.
- Added `XDG_CONFIG_HOME` environment variable default.

[i3run]
- added `--force` and `--FORCE` options. When enabled `command` will get executed even if the window exist.




================================================
FILE: docs/releasenotes/2020.08.11.md
================================================
### 2020.08.11

#### [i3flip]

We now use the output of **i3viswiz** instead of a custom AWK script. This made everything more reliable and `--move` function now works as expected in all types of layouts, (*not just tabbed and stacked as before*). Also added `--json`, `--verbose` and `--dryrun` options.

#### [i3fyra]

Now keeps track of the *virtual position* of a window. What this means is that if you have the following window rule defined in your **i3 config file**:  

```
for_window [instance=irssi class=URxvt] focus;exec --no-startup-id i3fyra --move A
```

And spawn a window matching the criteria it will get *moved* to the A container, which by default is the top-left container.  

```
AAB
AAD
CCD
```

Just as before the containers can be toggled and swapped by using `i3fyra --move DIRECTION` (where direction is up,down,left or right). And if the A container would have focus, and we execute `--move left` it would hide the B and D containers:

```
AAA
AAA
CCC
```

If we in this state would execute `--move right` (while the A container is focused), it would move the A and C container to the right and show the B and D containers to the left, but i3fyra will also internally rename all the containers:  

```
ABB
ABB
CDD
```

This used to mean that if we now would spawn a window matching our previously defined window rule, it would still get placed in the top-left container. This is where things are different now. In **i3list** there are four new keys, `[VPA],[VPB],[VPC] and [VPD]` which contains a number between zero and three (0-3). If i3list would get executed with the scenario above we would get the following results:  

```
i3list[VPA]=1
i3list[VPB]=0
i3list[VPC]=3
i3list[VPD]=2
```

the integers corresponds to the index of the hypothetical array `a=([0]=A [1]=B [2]=C [3]=D)`, and with this information we can see that when we want to send a window to container A, we test the virtual position, and see that A is positioned at 1 (*B*), be placed in **B** instead. In most cases this is the desired result, but sometimes it isn't, and for those cases one can use the `--force` option (which is new) to ignore the virtual positions. But this is probably nothing that anyone needs to worry about, and is more or less only used internally in **i3fyra**, **i3menu** and **i3run**. This transformation to virtual positions of the containers also works with the `--layout` option.

A lot of performance and stability improvements has been done in this update, and toggling layouts and containers now works much better and predictable.  

**Removed**  `--target` option. I found myself never using and it just created awkward cornercase issues.  

**Added** `--force`, `--array`, `--verbose` and `--dryrun` options.

#### [i3get]
Now uses *one* (well, sometimes two ;) single regular expression test in bash instead of parsing the json with awk, this made the script twice as fast and also, imo, easier to maintain and extend. I also added two new `--print` options, `s` for sticky status, and `e` for fullscreen status. But the most important change is done to the `--synk` functionality, which now uses `i3-msg -t subscribe` instead of a `while true; do sleep 10 ...`, and it makes everything much more responsive while at the same time being so much more efficient and nice on system recourses. Some output is different for example "marks" will now print the whole *JSON list* (`["mark1","mark2"...]`), previous behavior was to only show the first mark unqouted. If no value is found for a requested output (`--print`) a line looking like:  
`--i3get could not find: m`  
will be printed, previous behavior was to skip the line i think this new behavior is better especially if one relies on the order of the output lines.

#### [i3Kornhe]

fixed typo related issue that caused windows not being moved correctly. All types of containers are now resized and moved in pixel (px) unit. When **i3fyra** is executed from this script, the `--array` option is used.

#### [i3list]

No big changes to the script. Added `--json` options and watch script to help testing and development. As well as a few new keys to the output array:  

``` shell
i3list["XAB"] # family AB workspace
i3list["XAC"] # family AC workspace
i3list["XCD"] # family CD workspace
i3list["XBD"] # family BD workspace

i3list["VPA"] # virtual position A
i3list["VPB"] # virtual position B
i3list["VPC"] # virtual position C
i3list["VPD"] # virtual position D
```

#### [i3menu]

Added support for i3fyras virtual positions.

#### [i3run]

Only change since last version is to use `i3fyra --force --array ARRAY` to override the new virtual positions which are not needed with i3run because it already figures out the correct container.

#### [i3viswiz]

Support for `--json` option. A lot more information is printed to the first line, to make things easier for **i3fyra** and **i3flip**.



================================================
FILE: docs/releasenotes/2021.05.28.md
================================================
### [i3viswiz]

Now works correctly with multiple active monitors.  

#### focusing back and forth in the opposite directions feels more intuitive

When **i3viswiz** is used to shift focus in a
direction (left, right, up, down) the current
container ID is noted (`i3var set`). This is done
so that the next time we focus in a direction we
will test if the saved ID is adjacent to the
current container at the searched direction and
focus that if it is the case.


#### less noisy output

when **i3viswiz** is used to output text, it by default
only prints a table representing the visible windows.
It now also prints the workspace number.
And all visible windows from all workspaces not just
the active one. Example:  

```text
$ i3viswiz --instance

* 94475856575600 ws: 1 x: 0     y: 0     w: 1558  h: 410   | termsmall
- 94475856763248 ws: 1 x: 1558  y: 0     w: 362   h: 272   | gl
- 94475856286352 ws: 1 x: 0     y: 410   w: 1558  h: 643   | sublime_main
- 94475856449344 ws: 1 x: 1558  y: 272   w: 362   h: 781   | thunar-lna
```

In previous versions of **i3viswiz** the first
line of this output contained additional
information that is being used by other **i3ass**
scripts. That info is still available, but the
user needs to use the new `--debug VARLIST`
option,  to get that info. See the manpage or
`--help` for more info.


### [i3flip]

Use a lock file to make sure we don't "double
execute" the script. Updated to work with new
version of **i3viswiz**.

### [i3fyra]

the value of the environment
variable, **I3FYRA_WS**, which is used to declare
which workspace to be used for **i3fyra**. Is now
checked against a workspace name instead of a
workspace number.

`i3-msg open` is not used  in **i3fyra** anymore,
this shuold make the experience smoother and the
creation of new containers faster.

### [i3Kornhe]

Added 5 new commanline options to set the
screenmargin size when moving windows in
direction [1-9].

Removed the use of `i3-msg open` and use a more
robust method for keeping track of the active
window, previous versions someimes changed the
titleformat of the wrong windows becuase of the
old method.

### [i3list]

It is now possible to use multiple criteria for windows.

The output is printed in a better organized way.  
Two new keys added to the output array:

```
i3list["RID"] # root container id
i3list["ORI"] # i3fyra orientation
```

### [i3menu]

Improved the way i3menu reads from STDIN.
Large lists (10000+ lines) loads much faster now.

### [i3var]

Add variables as marks on the root container
instead of creating separate empty windows with
`i3-msg open` for each mark.




================================================
FILE: docs/releasenotes/2021.08.04.md
================================================
### [i3king]

New script for managing window rules.

### [i3viswiz]

if the setting "focus_wrapping" is set
to "workspace" in the i3config. i3viswiz will
wrap the focus only inside the currenttly
focused workspace instead of the whole work
area (other monitors).

The setting has to be present in the active config
before the first i3viswiz invokation.

To force this behavior otherwise, issue the following
command:  
`i3var set focus_wrap workspace`

Or to disable it:  
`i3var set focus_wrap normal`


### [i3menu]

Fixed issue where empty STDIN got treated as a list.

### [i3run]

Only change since last version is to use
`i3fyra --force --array ARRAY` to override the
new virtual positions which are not needed with
i3run because it already figures out the correct
container.





================================================
FILE: docs/releasenotes/2021.08.05.md
================================================
### [i3king]

Fixed issue with default and global rules that
didn't have blacklists. 


================================================
FILE: docs/releasenotes/2021.08.06.2.md
================================================
### [i3king]

Changed the resart behaviour. So i3king will now
try to restart whenever the IPC socket is broken,
which happens on f.i. i3 crashes.  

New commandline option: `--no-apply`, if set i3king
will not automatically try to apply rules when it
restarts.

This update was caught on tape, and can be seen at youtube:  
[i3wm RED BOX OF DEATH ... DEFEATED!!!! TKO](https://www.youtube.com/watch?v=GQSZq6tC2AQ)


================================================
FILE: docs/releasenotes/2021.08.06.md
================================================
### [i3king]

Added two new commandline options:  
`--apply` and `--no-restart`  
We now handle the restart signal from i3 IPC,
when that happens, all windows are matched against
the rules and i3king will automatically get restarted.

### [i3get]

added `y` as an argument for `--return`. It will
print the **window_type** of the current window.

### [i3fyra]

New commanline option `--conid`


================================================
FILE: docs/releasenotes/2021.08.25.md
================================================
### [i3Kornhe]

Reworked the script to now use a FIFO, which made
moving and resizing a lot more responsive with no
lag and much less stuttering.

### [i3viswiz]

Added debug vars for active window geometry (`ax,ay,aw,ah`).
And active workspace geometry (`sx,sy,sw,sh`)

### [i3king]

new options: `--conid`, `--print-commands`.  
`--conid CONID` will match a single window against the
rules and exit. `--print-commands` will print the commands
instead of executing them. 

**ON_CLOSE** directive added. Rules prefixed like this
will get triggered when windows are closed.

### [i3run]

Commands can now be entered after `--`.
The old way of specifying the command: (`--command|-e`)

``` shell
# old way
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# new way
i3run --instance sublime_text -- subl "&&" notify-send "sublime is started"
```

---

Fixed issue where windows had the wrong floating
state when being sent across workspaces (#99).

### [i3list]

Added ABW and TBW keys to output, with active/target
windows border width.

Fixed issue where wrong workspace ID was reported
on empty workspaces. Also if workspace is empty
now container/window info will NOT get printed.

### [i3fyra]

When using `--float` to toggle a floating window
to be tiled, we check if i3king is running and
if the window matches any of the rules. If a rule
matches the corresponding command is executed instead
of *just* making the window tiled.

### [i3menu]

Added `--list-directory DIRECTORY` option.
It is a shortcut to make a menu listing the filenames
in DIRECTORY and printing the full path to stdout.

### [i3get]

fixed issue where `--synk` option caused
the script to halt until a window event occured.



================================================
FILE: docs/releasenotes/2021.09.01.md
================================================
Corrected a typo in i3viswiz that prevented focus
switching with floating windows to work properly.

i3Kornhe bugfix patch applied. resizing tiled
windows should now work fine.

Fixes an issue that made i3viswiz to get stuck and
not working if there was no mark on the
rootcontainer.

Discovered that in rare cases a fifo could be left
from i3Kornhe when the i3session terminates. This
caused i3Kornhe to not work on the next start, and
this should be fixed now.

Fixes two issues related to i3fyra. There where
some issues recognising the i3fyra workspace if
the workspace had escaped double quotes. When a
new container (A|B|C|D) was created by moving a
window from an already existing container. the new
container was not marked and placed correctly. Its
fixed now.



================================================
FILE: docs/releasenotes/2021.09.05.md
================================================
#### [i3fyra]

prevent i3fyra_ws variable getting set when making
a tiled window floating with `--float`.

issue where moving tiled windows on the
i3fyra workspace that wasn't part of the layout
(ABCD), didn't work.

There where some issues recognising the i3fyra
workspace if the workspace had escaped double
quotes. When a new container (A|B|C|D) was created
by moving a window from an already existing
container. the new container was not marked and
placed correctly. 

#### [i3viswiz]

Corrected a typo that prevented focus switching
with floating windows to work properly.

got stuck and not working if there was no mark on
the rootcontainer.

#### [i3Kornhe]

Discovered that in rare cases a fifo could be left
from i3Kornhe when the i3session terminates. This
caused i3Kornhe to not work on the next start, and
this should be fixed now.

i3Kornhe bugfix patch applied. resizing tiled
windows should now work fine.





================================================
FILE: docs/releasenotes/2021.09.11.md
================================================
#### [i3king]

Added support for **window_role** criteria.

Changed internal field separator to US (x1F).
This will fix issues related to window properties
containg the old field separator (`:`).

Fixed issue where windows whose target properties
contained a hyphen (`-`) wasn't recognized by 
GLOBAL or DEFAULT rules.

Sending USR1 to the i3king process will restart
i3king. Hint: `kill -USR1 $(< "$XDG_RUNTIME_DIR/i3ass/i3king.pid")`



================================================
FILE: docs/releasenotes/2021.10.16.md
================================================
#### [i3zen]

Re-worked and re-added this script. It puts the
currently focused window in a floating, but tabbed
container on a *fresh* workspace. No ghostwindows,
works good with multiple workspaces. See the
[wiki](https://github.com/budlabs/i3ass/wiki/i3zen)
or manpage for more info.

#### [i3king]

Added `--winid` option.  
The new `window_icon_padding` property is now handled
so it works with the latest version of i3wm (4.20).

#### [i3run]

Fixed issues related to named workspaces always having
the same workspace number (-1) as the scratchpad.

Added `--verbose` option.

#### [i3list]

Multiple search criteria works well now. 

Added new keys:  

``` shell
i3list[APA] # Active Window parent ID
i3list[TPA] # Target Window parent ID
```



================================================
FILE: docs/releasenotes/2021.12.07.md
================================================
### 2021.12.07

#### [i3get]

New commandline option `--print-format` . The default
print-format is `%v\n` :  

``` shell
$ i3get --print wtf

1
/dev/pts/7
user_off

# ----

$ i3get --print wtf --print-format '[%k] :: %v '

[ws number] :: 1 [title] :: /dev/pts/7 [floating] :: user_off 

# ---

$ read -r ws title float < <(i3get --print wtf --print-format '%v ')
$ echo "$float"

user_off

```

## [i3run]

New commandline option `--hide` . When used target
window will be sent to the scratchpad.

## [i3list]

Better support for multiple criteria.

## [i3viswiz]

New commandline option `--scratchpad` will search
*visible* windows on the scratchpad instead of the
focused workspace. This is probably only usfeful
if there are tabbed or stacked containers on the
scratchpad with multiple windows that shares a property.

### BREAKING CHANGE

The commandline options: `--title`,
`--class`,`--instance`, `--titleformat`, `--type`,
`--winid`, `--parent`, `--role` must be used with 
an argument. It used to be possible to not add an
argument (criteria), that made i3viswiz print a
table of the visible windows and the named option
in the last column. It is still possible to achieve
this by using the argument **LIST**  

``` shell
i3viswiz --class LIST
* 94144799082304 ws: 1 x: 0     y: 0     w: 1570  h: 413   | URxvt
- 94144797396432 ws: 1 x: 0     y: 413   w: 1570  h: 644   | Subl
- 94144810244944 ws: 1 x: 1570  y: 0     w: 350   h: 252   | mpv
- 94144798588784 ws: 1 x: 1570  y: 252   w: 350   h: 805   | Leafpad
```

The reason for this change is that it is now possible
to use multiple criterion with i3viswiz.




================================================
FILE: docs/releasenotes/2022.03.12.md
================================================
## 2022.03.12

#### [i3Kornhe]

New option: `--oneshot`  To bypass the need of
being in/entering *sizemode*. To illustrate have
a floating window focused and then try:  
`i3Kornhe move --oneshot 6`  

#### [i3menu]  

Fixed issue where directory was printed even if
nothing was selected with `--list-directory`.

Minimize the use of **eval** in the script. Remove
functionality of `--fallback` option.


#### [i3get]

New commandline option `--print-format` . The default
print-format is `%v\n` :  

``` shell
$ i3get --print wtf

1
/dev/pts/7
user_off

# ----

$ i3get --print wtf --print-format '[%k] :: %v '

[ws number] :: 1 [title] :: /dev/pts/7 [floating] :: user_off 

# ---

$ read -r ws title float < <(i3get --print wtf --print-format '%v ')
$ echo "$float"

user_off

```

#### [i3fyra]
New option `--orientation vertical|horizontal`  
*rotates* the main split.  

Fixed a bug with virtual positions getting the wrong names.
Added option `--clear-virtuals` to force clear virtual positions.

#### [i3run]

New option `--hide` . When used target
window will be sent to the scratchpad.

#### [i3list]

Better support for multiple criteria.
Fixed issue where the wrong workspace was reported
if the workspace was empty.

#### [i3viswiz]

New option `--scratchpad` will search
*visible* windows on the scratchpad instead of the
focused workspace. This is probably only usfeful
if there are tabbed or stacked containers on the
scratchpad with multiple windows that shares a property.

##### BREAKING CHANGE

The commandline options: `--title`,
`--class`,`--instance`, `--titleformat`, `--type`,
`--winid`, `--parent`, `--role` must be used with 
an argument. It used to be possible to not add an
argument (criteria), that made i3viswiz print a
table of the visible windows and the named option
in the last column. It is still possible to achieve
this by using the argument **LIST**  

``` shell
i3viswiz --class LIST
* 94144799082304 ws: 1 x: 0     y: 0     w: 1570  h: 413   | URxvt
- 94144797396432 ws: 1 x: 0     y: 413   w: 1570  h: 644   | Subl
- 94144810244944 ws: 1 x: 1570  y: 0     w: 350   h: 252   | mpv
- 94144798588784 ws: 1 x: 1570  y: 252   w: 350   h: 805   | Leafpad
```

The reason for this change is that it is now possible
to use multiple criterion with i3viswiz.

[wiki]: https://github.com/budlabs/i3ass/wiki
[Makefile]: https://github.com/budRich/i3ass/blob/master/Makefile
[install.sh]: https://github.com/budRich/i3ass/blob/master/install.sh
[i3add]: https://github.com/budRich/scripts/i3add/
[AUR]: https://aur.archlinux.org/packages/i3ass/
[i3]: https://i3wm.org/
[i3wm]: https://i3wm.org/
[bashbud]: https://github.com/budlabs/bashbud
[i3flip]: https://github.com/budlabs/i3ass/wiki/i3flip
[i3fyra]: https://github.com/budlabs/i3ass/wiki/i3fyra
[i3get]: https://github.com/budlabs/i3ass/wiki/i3get
[i3gw]: https://github.com/budlabs/i3ass/wiki/i3gw
[i3Kornhe]: https://github.com/budlabs/i3ass/wiki/i3Kornhe
[i3list]: https://github.com/budlabs/i3ass/wiki/i3list
[i3var]: https://github.com/budlabs/i3ass/wiki/i3var
[i3run]: https://github.com/budlabs/i3ass/wiki/i3run
[i3menu]: https://github.com/budlabs/i3ass/wiki/i3menu
[i3viswiz]: https://github.com/budlabs/i3ass/wiki/i3viswiz
[i3king]: https://github.com/budlabs/i3ass/wiki/i3king
[i3zen]: https://github.com/budlabs/i3ass/wiki/i3zen
[youtube channel]: https://youtube.com/c/dubbeltumme



================================================
FILE: docs/releasenotes/2022.05.20.md
================================================
### 2022.05.20

#### bashbud

Many improvements to the build steps.
Manpages are included so no need for manpage generator
as dependency.

#### [i3list]
NEW KEY: `i3list[SUS]`  
contains the number of containers matching all criteria

#### [i3run]
When xdotool is used to rename a window class/instance
the window gets a new `container_id`, and now that
new id is reported instead of the old.

don't use eval when executing commands. 



================================================
FILE: docs/releasenotes/2022.05.21.md
================================================
### 2022.05.21

#### bashbud

fixed issue reported in #170, that made all scripts 
broken (tried to start main() passing `@$` instead of `$@`).

Fixed issue that made all programs look like they 
where updated on the installation data.



================================================
FILE: docs/releasenotes/2022.06.05.md
================================================
#### i3fyra

Added "redo" functionality to `--layout`:  
`i3fyra --layout redo`

#### i3list

New key: **RED**, contains the last layout applied
with `i3fyra --layout`. Needed for `i3fyra --layout redo`.



================================================
FILE: docs/releasenotes/2022.07.21.1.md
================================================
#### i3king

**TITLE** new rule type

Triggers on new windows and title change.
Always execute `title_format NEW_TITLE`

Instead of command /REGEX/ TEMPLATE is assumed
TEMPLATE can use `$1,$2,$3...` to access capture groups
from the REGEX.'








#### i3ass

Fixed an issue in `share/main.awk` . Titles containing
a colon (`:`) character where not being captured by
f.i. `i3get -r o`. #174 thanks @DominikMarcinowski

#### i3run

Added `--silent` option

#### i3king

fixed issue where commented lines ending with backslash
concatenated the next line.  

added support for `$ROLE and $TYPE` variables in config.

#### i3get

added `--timeout SECONDS` option. To adjust the timeout
before `--synk` stops waiting for a window (default 60s)





================================================
FILE: docs/releasenotes/2023.06.04.md
================================================
#### 2023.06.04

[i3menu]  

has been rewritten to use a custom dmenu fork instead
of rofi. i3menu is no longer part of i3ass repository
and now lives in it's own repo.



================================================
FILE: docs/releasenotes/2023.07.13.md
================================================
[i3ass]

A *"new"* command, that prints environment information.

[i3list]  

Fixed an issue where i3fyra workspace couldn't be
seen if it wasn't the currently active workspace (#180)

[i3fyra]  

Fixed a typo that made I3FYRA_MAIN_CONTAINER be ignored

[i3king]  

Fixed an issue where commands where not printed
when `--print-commands` was used (i3fyra)

Account for `"actual_deco_rect":` in JSON, not doing
this made it so some windows never triggered rules



================================================
FILE: docs/releasenotes/2023.08.19.md
================================================
#    WE STRICT NOW
###  2023.08.19

Parsing of commandline arguments are stricter
for the following commands:  
 - `i3fyra`
 - `i3Kornhe`
 - `i3viwiz`
 - `i3flip`

The change is related to the issue (#183).
Before this patch f.i. the command: `i3flip perv`  
was valid and would flip the focus in the *previous* direction.
Because only the first character in the argument was used.

Now this will result in an error: `perv` is not a valid direction.
Valid directions for this case would be "prev, p, previous".
Arguments are still case insensitive.

---

A bugfix in `i3king` on the same theme is that, previously
it was possible to define a rule without a command (probably because of a typo/mistake: #207),
and this could lead to unpredictable bad behaviour and issues.
**Now** if a rule is defined without a command, it will be ignored
and proper error messages will be printed.

---

I also fixed the bug related to workspace name of
i3fyra workspace for the 42'nd time.

---

Finally a minor printf debugging improvement where
arguments to `--json` (usually a full `i3-msg -t
get_tree` string) is now replaced with `...` in
debugging stderr output.

---

big thanks to @gmardom and @1ntronaut for reporting
and helping to troublehsoot the issues!



================================================
FILE: docs/releasenotes/2024.04.21.md
================================================
## broken regex search now works

fix for issue #211 .  
Big thanks to @henryzxb for reporting

Allthough small, this change affects all i3ass commands,
except i3king. Hopefully we didn't break something.

^ above fix introduced an issue with i3get without criterion
(targeting the active window), but it is now fixed



================================================
FILE: docs/releasenotes/23.07.13.1.md
================================================
[i3ass]

A *"new"* command, that prints environment information.

[i3list]  

Fixed an issue where i3fyra workspace couldn't be
seen if it wasn't the currently active workspace (#180)

[i3fyra]  

Fixed a typo that made I3FYRA_MAIN_CONTAINER be ignored

[i3king]  

Fixed an issue where commands where not printed
when `--print-commands` was used (i3fyra)

Account for `"actual_deco_rect":` in JSON, not doing
this made it so some windows never triggered rules



================================================
FILE: docs/releasenotes/v.0.1.6.md
================================================
### v.0.1.6 - new installation scripts

Added [Makefile] and updated [install.sh] to include (*optional*) systemwide and manpage installation.

### v.0.1.6 - [i3list]  

**Breaking change**  
Complete rewrite, script is faster and output is more readable and usable (*array format*). If you have scripts relying on i3list, you need to make changes.  

### v.0.1.6 - [i3viswiz]  
**Breaking change**  
Changed output format and added more options to output. Focusing works as before, but if you have scripts that relies on the output (`-p`), you might need to update your scripts.  

### v.0.1.6 - [i3fyra]  
**Code cleanup**  
Made a big code cleanup and removed big chunks are now handled by i3var,i3viswiz and i3list. Added more comments to the code and made the whole thing more stable, I hope this will resolve many issues that some users have reported. No breaking changes or new features.

### v.0.1.6 - [i3run]  

**improvements**  
Adapted the script to use the new [i3list] which resulted in faster execution times.  

**new options**    

  - `-m` position floating window at cursor (*was default in previous version*)  
  - `-x OLDNAME` rename new windows when they are created.

### v.0.1.6 - [i3flip]

**direction arguments**  
More directions then p,n,prev,next are now allowed. up, left, prev, u, l, p all do the same thing. Same with: down, right, next, d, r, n.    



================================================
FILE: docs/releasenotes/v.0.1.65.md
================================================
### v.0.1.65 - new stuff

Workspace name is added to the [i3list] output (i3list[WAN] and i3list[TAN]), these are used in i3run when a window is summoned. Summoning to a number created an new workspace if it had a name.  

`-t` flag added to [i3fyra]. It takes a string with options that are passed to i3list, making it possible to target other windows then the active one.

### v.0.1.65 - fixed stuff
Above mentioned thing with i3run and workspace names.  
[i3viswiz] focus function no works.
Negative splitsizes works when splits are manipulated in i3fyra outside the apllysplits function.



================================================
FILE: docs/releasenotes/v.0.1.66.md
================================================
### v.0.1.66

Added error message to install.sh, if the command is not valid.



================================================
FILE: docs/releasenotes/v.0.1.7.md
================================================
### v.0.1.7

Added [i3Kornhe] 

changed output of [i3viswiz] again, control variables are now all on the first line. Also added workspace dimensions for better (not yet perfect) multimonitor support, modified i3fyra 'move' command to work with the new changes.

Added workspace position to i3list output.



================================================
FILE: docs/releasenotes/v.0.1.75.md
================================================
### v.0.1.75

fixed an issue with [i3viswiz] and i3gaps, where
the correct window couldn't be located if the
search  ended up in the gaps. (this can still
happen, and might need some more tweaks, but with
this fix it's much less likely to happen then
before.) 



================================================
FILE: docs/releasenotes/v.0.1.77.md
================================================
### v.0.1.77

cleaned up [i3flip] code and added ability to flip in layouts other then tabbed|stacked.



================================================
FILE: share/ERR.sh
================================================
#!/bin/bash

set -E
trap '(($? == 98)) && exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERT() { >&3 echo  "$*"  ;}




================================================
FILE: share/LOG.sh
================================================
#!/bin/bash #bashbud

[[ $BASHBUD_LOG ]] && {
  [[ -f $BASHBUD_LOG ]] || mkdir -p "${BASHBUD_LOG%/*}"
  exec 2>> "$BASHBUD_LOG"
}



================================================
FILE: share/main.awk
================================================
# name|title_format field holds the title, it is the value that
# is trickiest to capture since it can contain 
# double quotes, commas (RS) and colon (FS).
# therefor it is handled here separate from the other
# keys, which always are at NF-1.
$1 ~ /"(name|title_format)"/ {
  key=gensub(/"/,"","g",$1)
  
  title=gensub(/^"(name|title_format)":/,"","1",$0)
  title=gensub(/\\"/,"@@_DQ_@@","g",title)

  # this makes sure to capture titles with escaped quotes
  # and commas.
  while (title ~ /[^"]$/ && title != "null") {
    getline
    title = title "," gensub(/\\"/,"@@_DQ_@@","g",$0)
  }
  title=gensub("@@_DQ_@@","\"","g",title)

  ac[cid][key]=title

  if ( key in arg_search && match(title, arg_search[key]) )
    suspect_targets[cid]=1

  # store output container id in separate array
  if ( ac[cid]["type"] ~ /"output"/ && $NF !~ /__i3/)
    outputs[$NF]=cid

  else if (ac[cid]["type"] == "\"workspace\"") {

    if ($NF == i3fyra_workspace_name)
      i3fyra_workspace_id = cid

    else if ($NF == "\"__i3_scratch\"")
      scratchpad_id = cid
  }
}

$(NF-1) ~ /"(class|current_border_width|floating|focus|focused|fullscreen_mode|id|instance|layout|marks|num|output|sticky|type|urgent|window|window_role|window_type|x)"$/ {
  
  key=gensub(/.*"([^"]+)"$/,"\\1","g",$(NF-1))
    
  switch (key) {

    case "layout":
    case "current_border_width":
    case "fullscreen_mode":
    case "sticky":
    case "urgent":
      ac[cid][key]=$NF
    break

    case "window_type":
    case "window_role":
    case "class":
    case "instance":
    case "type":
      if (key in arg_search) {
        gsub(/^"|"$/,"",$NF)
        if (match($NF,arg_search[key]))
          suspect_targets[cid]=1
      }
      ac[cid][key]=$NF
    break

    case "id":
      # when "nodes": (or "floating_nodes":) and "id":
      # is on the same record.
      #   example -> "nodes":[{"id":94446734049888 
      # it is the start of a branch in the tree.
      # save the last container_id as current_parent_id
      if ($1 ~ /nodes"$/) {
        current_parent_id=cid
      } else if (NR == 1) {
        root_id=$NF
      }

      # cid, "current id" is the last seen container_id
      cid=$NF
      ac[cid][key]=$NF

      # container_order is for viswiz
      container_order[++container_count]=cid

      if ( key in arg_search && $NF == arg_search[key] )
        suspect_targets[cid]=1
    break

    case "x":

      if ($1 ~ /"(deco_)?rect"/) {
        # this will add values to:
        #   ac[cid]["x"] , ["y"] , ["w"] , ["h"]
        #   ac[cid]["deco_x"] , ["deco_y"] , ["deco_w"] , ["deco_h"]
        keyprefix=($1 ~ /"deco_rect"/ ? "deco_" : "")
        while (1) {

          match($0,/"([^"])[^"]*":([0-9]+)([}])?$/,ma)
          ac[cid][keyprefix ma[1]]=ma[2]
          if (ma[3] ~ "}")
            break
          # break before getline, otherwise we will
          # miss the "deco_rect" line..
          getline
        }

        if (keyprefix == "deco_")
          ac[cid]["titlebarheight"]=ac[cid]["deco_h"]
      }

    break

    case "num":
      ac[cid][key]=$NF
      cwsid=cid # current workspace id
      copid=outputs[ac[cid]["output"]] # current output id

      if (cid == i3fyra_workspace_id)
        i3fyra_workspace_num=$NF
    break

    case "focused":
      ac[cid][key]=$NF
      if ($NF == "true") {
        active_container_id=cid
        active_output_id=copid

        # the workspace container is focused
        # when there are no other windows visible
        if (ac[cid]["type"] == "\"workspace\"")
          active_workspace_id=cid
        else
          active_workspace_id=cwsid

      }
      ac[cid]["workspace"]=cwsid
      ac[cid]["parent"]=current_parent_id
    break

    case "window":
      if ($NF != "null") {

        ac[cid]["window"]=$NF
        ac[cid]["i3fyracontainer"]=current_i3fyra_container

        if ( (key in arg_search && $NF == arg_search[key]) || 
             ("i3fyracontainer" in arg_search && arg_search["i3fyracontainer"] == current_i3fyra_container) )
        {
          suspect_targets[cid]=1
        }
      }
    break

    case "floating":
      # TODO: i3get -> ac[cid]["floating"]=$NF
      # is this necessary?
      ac[cid]["floating-i3get"]=$NF
      ac[cid]["floating"]=($NF ~ /_on"$/ ? 1 : 0)

      if ( current_i3fyra_container in fyra_containers && fyra_containers[current_i3fyra_container]["id"] == cid)
      {
        current_i3fyra_container=""
      }
        
    break

    case "focus":
      if ($2 != "[]") {
        # a not empty focus list is the first thing
        # we encounter after a branch. The first
        # item of the list is the focused container
        # which is of interest if the container is
        # tabbed or stacked, where only the focused container
        # is visible.
        first_id=gensub(/[^0-9]/,"","g",$2)
        parent_id=ac[first_id]["parent"]
        ac[parent_id]["focused"]=first_id

        # this restores current_parent_id  and cid 
        # to what it was before this branch.
        cid=parent_id
        current_parent_id=ac[parent_id]["parent"]

        # below is only needed by viswiz

        # workspaces are childs in a special containers
        # named "content", so the focused (first_id) container
        # is a visible workspace (excluding the scratchpad)
        if (ac[parent_id]["name"] ~ /"content"/ &&
            ac[first_id]["name"] !~ /"__i3_scratch"/) {
          visible_workspaces[first_id]=1

          # store the workspace number for current output
          ac[copid]["num"]=ac[first_id]["num"]
        }

        # this just store a list of child container IDs
        # (same as the focus list).
        for (gotarray=0; !gotarray; getline) {
          child=gensub(/[][]/,"","g",$NF)
          ac[parent_id]["children"][child]=1
          gotarray=($NF ~ /[]]$/ ? 1 : 0)
        }

        # if the ACTIVE container is one of the children
        # get the order 
        if (active_container_id in ac[parent_id]["children"]) {

          groupsize=length(ac[parent_id]["children"])

          i=0 ; indx=0

          while (i<groupsize) {
            if (container_order[++indx] in ac[parent_id]["children"]) {
              curry=container_order[indx]

              if (++i==1)
                print_us["firstingroup"]=curry
              if (curry == active_container_id)
                print_us["grouppos"]=i

            }
          }
          
          print_us["lastingroup"]=curry
          print_us["grouplayout"]=ac[parent_id]["layout"]
          print_us["groupid"]=parent_id
          print_us["groupsize"]=groupsize
          getorder=0
        }
      }
    break

    case "marks":

      ac[cid][key]=$NF

      if ($NF == "[]")
        break

      if ( key in arg_search && match($NF, "\"" arg_search[key] "\"") )
        suspect_targets[cid]=1

      if ( match($NF,/"i34([ABCD])"/,ma) ) {
        current_i3fyra_container=ma[1]
        fyra_containers[ma[1]]["id"]=cid
        fyra_containers[ma[1]]["workspace"]=cwsid
        ac[cid]["i3fyra_mark"]=ma[1]

        if (cwsid != scratchpad_id) {
          fyra_containers[ma[1]]["visible"]=1
          fyra_containers[ma[1]]["family"]=current_fyra_family
        }
      }

      else if ( match($NF,/"i34X([ABCD]{2})"/,ma) ) {
        fyra_splits[ma[1]]=cid
        current_fyra_family=ma[1]
        fyra_vars["X" ma[1]]=ac[cwsid]["num"]
        fyra_vars["N" ma[1]]=ac[cwsid]["name"]
      }

      # marks set by i3var all are at the root_id.
      # all that are related to i3fyra has i34 prefix
      
      # "marks":["i34MAC=157"
      # "i34MAB=1570"
      # "i34MBD=252"
      # "i34FAC=X"
      # "i34FBD=X"
      # "hidden93845635698816="]
      else if (cid == root_id) {
        while (1) {
          # remove escaped doublequotes so things like
          # i3fyra_ws=\"Control Panel\"  , works
          # as expected.
          gsub(/\\"/,"",$0)
          match($0,/"(i3viswiz|i34)?([^"=]+)=([^"]*)"([]])?$/,ma)

          if (ma[2] == "i3fyra_ws")
            i3fyra_workspace_name = "\"" ma[3] "\""
          else if (ma[1] == "i3viswiz")
            last_direction_id=ma[3]
          else if (ma[2] == "focus_wrap")
            focus_wrap=ma[3]
          else if (ma[1] == "i34")
            fyra_vars[ma[2]]=ma[3]
          if (ma[4] ~ "]")
            break
          
          getline
        }
      }

      # store all marks, for i3get
      else
      {
        while (1) {
          match($0,/"([^"]+)"([]])?$/,ma)
          ac[cid][key] = ( ac[cid][key] ? ac[cid][key] "," : "[" ) "\"" ma[1] "\""
          if (ma[2] ~ "]")
            break

          getline
        }

        ac[cid][key] = ac[cid][key] "]"
      }

    break
  }
}



================================================
FILE: share/Makefile
================================================
.PHONY: all install-dev uninstall-dev

.ONESHELL:
.DEFAULT_GOAL       := all

SHELL               := /bin/bash
CUSTOM_TARGETS       =

PREFIX              ?= /usr

NAME                := $(notdir $(realpath .))
VERSION             := 0
UPDATED             := $(shell date +'%Y-%m-%d')
AUTHOR              := anon
CACHE_DIR           := .cache
DOCS_DIR            := docs
CONF_DIR            := conf
AWK_DIR             := awklib
FUNCS_DIR           := func
FILE_EXT            := .sh
INDENT              := $(shell echo -e "  ")
USAGE                = $(NAME) [OPTIONS]
OPTIONS_FILE        := options
MONOLITH             = _$(NAME)
BASE                := _init$(FILE_EXT)
SHBANG              := \#!/bin/bash
OPTIONS_ARRAY_NAME  := _o
FUNC_STYLE          := "() {"

config_mak          := config.mak
help_table          := $(CACHE_DIR)/help_table.txt
long_help           := $(CACHE_DIR)/long_help.md
getopt              := $(CACHE_DIR)/getopt
print_help          := $(CACHE_DIR)/print_help$(FILE_EXT)
print_version       := $(CACHE_DIR)/print_version$(FILE_EXT)

ifneq ($(wildcard $(config_mak)),)
  include config.mak
else
  config_mak    :=
endif

ifeq ($(wildcard $(OPTIONS_FILE)),)
  OPTIONS_FILE  :=
  help_table    :=
  long_help     :=
  getopt        :=
  print_help    :=
  print_version :=
endif

function_createconf := $(FUNCS_DIR)/_createconf$(FILE_EXT)
function_awklib     := $(FUNCS_DIR)/_awklib$(FILE_EXT)

ifneq ($(wildcard $(CONF_DIR)/*),)
  include_createconf   = $(function_createconf)
  conf_dirs            = $(patsubst ./%,%,$(shell find "./$(CONF_DIR)" -type d))
  conf_files           = $(patsubst ./%,%,$(shell find "./$(CONF_DIR)" -type f))
else
  $(shell rm -f $(function_createconf))
endif

ifneq ($(wildcard $(AWK_DIR)/*),)
  include_awklib       = $(function_awklib)
  awk_files            = $(wildcard $(AWK_DIR)/*)
else
  $(shell rm -f $(function_awklib))
endif

option_docs          = $(wildcard $(DOCS_DIR)/options/*)

generated_functions := $(function_err) $(include_createconf) $(include_awklib)
function_files := \
  $(generated_functions) \
  $(filter-out $(generated_functions),$(wildcard $(FUNCS_DIR)/*))


# this hack writes 1 or 0 to the file .cache/got_func
# depending on existence of files in FUNC_DIR
# but it also makes sure to only update the file
# if the value has changed.
# this is needed for _init.sh (BASE) to know it needs
# to be rebuilt on this event.

ifneq ($(wildcard $(CACHE_DIR)/got_func),)
  ifneq ($(wildcard $(FUNCS_DIR)/*),)
    ifneq ($(file < $(CACHE_DIR)/got_func), 1)
      $(shell echo 1 > $(CACHE_DIR)/got_func)
    endif
  else
    ifneq ($(file < $(CACHE_DIR)/got_func), 0)
      $(shell echo 0 > $(CACHE_DIR)/got_func)
    endif
  endif
endif

$(CACHE_DIR)/got_func: | $(CACHE_DIR)/
	@$(info making $@)
	[[ -d $${tmp:=$(FUNCS_DIR)} ]] && tmp=1 || tmp=0
	echo $$tmp > $@

clean:
	rm -rf $(wildcard _*) $(CACHE_DIR) $(generated_functions)

install-dev: $(BASE) $(NAME)
	ln -s $(realpath $(NAME)) $(PREFIX)/bin/$(NAME)
	
uninstall-dev: $(PREFIX)/bin/$(NAME)
	rm $^

$(BASE): $(getopt) $(print_help) $(print_version) $(CACHE_DIR)/got_func
	@$(info making $@)
	{
		printf '%s\n' '$(SHBANG)' '' 

		[[ -f $${pv:=$(print_version)} ]] \
			&& grep -vhE -e '^#!/' $(print_version) | sed '0,/2/s//$$\{__stderr:-2\}/'
		[[ -f $${ph:=$(print_help)} ]] \
			&& grep -vhE -e '^#!/' $(print_help)    | sed '0,/2/s//$$\{__stderr:-2\}/'

		echo

		[[ -d $${fd:=$(FUNCS_DIR)} ]] && {
			printf '%s\n' \
			'for ___f in "$$__dir/$(FUNCS_DIR)"/*; do' \
			'$(INDENT). "$$___f" ; done ; unset -v ___f'
		}

		echo
		
		[[ -f $${go:=$(getopt)} ]] && cat $(getopt)

		echo "((BASHBUD_VERBOSE)) && _o[verbose]=1"
		echo

		echo 'main "$$@"'
	} > $@

$(MONOLITH): $(print_version) $(NAME) $(print_help) $(function_files) $(getopt)
	@$(info making $@)
	{
		printf '%s\n' '$(SHBANG)' ''
		re='#bashbud$$'
		for f in $^; do
			# ignore files where the first line ends with '#bashbud'
			[[ $$(head -n1 $$f) =~ $$re ]] && continue	
			# ignore lines that ends with '#bashbud' (and shbangs)
			grep -vhE -e '^#!' -e '#bashbud$$' $$f
		done

		echo 'main "$$@"'
	} > $@
	
	chmod +x $@

# if a file in docs/options contains more than
# 2 lines, it will get added to the file .cache/long_help.md
# like this:
#   ### -s, --long-option ARG
#   text in docs/options/long-option after the first 2 lines
$(long_help): $(CACHE_DIR)/options_in_use $(option_docs)
	@$(info making $@)
	for option in budlabs $(file < $(CACHE_DIR)/options_in_use)
	do
		[[ ! -f $(DOCS_DIR)/options/$$option || $$(wc -l < "$(DOCS_DIR)/options/$$option") -lt 2 ]] \
			&& continue
		printf '### '
		sed -r 's/\|\s*$$//g;s/^\s*//g' $(CACHE_DIR)/options/$$option
		echo
		tail -qn +3 "$(DOCS_DIR)/options/$$option"
		echo
	done > $@

$(CACHE_DIR)/synopsis.txt: $(OPTIONS_FILE) | $(CACHE_DIR)/
	@$(info making $@)
	sed 's/^/$(NAME) /g;s/*//g' $< > $@

$(help_table): $(long_help)
	@$(info making $@)
	for option in $$(cat $(CACHE_DIR)/options_in_use); do
		[[ -f $(CACHE_DIR)/options/$$option ]]  \
			&& frag=$$(cat $(CACHE_DIR)/options/$$option) \
			|| frag="$$option | "

		[[ -f $(DOCS_DIR)/options/$$option ]]  \
			&& desc=$$(head -qn1 $(DOCS_DIR)/options/$$option) \
			|| desc='short description  '

		paste <(echo "$$frag") <(echo "$$desc")
	done | tr -d '\t\\' > $@

$(print_version): $(config_mak) | $(CACHE_DIR)/
	@$(info making $@)
	echo $(SHBANG)
	fstyle=$(FUNC_STYLE)
	printf "__print_version$${fstyle}\n" > $@                          
	printf '%s\n'                                            \
		"$(INDENT)>&2 printf '%s\n' \\"                        \
		"$(INDENT)$(INDENT)'$(NAME) - version: $(VERSION)' \\" \
		"$(INDENT)$(INDENT)'updated: $(UPDATED) by $(AUTHOR)'" \
		"}"                                                    \
		"" >> $@

$(print_help): $(help_table) $(CACHE_DIR)/synopsis.txt 
	@$(info making $@)
	{
		echo $(SHBANG)
		fstyle=$(FUNC_STYLE)
		printf "__print_help$${fstyle}\n"
		echo "$(INDENT)cat << 'EOB' >&2  "
		if [[ options = "$(USAGE)" ]]; then
			cat $(CACHE_DIR)/synopsis.txt
			echo
		else 
			printf '%s\n' 'usage: $(USAGE)' ''
			echo
		fi
		cat $(help_table)
		printf '%s\n' 'EOB' '}'
	} > $@

$(function_createconf): $(conf_files) | $(FUNCS_DIR)/
	@$(info making $@)
	{
		printf '%s\n' \
			'$(SHBANG)'                                                            \
			''                                                                     \
			'### _createconf() function is automatically generated'                \
			'### from makefile based on the content of the $(CONF_DIR)/ directory' \
			''


		fstyle=$(FUNC_STYLE)
		printf "_createconf$${fstyle}\n"

		echo 'local trgdir="$$1"'

		echo 'mkdir -p $(subst $(CONF_DIR),"$$trgdir",$(conf_dirs))'
		for f in $(conf_files); do

			echo ""
			echo 'if [[ -d $$__dir ]]; then #bashbud'
			echo "cat \"\$$__dir/$$f\" > \"$${f/$(subst /,\/,$(CONF_DIR))/\$$trgdir}\" #bashbud"
			echo 'else #bashbud'
			echo "cat << 'EOCONF' > \"$${f/$(subst /,\/,$(CONF_DIR))/\$$trgdir}\""
			cat "$$f"
			echo "EOCONF"
			echo 'fi #bashbud'
			[[ -x $$f ]] && echo "chmod +x \"$${f/$(subst /,\/,$(CONF_DIR))/\$$trgdir}\""
		done

		echo '}'
	} > $@

$(function_awklib): $(awk_files) | $(FUNCS_DIR)/
	@$(info making $@)
	{
		printf '%s\n' \
			'$(SHBANG)'                                                             \
			''                                                                      \
			'### _awklib() function is automatically generated'                     \
			'### from makefile based on the content of the $(AWK_DIR)/ directory'   \
			''

		fstyle=$(FUNC_STYLE)
		printf "_awklib$${fstyle}\n"
		printf '%s\n' \
			'[[ -d $$__dir ]] && { cat "$$__dir/$(AWK_DIR)/"* ; return ;} #bashbud' \
			"cat << 'EOAWK'"
		cat $(awk_files)
		printf '%s\n' "EOAWK" '}'
	} > $@

$(CACHE_DIR)/:
	@$(info creating $(CACHE_DIR)/ dir)
	mkdir -p $(CACHE_DIR) $(CACHE_DIR)/options

$(FUNCS_DIR)/:
	@$(info creating $(FUNCS_DIR)/ dir)
	mkdir -p $(FUNCS_DIR)

$(CACHE_DIR)/options_in_use $(getopt) &: $(OPTIONS_FILE) | $(CACHE_DIR)/
	@$(info parsing $(OPTIONS_FILE))
	mkdir -p $(DOCS_DIR)/options
	gawk '
	BEGIN { RS=" |\\n" ; longest = length("version")}

	/./ {
		if (match($$0,/^\[?--([^][|[:space:]]+)(([|]-)(\S))?\]?$$/,ma)) 
		{
			gsub(/[][]/,"",$$0)
			opt_name = ma[1]
			if (length(opt_name) > longest)
				longest = length(opt_name)
			options[opt_name]["long_name"]  = opt_name
			if (ma[4] ~ /./) 
				options[opt_name]["short_name"] = ma[4]
		}

		else if (match($$0,/^\[?-(\S)([|]--([^][:space:]]+))?\]?$$/,ma))
		{
			gsub(/[][]/,"",$$0)
			opt_name = ma[1]
			if (ma[3] ~ /./)
			{
				opt_name = ma[3]
				options[opt_name]["short_name"] = ma[1]
				options[opt_name]["long_name"]  = opt_name
			}
			else
				options[opt_name]["short_name"] = opt_name

		}

		# ignore "Args" prefixed with an asterisk (*)
		else if (opt_name in options && !("arg" in options[opt_name]) && $$0 ~ /^[^*]/)
		{

			if ($$0 ~ /^[[]/)
				options[opt_name]["suffix"] = "::"
			else
				options[opt_name]["suffix"] = ":"

			gsub(/[][]/,"",$$0)
			if (length($$0) > longest_arg)
				longest_arg = length($$0)
			options[opt_name]["arg"] = $$0
		}
	}

	END {

		# sort array in alphabetical order
		# https://www.gnu.org/software/gawk/manual/html_node/Controlling-Scanning.html
		PROCINFO["sorted_in"] = "@ind_num_asc"

		for (o in options)
		{

			docfile = "$(DOCS_DIR)/options/" o
			docfile_fragment = "$(CACHE_DIR)/options/" o
			options_in_use = options_in_use " " o

			if(o ~ /./)
			{
				if ("short_name" in options[o])
				{
					out = "-" options[o]["short_name"]
					if ("long_name" in options[o])
						out = out ", "
					else
						out = out sprintf("%-" longest "s", " ")
				}
				else
					out = ""

				if ("long_name" in options[o]) {
					string_lenght = longest + ("short_name" in options[o] ? 0 : 4)
					out = out sprintf ("--%-" string_lenght "s", options[o]["long_name"])
				}
				
				if ("arg" in options[o])
					out = out sprintf (" %-" longest_arg "s", gensub (/\|/,"\\\\|","g",options[o]["arg"]))

				# 6 = -s, --
				# longest = longest long option name
				# 1 space after longoption
				# longest_arg + space
				fragment_length = 6+longest+1+longest_arg
				out = sprintf ("%-" fragment_length "s | ", out)
				print out > docfile_fragment

				if (system("[ ! -f " docfile " ]") == 0)
					print "short description  " > docfile
			}
					
			if ("long_name" in options[o])
			{
				long_options = long_options "," options[o]["long_name"]
				if ("suffix" in options[o])
					long_options = long_options options[o]["suffix"]
			}

			if ("short_name" in options[o])
			{
				short_options = short_options "," options[o]["short_name"]
				if ("suffix" in options[o])
					short_options = short_options options[o]["suffix"]
			}
		}

		print options_in_use > "$(CACHE_DIR)/options_in_use"

	  print ""
	  print "declare -A $(OPTIONS_ARRAY_NAME)"
	  print ""
		print "options=$$(getopt \\"
		print "  --name \"[ERROR]:" name "\" \\"
		if (short_options ~ /./)
			printf ("  --options \"%s\" \\\n", gensub(/^,/,"",1,short_options))
		printf ("  --longoptions \"%s\"  -- \"$$@\"\n", gensub(/^,/,"",1,long_options))
		print ") || exit 98"
		print ""
		print "eval set -- \"$$options\""
		print "unset -v options"
		print ""
		print "while true; do"
		print "  case \"$$1\" in"
		printf ("    --%-" longest+1 "s| -%s ) __print_help && exit ;;\n", "help", "h")
		printf ("    --%-" longest+1 "s| -%s ) __print_version && exit ;;\n", "version", "v")
		for (o in options)
		{
			if (o !~ /^(version|help)$$/)
			{
				if ("long_name" in options[o])
					printf ("    --%-" longest+1 "s", options[o]["long_name"])
				else
					printf ("%-" longest+7 "s", "")

				if ("short_name" in options[o])
					printf ("%s -%s ", ("long_name" in options[o] ? "|" : " "), options[o]["short_name"])
				else
					printf ("%s", "     ")

				if ("suffix" in options[o])
				{
					if (options[o]["suffix"] == "::")
						printf (") _o[%s]=$${2:-1} ; shift ;;\n", o)
					else
						printf (") _o[%s]=$$2 ; shift ;;\n", o)
				}
				else
					printf (") _o[%s]=1 ;;\n", o)
			}
		}

		print "    -- ) shift ; break ;;"
		print "    *  ) break ;;"
		print "  esac"
		print "  shift"
		print "done"
		print ""
	}
	' $(OPTIONS_FILE)                  \
			cache=$(CACHE_DIR)             \
			name=$(NAME) > $(getopt)

other_maks := $(filter-out config.mak,$(wildcard *.mak))
-include $(other_maks)

# by having all:  last, it is possible to add CUSTOM_TARGETS
# in "other_maks", and have them automatically apply
all: $(CUSTOM_TARGETS) $(MONOLITH) $(BASE)



================================================
FILE: share/MSG.sh
================================================
#!/bin/bash

declare -g _msgstring

messy() {
  # arguments are valid i3-msg arguments
  (( _o[verbose] || BASHBUD_VERBOSE)) && ERM "m $*"
  (( _o[dryrun]  )) || _msgstring+="$*;"
}



================================================
FILE: share/share.mak
================================================
.PHONY: manpage install uninstall check

MANPAGE := $(NAME).1

manpage: $(MANPAGE)

check: all
	shellcheck $(MONOLITH)

$(CACHE_DIR)/copyright.txt: $(config_mak)
	@$(info making $@)
	year_created=$(CREATED) year_created=$${year_created%%-*}
	year_updated=$$(date +'%Y')
	author="$(AUTHOR)" org=$(ORGANISATION)

	copy_text="Copyright (c) "

	((year_created == year_updated)) \
		&& copy_text+=$$year_created   \
		|| copy_text+="$${year_created}-$${year_updated}"

	[[ $$author ]] && copy_text+=", $$author"
	[[ $$org ]]    && copy_text+=" of $$org  "

	printf '%s\n' \
		"$$copy_text" "SPDX-License-Identifier: $(LICENSE)" > $@
			
$(MANPAGE): $(CACHE_DIR)/wiki.md
	@$(info making $@)
	uppercase_name=$(NAME)
	uppercase_name=$${uppercase_name^^}
	{
		# this first "<h1>" adds "corner" info to the manpage
		echo "# $$uppercase_name "           \
				 "$(manpage_section) $(UPDATED)" \
				 "$(ORGANISATION) \"User Manuals\""
		cat $<
	} | go-md2man > $@

installed_manpage    = $(DESTDIR)$(PREFIX)/share/man/man1/$(MANPAGE)
installed_script    := $(DESTDIR)$(PREFIX)/bin/$(NAME)

install: all
	install -Dm644 $(MANPAGE) $(installed_manpage)
	install -Dm755 $(MONOLITH) $(installed_script)

uninstall:
	@for f in $(installed_script) $(installed_manpage); do
		[[ -f $$f ]] || continue
		echo "rm $$f"
		rm "$$f"
	done



================================================
FILE: share/TIMER.sh
================================================
#!/bin/bash #bashbud

[[ $BASHBUD_VERBOSE -eq 1 || $* =~ --verbose ]] && ___t=1
[[ $* =~ --dryrun ]]  && ___t=0

((___t)) && {
  ___t=$(( 10#${EPOCHREALTIME//[!0-9]} ))

  # don't include options after "--verbose" in debug output
  # example: i3fyra --move C --verbose --conid 94881549553328
  # will result in: i3fyra --move C
  for ___arg ; do
    [[ $___arg = --verbose ]] && break

    # replace --json argument with ...
    [[ $___replace_next ]] && {
      ___debug_args+=(...)
      unset -v ___replace_next
      continue
    }

    [[ $___arg = --json ]] && ___replace_next=1
    ___debug_args+=("$___arg")
  done


  printf -v ___cmd "%s " "${0##*/}" "${___debug_args[@]}"
  unset -v ___arg '___debug_args[@]'
  >&2 echo ">>> $___cmd"
}



================================================
FILE: src/i3ass/config.mak
================================================
NAME         := i3ass
VERSION      := 2025.03.30.1
CREATED      := 2023-07-12
UPDATED      := 2025-03-30
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := i3ass
DESCRIPTION  := Print environment information
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT =                \
	$(CACHE_DIR)/help_table.txt   \
	$(CACHE_DIR)/long_help.md     \
	$(DOCS_DIR)/description.md    \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  
	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n' \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt

	} > $@



================================================
FILE: src/i3ass/i3ass
================================================
#!/bin/bash

main(){

  for ass in i3{flip,fyra,get,gw,king,Kornhe,list,run,var,viswiz,zen,menu,term}; do
    path=$(command -v "$ass")
    
    
    # i3ass - version: 0.0.1
    # updated: 2023-07-12 by budRich
    if [[ $path ]]; then
      version_output=$("$ass" -v 2>&1)
      read -rs _ _ _ version _ updated _ \
         <<< "${version_output//$'\n'/ }" 

      printf "%-8s | %-7s | %-10s | %s\n" \
        "$ass" "${version:--}" "${updated:--}" "${path/~/'~'}"
    else
      printf "%-8s | MISSING! %s\n" "$ass"
    fi

    [[ $ass = i3zen ]] && echo
  done

  echo
  echo -------------------------------------------
  echo

  for cmd in i3 bash gawk xdotool ; do
    if command -v "$cmd" >/dev/null
      then "$cmd" --version 2>&- | head -n1
      else echo "WARNING: command $cmd not found"
    fi
  done

  if command -v dmenu >/dev/null
    then dmenu -v 2>&-
    else "WARNING: command $cmd not found"
  fi

  echo
  echo -------------------------------------------
  echo
  export | grep I3FYRA | cut -f3 -d' '
}

__dir=$(dirname $(readlink -f "${BASH_SOURCE[0]}")) #bashbud
source "$__dir/_init.sh"                            #bashbud



================================================
FILE: src/i3ass/i3ass.1
================================================
.nh
.TH I3ASS   2023-08-19 budlabs "User Manuals"
.SH NAME
.PP
i3ass - Print environment information

.SH SYNOPSIS
.PP
\fB\fCi3ass\fR

.SH OPTIONS
.PP
.RS

.nf
-h, --help     | print help and exit  
-v, --version  | print messages to stderr  

.fi
.RE

.SH USAGE
.PP
The \fB\fCi3ass\fR command is used to print information
about the current environment relevant to i3ass.
The version, update date and installation path of
the other commands in i3ass. Version of the commands
\fB\fCi3, xdotool, gawk, bash\fR\&. And the environment variables:
.br
I3FYRA_WS and I3FYRA_MAIN_CONTAINER.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3ass/options
================================================
--help|-h --version|-v



================================================
FILE: src/i3ass/docs/description.md
================================================
The `i3ass` command is used to print information
about the current environment relevant to i3ass.
The version, update date and installation path of
the other commands in i3ass. Version of the commands
`i3, xdotool, gawk, bash`. And the environment variables:  
I3FYRA_WS and I3FYRA_MAIN_CONTAINER.



================================================
FILE: src/i3ass/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3ass/docs/options/version
================================================
print messages to stderr  



================================================
FILE: src/i3ass/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3ass/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3ass/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3ass/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3ass/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3ass/share.mak -> share.mak
================================================



================================================
FILE: src/i3flip/config.mak
================================================
NAME         := i3flip
VERSION      := 0.107
CREATED      := 2018-01-03
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := i3flip [--move|-m] DIRECTION
DESCRIPTION  := Tabswitching done right
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT =                \
	$(CACHE_DIR)/help_table.txt   \
	$(DOCS_DIR)/description.md    \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n'  \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3flip/i3flip
================================================
#!/bin/bash

main(){

  ((_o[dryrun])) || {
    [[ -f /tmp/i3flip_lock ]] && exit
    touch /tmp/i3flip_lock
  }

  declare -g _msgstring
  declare -i next prev

  read -r layout last first pos size < <(
    i3viswiz --parent LIST ${_o[json]:+--json "${_o[json]}"} \
             --debug grouplayout,lastingroup,firstingroup,grouppos,groupsize \
             --debug-format "%v "
    )
  
  ((_o[verbose])) && ERM "w" "layout:$layout" "last:$last" \
                             "first:$first" "pos:$pos" "size:$size"

  ((size < 2)) && ERX only container in group

  [[ ${_dir:=${1,,}} =~ ^(l|r|u|d|p|n|left|right|up|down|next|prev(ious)?)$ ]] \
    || ERX  "i3flip: direction ('$1') is not valid!" \
       $'\n'"Expected: (left|right|up|down|next|previous|l|r|u|d|p|n)"

  ((_o[verbose])) && ERM "flipping: $_dir"

  case "${_dir:0:1}" in

    r|d|n ) 
      next=1 prev=0
      [[ $layout =~ tabbed|splith ]] \
        && ldir=right || ldir=down
    ;;

    l|u|p )
      prev=1 next=0
      [[ $layout =~ tabbed|splith ]] \
        && ldir=left || ldir=up
    ;;

  esac

  # focus/move normally
  if (( (pos  > 1 && pos < size)       
   || ( (pos == 1 && next)
   ||   (pos == size && prev) ) )); then
   
   ((_o[move])) && cmd=move || cmd=focus
   messy "$cmd  $ldir"
  
  # warp focus/move to end of group
  elif ((pos == 1)); then
    if ((_o[move])); then
      messy "[con_id=$last] mark --add --toggle fliptmp"
      messy "move to mark fliptmp"
      messy "[con_id=$last] mark --add --toggle fliptmp"
    else
      messy "[con_id=$last] focus"
    fi

  # warp focus/move to start of group, (move+swap)
  else
    if ((_o[move])); then
      messy "[con_id=$first] mark --add --toggle fliptmp"
      messy "move to mark fliptmp, swap container with mark fliptmp"
      messy "[con_id=$first] mark --add --toggle fliptmp"
    else
      messy "[con_id=$first] focus"
    fi
  fi

}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3flip/i3flip.1
================================================
.nh
.TH I3FLIP   2023-08-13 budlabs "User Manuals"
.SH NAME
.PP
i3flip - Tabswitching done right

.SH SYNOPSIS
.PP
\fB\fCi3flip [--move|-m] DIRECTION\fR

.SH OPTIONS
.PP
.RS

.nf
--dryrun           | don't execute any commands  
-h, --help         | print help and exit  
--json        JSON | use JSON instead of output of `i3-msg -t get_tree`  
-m, --move         | move instead of focus shift  
--verbose          | louder output  
-v, --version      | print version info and exit  

.fi
.RE

.PP
\fB\fCi3flip\fR switch containers without leaving the
parent. Perfect for tabbed or stacked layout, but
works on all layouts. If direction is \fB\fCnext\fR and
the active container is the last, the first
container will get focused.

.PP
\fBDIRECTION\fP can be either \fIprev\fP or \fInext\fP, which
can be defined with different words:

.PP
\fBnext\fP|right|down|n|r|d
.br
\fBprev\fP|left|up|p|l|u

.SS examples
.PP
\fB\fC~/.config/i3/config\fR:

.PP
.RS

.nf
\&...
bindsym Mod4+Tab         exec --no-startup-id i3flip next
bindsym Mod4+Shift+Tab   exec --no-startup-id i3flip prev

.fi
.RE

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2018-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3flip/options
================================================
[--move|-m] [--json JSON] [--verbose] [--dryrun]
--help|-h
--version|-v



================================================
FILE: src/i3flip/watch.sh
================================================
#!/bin/bash

trap 'tput clear' SIGWINCH

_source=$(readlink -f "${BASH_SOURCE[0]}")
_dir=${_source%/*}

name="_${_dir##*/}.sh"

loops=20

source_files=("$_dir/${_dir##*/}")

for f in "$_dir/func"/* ; do
  [[ ${f##*/} =~ ^[a-z] ]] && source_files+=("$f")
done

[[ -d "$_dir/awklib" ]] && source_files+=("$_dir/awklib"/*)

cmd_base+=("$_dir/$name" --json "$(< "$_dir/tests/tree.json")" --dryrun --verbose)
cmd1+=(--move next)

while read -r ; do
  clear
  make
  shellcheck "$_dir/$name" && {

    "${cmd_base[@]}" "${cmd1[@]}"
    "${cmd_base[@]}" "${cmd1[@]}" 2> "$_dir/tests/results"
    
    diff "$_dir/tests/results" "$_dir/tests/ref1"

    echo $'\n'"loop: $name ${cmd1[*]} ; x$loops:"
    time(
      while ((++i<loops));do 
        "${cmd_base[@]}" "${cmd1[@]}"
      done > /dev/null 2>&1
    )

    echo -n $'\n'"LOC: "
    cat "${source_files[@]}" | grep -E '^\s*[^#].+$' | wc -l
  }
done < <(
  inotifywait \
    --event close_write --monitor --recursive \
    --exclude '^[.]/((func/)?_.*)|([.]cache.+)|(tests.+)|(.+[.]1)' .
)



================================================
FILE: src/i3flip/docs/description.md
================================================
`i3flip` switch containers without leaving the
parent. Perfect for tabbed or stacked layout, but
works on all layouts. If direction is `next` and
the active container is the last, the first
container will get focused.

**DIRECTION** can be either *prev* or *next*, which
can be defined with different words:

**next**|right|down|n|r|d  
**prev**|left|up|p|l|u  

### examples

`~/.config/i3/config`:  

    ...
    bindsym Mod4+Tab         exec --no-startup-id i3flip next
    bindsym Mod4+Shift+Tab   exec --no-startup-id i3flip prev





================================================
FILE: src/i3flip/docs/options/dryrun
================================================
don't execute any commands  



================================================
FILE: src/i3flip/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3flip/docs/options/json
================================================
use JSON instead of output of `i3-msg -t get_tree`  



================================================
FILE: src/i3flip/docs/options/move
================================================
move instead of focus shift  



================================================
FILE: src/i3flip/docs/options/verbose
================================================
louder output  



================================================
FILE: src/i3flip/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3flip/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -f /tmp/i3flip_lock ]] && rm -f /tmp/i3flip_lock

  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3flip/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3flip/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3flip/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3flip/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3flip/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3flip/share.mak -> share.mak
================================================



================================================
FILE: src/i3flip/tests/ref1
================================================

target direction: next
w layout:stacked last:93917708127120 first:93917707856944 pos:3 size:4
m move  down



================================================
FILE: src/i3flip/tests/results
================================================

target direction: next
w layout:stacked last:93917708127120 first:93917707856944 pos:3 size:4
m move  down



================================================
FILE: src/i3flip/tests/tree.json
================================================
{"id":93917707822976,"type":"root","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"root","window":null,"window_type":null,"nodes":[{"id":93917707824624,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3","window":null,"window_type":null,"nodes":[{"id":93917707827728,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":93917707830864,"type":"workspace","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3_scratch","num":-1,"window":null,"window_type":null,"nodes":[],"floating_nodes":[{"id":93917707883552,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707876864,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAC=0"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[93917707876864],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707903680,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707888544,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAB=1200"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[93917707888544],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707906656,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707896128,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MBD=252"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[93917707896128],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917708072256,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917708039344,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34FBD=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[93917708039344],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917708072720,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917708044368,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34FAC=A"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[93917708044368],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"focus":[93917707883552,93917707903680,93917707906656,93917708072256,93917708072720],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707830864],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707827728],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707899104,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"HDMI2","window":null,"window_type":null,"nodes":[{"id":93917707900672,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"topdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":2,"insert_where":2}]},{"id":93917707922624,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":93917707854208,"type":"workspace","orientation":"horizontal","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34XAB"],"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"1","num":1,"window":null,"window_type":null,"nodes":[{"id":93917707862032,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.63229166666666669627,"urgent":false,"marks":["i34XAC"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1214,"height":1080},"deco_rect":{"x":1280,"y":0,"width":640,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707941056,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.63796296296296295392,"urgent":false,"marks":["i34A"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1214,"height":689},"deco_rect":{"x":400,"y":0,"width":200,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707954864,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":20,"width":1214,"height":669},"deco_rect":{"x":0,"y":0,"width":607,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":667},"geometry":{"x":0,"y":20,"width":1353,"height":757},"name":"~/git/lab/i3ass/ass/i3viswiz/main.sh (i3fyra) - Sublime Text","title_format":"git/lab/i3ass/ass/i3viswiz/main.sh","window":39845891,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_main","title":"~/git/lab/i3ass/ass/i3viswiz/main.sh (i3fyra) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917707973216,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":20,"width":1214,"height":669},"deco_rect":{"x":607,"y":0,"width":607,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":667},"geometry":{"x":0,"y":20,"width":1353,"height":757},"name":"3 Visual indicator for beginners · Issue #16 · budlabs/typiskt - Vivaldi","title_format":"vivaldi","window":46137345,"window_type":"normal","window_properties":{"class":"Vivaldi-main","instance":"vivaldi-stable","window_role":"browser","title":"3 Visual indicator for beginners · Issue #16 · budlabs/typiskt - Vivaldi","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917707954864,93917707973216],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917708079424,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.36203703703703704608,"urgent":false,"marks":["i34C"],"focused":false,"output":"HDMI2","layout":"stacked","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":689,"width":1214,"height":391},"deco_rect":{"x":532,"y":0,"width":532,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707856944,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.25,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":769,"width":1214,"height":311},"deco_rect":{"x":0,"y":0,"width":1214,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":311},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/7","title_format":"auto","window":8388698,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/7","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917707847168,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.25,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":769,"width":1214,"height":311},"deco_rect":{"x":0,"y":20,"width":1214,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":311},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/8","title_format":"auto","window":8388711,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/8","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917708091680,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.25,"urgent":false,"focused":true,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":769,"width":1214,"height":311},"deco_rect":{"x":0,"y":40,"width":1214,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":311},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/6","title_format":"termsmall","window":8388683,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"termsmall","title":"/dev/pts/6","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917708127120,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.25,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":769,"width":1214,"height":311},"deco_rect":{"x":0,"y":60,"width":1214,"height":20},"window_rect":{"x":0,"y":0,"width":1212,"height":311},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/9","title_format":"auto","window":8388725,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/9","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917708091680,93917708127120,93917707847168,93917707856944],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917708079424,93917707941056],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917708036832,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.36770833333333330373,"urgent":false,"marks":["i34XBD"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":1214,"y":0,"width":706,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917708063072,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.23333333333333333703,"urgent":false,"marks":["i34B"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1214,"y":0,"width":706,"height":252},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917707227760,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i3monitor"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1214,"y":20,"width":706,"height":232},"deco_rect":{"x":0,"y":0,"width":706,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"title_format":"monitor","window":null,"window_type":null,"nodes":[{"id":93917708041968,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":0,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/1","title_format":"polybar","window":8388617,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"polybar","title":"/dev/pts/1","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917708061152,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":100,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/2","title_format":"i3listn","window":8388634,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3listn","title":"/dev/pts/2","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917708044832,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":200,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/4","title_format":"xfsettingsd","window":8388658,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"xfsettingsd","title":"/dev/pts/4","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917708105904,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":300,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/5","title_format":"pulse","window":8388671,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"pulse","title":"/dev/pts/5","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917707871136,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":400,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"i3","title_format":"i3","window":20971529,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3","title":"i3","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707940448,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":500,"y":0,"width":100,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"vb4c","window":41943049,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"vb4c","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917707964240,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.14285714285714284921,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":40,"width":706,"height":212},"deco_rect":{"x":600,"y":0,"width":106,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":210},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"browser","window":44040201,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"browser","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917707871136,93917707964240,93917707940448,93917708105904,93917708044832,93917708061152,93917708041968],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707227760],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707954400,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.76666666666666660745,"urgent":false,"marks":["i34D"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1214,"y":252,"width":706,"height":828},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":93917708173904,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":272,"width":706,"height":808},"deco_rect":{"x":0,"y":0,"width":353,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":808},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/12","title_format":"cornerterm","window":8388900,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"cornerterm","title":"/dev/pts/12","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":93917708149040,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1214,"y":272,"width":706,"height":808},"deco_rect":{"x":353,"y":0,"width":353,"height":20},"window_rect":{"x":2,"y":0,"width":704,"height":808},"geometry":{"x":0,"y":0,"width":486,"height":528},"name":"/home/bud/git/lab/i3ass/ass/i3flip/bashbud - File Manager","title_format":"git/lab/i3ass/ass/i3flip/bashbud","window":14680068,"window_type":"normal","window_properties":{"class":"ThunarD","instance":"thunar-lna","window_role":"Thunar-1596106621-4245724441","title":"/home/bud/git/lab/i3ass/ass/i3flip/bashbud - File Manager","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917708173904,93917708149040],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707954400,93917708063072],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[93917707862032,93917708036832],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707854208],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":93917707925760,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":1080,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"bottomdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":3,"insert_where":2}]}],"floating_nodes":[],"focus":[93917707922624,93917707900672,93917707925760],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[93917707899104,93917707824624],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}



================================================
FILE: src/i3fyra/config.mak
================================================
NAME         := i3fyra
VERSION      := 1.4.4
CREATED      := 2017-01-14
UPDATED      := 2025-03-30
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := An advanced, simple grid-based tiling layout
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  ?=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(DOCS_DIR)/environment_variables.md \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' 

	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  cat $(DOCS_DIR)/description.md

	  echo '## OPTIONS'
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  cat $(DOCS_DIR)/environment_variables.md

	  printf '%s\n' \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt

	} > $@



================================================
FILE: src/i3fyra/i3fyra
================================================
#!/bin/bash

: "${I3FYRA_MAIN_CONTAINER:=A}"
: "${I3FYRA_WS:=}"
: "${I3FYRA_ORIENTATION:=horizontal}"
: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KING_PID_FILE:=$XDG_RUNTIME_DIR/i3ass/i3king.pid}"

main(){

  local arg

  [[ ${_o[clear-virtuals]} ]] && {
    for k in A B C D; do i3var set "i34VP${k}" ; done
    exit
  }

  for _action in move show hide layout float orientation mono; do
    
    [[ ${arg:=${_o[$_action]}} ]] || continue
    err="i3fyra: argument for '--$_action': '$arg' not valid!"

    case "$_action" in
      move ) 
        ex="A|B|C|D|l|r|u|d|left|right|up|down"
        [[ $arg =~ ^(${ex})$ ]] || ERX "$err expected ($ex)"
        ;;
      
      show|hide ) [[ $arg =~ ^[ABCD]+$ ]] || ERX "$err expected (A|B|C|D)" ;;
      layout    ) [[ $arg =~ = || $arg = redo ]] || ERX "$err"             ;;
      float     ) (($#)) && ERX "$err expected 0 arguments got '($*)'"     ;;
      orientation )
        ex="vertical|horizontal|toggle"
        [[ $arg =~ ${ex} ]] || ERX "$err expected ($ex)" 
        ;;
    esac

    unset err ex
    break

  done

  [[ $arg ]] || ERX "not a valid operation: $0 $*"

  initialize_globals

  [[ ${_o[layout]} ]] && arg=${arg/${ori[main]}/main}
  ((_o[force]))       || arg=$(virtual_position "$arg")

  case "$_action" in

    move )
      if [[ $arg =~ ^[ABCD]$ ]]
        then active_move_to_container "$arg"
        else active_move_in_direction "${arg:0:1}"
      fi
    ;;
    show        ) container_show "$arg" ;;
    hide        ) container_hide "$arg" ;;
    layout      ) apply_splits "$arg"   ;;
    float       ) float_toggle          ;;
    orientation ) orientation "$arg"    ;;
    mono        ) monocle_toggle        ;;

  esac

  [[ $_action =~ move|show|float && ${i3list[TWC]} ]] \
    && messy "[con_id=${i3list[TWC]}]" focus
}

__dir=$(dirname $(readlink -f "${BASH_SOURCE[0]}")) #bashbud
source "$__dir/_init.sh"                            #bashbud



================================================
FILE: src/i3fyra/i3fyra.1
================================================
.nh
.TH I3FYRA   2023-07-22 budlabs "User Manuals"
.SH NAME
.PP
i3fyra - An advanced, simple grid-based tiling layout

.SH SYNOPSIS
.PP
.RS

.nf
i3fyra --show|-s CONTAINER
i3fyra --float|-a
i3fyra --hide|-z CONTAINER
i3fyra --layout|-l LAYOUT [--array ARRAY]
i3fyra --move|-m DEST [--conid|-n CON_ID] [--speed|-p INT]
i3fyra --orientation ORIENTATION
i3fyra --clear-virtuals
i3fyra [--verbose] [--dryrun] [--force|-f] 
i3fyra --help|-h
i3fyra --version|-v 

.fi
.RE

.PP
The layout consists of four containers:

.PP
.RS

.nf
  A B
  C D

.fi
.RE

.PP
A container can contain one or more windows. The
internal layout of the containers doesn't matter.
By default the layout of each container is
tabbed.

.PP
A is always to the left of B and D. And always
above C. B is always to the right of A and C. And
always above D.

.PP
This means that the containers will change names
if their position changes.

.PP
The size of the containers are defined by the
three splits: AB, AC and BD.

.PP
Container A and C belong to one family.
.br
Container B and D belong to one family.

.PP
The visibility of containers and families can be
toggled. Not visible containers are placed on the
scratchpad.

.PP
The visibility is toggled by either using \fB\fC--show\fR
or \fB\fC--hide\fR\&. But more often by moving a container
in an \fIimpossible\fP direction,(\fIsee examples
below\fP).

.PP
The \fBi3fyra\fP layout is only active on one
workspace. That workspace can be set with the
environment variable: \fB\fCi3FYRA_WS\fR, otherwise the
workspace active when the layout is created will
be used.

.PP
The benefit of using this layout is that the
placement of windows is more predictable and
easier to control. Especially when using tabbed
containers, which are very clunky to use
with \fIdefault i3\fP\&.


.SH examples
.PP
If containers \fBA\fP,\fBB\fP and \fBC\fP are visible
but \fBD\fP is hidden or none existent, the visible
layout would looks like this:

.PP
.RS

.nf
  A B
  C B

.fi
.RE

.PP
If action: \fB\fC--move up\fR would be executed when
container \fBB\fP is active and \fBD\fP is hidden.
Container \fBD\fP would be shown. If action would
have been: \fB\fC--move down\fR, \fBD\fP would be shown
but \fBB\fP would be placed below \fBD\fP, this means
that the containers will also swap names. If
action would have been \fB\fC--move left\fR the active
window in B would be moved to container \fBA\fP\&. If
action was \fB\fC--move right\fR, \fBA\fP and \fBC\fP would
be hidden:

.PP
.RS

.nf
  B B
  B B

.fi
.RE

.PP
If we now \fB\fC--move left\fR, \fBA\fP and \fBC\fP
would be shown again but to the right of \fBB\fP,
the containers would also change names, so \fBB\fP
becomes \fBA\fP, \fBA\fP becomes \fBB\fP and \fBC\fP
becomes \fBD\fP:

.PP
.RS

.nf
  A B
  A D

.fi
.RE

.PP
If this doesn't make sense, check out this
demonstration on youtube:
https://youtu.be/kU8gb6WLFk8

.SH OPTIONS
.PP
.RS

.nf
--array              ARRAY       | ARRAY should be the output of `i3list`  
--clear-virtuals                 | clear/reset virtual positions  
-n, --conid          CON_ID      | window with **CON_ID** will be used instead of active window  
--dryrun                         | don't execute wm commands  
-a, --float                      | toggle floating state of a window  
-f, --force                      | ignore virtual positioning.  
-h, --help                       | print help and exit  
-z, --hide           CONTAINER   | Hide target containers if visible.  
-l, --layout         LAYOUT      | update the size of the layout  
-m, --move           DEST        | move window/create container  
--orientation        ORIENTATION | short description  
-s, --show           CONTAINER   | Show target container.  
-p, --speed          INT         | distance in px a floating windows will be moved  
--verbose                        | print more stuff to stderr  
-v, --version                    | louder output  

.fi
.RE

.SS --array              ARRAY
.PP
Use \fB\fC--array ARRAY\fR to improve speed when
\fBi3fyra\fP is executed from a script that already
have the array, f.i. \fBi3run\fP and \fBi3Kornhe\fP\&.

.SS -a, --float
.PP
Autolayout. If current window is tiled: floating
enabled If window is floating, it will be put in a
visible container. If there is no visible
containers. The window will be placed in a hidden
container. If no containers exist, container
'A'will be created and the window will be put
there.

.SS -l, --layout         LAYOUT
.PP
AB is point on the X axis, calculated from the
left side if INT is positive, from the right side
if it is negative. AC and BD is on Y axis from
the top if INT is positive, from the bottom if it
is negative. The whole argument needs to be
quoted. Example:

.PP
`i3fyra --layout 'AB=-300 BD=420'

.PP
LAYOUT argument can also be the word 'redo', if it
is, the last layout appended will be restored.

.SS -m, --move           DEST
.PP
DEST can either be the name of a container
(A|B|C|D), or it's position relative to the
current container with a direction:[\fB\fCl\fR|\fB\fCleft\fR]
[\fB\fCr\fR|\fB\fCright\fR][\fB\fCu\fR|\fB\fCup\fR][\fB\fCd\fR|\fB\fCdown\fR] If the
container doesnt exist it is created. If argument
is a direction and there is no container in that
direction, Connected container(s) visibility is
toggled. If current window is floating or not
inside ABCD, normal movement is performed.
Distance for moving floating windows with this
action can be defined with the \fB\fC--speed\fR option.
Example: \fB\fC$ i3fyra --speed 30 -m r\fR Will move
current window 30 pixels to the right, if it is
floating.

.SS -s, --show           CONTAINER
.PP
If it doesn't exist, it will be created and
current window will be put in it. If it is
visible, nothing happens.

.SH ENVIRONMENT
.SS I3FYRA_WS
.PP
Workspace to use for i3fyra. If not set, the firs
workspace that request to create the layout will
be used.

.SS I3FYRA_MAIN_CONTAINER
.PP
This container will be the chosen when a container
is requested but not given. When using the command
autolayout (\fB\fC-a\fR) for example, if the window is
floating it will be sent to the main container, if
no other containers exist. Defaults to A.

.SS I3FYRA_ORIENTATION
.PP
If set to \fB\fCvertical\fR main split will be \fB\fCAC\fR and
families will be \fB\fCAB\fR and \fB\fCCD\fR\&. Otherwise main
split will be \fB\fCAB\fR and families will be \fB\fCAC\fR and
\fB\fCBD\fR\&.

.SS I3_KING_PID_FILE
.PP
When i3king is running this file contains the pid
of the i3king process. It is used by \fBi3fyra\fP to
know if i3king is running, if it is, it will try
to match windows against the rules when \fB\fC--float\fR
option toggles the floating state to tiled.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3fyra/options
================================================
--show|-s CONTAINER
--float|-a
--hide|-z CONTAINER
--layout|-l LAYOUT [--array ARRAY]
--move|-m DEST [--conid|-n CON_ID] [--speed|-p INT]
--orientation ORIENTATION
--clear-virtuals
--mono
[--verbose] [--dryrun] [--force|-f] 
--help|-h
--version|-v 



================================================
FILE: src/i3fyra/watch.sh
================================================
#!/bin/bash

_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
name=${_dir##*/}
monolith="_${name}.sh"

monolith="_${_dir##*/}.sh"
cmd_base+=("$_dir/$monolith" --array "$(< "$_dir/tests/array")" --dryrun --verbose)
cmd1+=(--move up)

loops=20

# source_files are all manually written code
# used to get correct linecount (LOC)
source_files=("$_dir/$name")

for f in "$_dir/func"/* ; do
  [[ ${f##*/} =~ ^[a-z] ]] && source_files+=("$f")
done

[[ -d "$_dir/awklib" ]] && source_files+=("$_dir/awklib"/*)

while read -r ; do
  clear
  make
  shellcheck "$_dir/$monolith" && {

    "${cmd_base[@]}" "${cmd1[@]}"
    "${cmd_base[@]}" "${cmd1[@]}" 2> "$_dir/tests/results"
    
    diff "$_dir/tests/results" "$_dir/tests/ref1"

    echo $'\n'"loop: $monolith ${cmd1[*]} ; x$loops:"
    time(
      while ((++i<loops));do 
        "${cmd_base[@]}" "${cmd1[@]}"
      done > /dev/null 2>&1
    )

    echo -n $'\n'"LOC: "
    cat "${source_files[@]}" | grep -E '^\s*[^#].+$' | wc -l
  }
done < <(
  inotifywait \
    --event close_write --monitor --recursive \
    --exclude '^[.]/((func/)?_.*)|([.]cache.+)|(tests.+)|(.+[.]1)' .
)



================================================
FILE: src/i3fyra/docs/description.md
================================================
The layout consists of four containers:  

``` text
  A B
  C D
```

A container can contain one or more windows. The
internal layout of the containers doesn't matter.
By default the layout of each container is
tabbed.  

A is always to the left of B and D. And always
above C. B is always to the right of A and C. And
always above D.  

This means that the containers will change names
if their position changes.  

The size of the containers are defined by the
three splits: AB, AC and BD.  

Container A and C belong to one family.  
Container B and D belong to one family.  

The visibility of containers and families can be
toggled. Not visible containers are placed on the
scratchpad.  

The visibility is toggled by either using `--show`
or `--hide`. But more often by moving a container
in an *impossible* direction,(*see examples
below*).  

The **i3fyra** layout is only active on one
workspace. That workspace can be set with the
environment variable: `i3FYRA_WS`, otherwise the
workspace active when the layout is created will
be used.  

The benefit of using this layout is that the
placement of windows is more predictable and
easier to control. Especially when using tabbed
containers, which are very clunky to use
with *default i3*.

# examples

If containers **A**,**B** and **C** are visible
but **D** is hidden or none existent, the visible
layout would looks like this:  

``` text
  A B
  C B
```

If action: `--move up` would be executed when
container **B** is active and **D** is hidden.
Container **D** would be shown. If action would
have been: `--move down`, **D** would be shown
but **B** would be placed below **D**, this means
that the containers will also swap names. If
action would have been `--move left` the active
window in B would be moved to container **A**. If
action was `--move right`, **A** and **C** would
be hidden:  

``` text
  B B
  B B
```

If we now `--move left`, **A** and **C**
would be shown again but to the right of **B**,
the containers would also change names, so **B**
becomes **A**, **A** becomes **B** and **C**
becomes **D**:  

``` text
  A B
  A D
```

If this doesn't make sense, check out this
demonstration on youtube:
https://youtu.be/kU8gb6WLFk8




================================================
FILE: src/i3fyra/docs/environment_variables.md
================================================

## ENVIRONMENT

### I3FYRA_WS

Workspace to use for i3fyra. If not set, the firs
workspace that request to create the layout will
be used.

### I3FYRA_MAIN_CONTAINER  

This container will be the chosen when a container
is requested but not given. When using the command
autolayout (`-a`) for example, if the window is
floating it will be sent to the main container, if
no other containers exist. Defaults to A.

### I3FYRA_ORIENTATION  

If set to `vertical` main split will be `AC` and
families will be `AB` and `CD`. Otherwise main
split will be `AB` and families will be `AC` and
`BD`.

### I3_KING_PID_FILE  

When i3king is running this file contains the pid
of the i3king process. It is used by **i3fyra** to
know if i3king is running, if it is, it will try
to match windows against the rules when `--float`
option toggles the floating state to tiled.



================================================
FILE: src/i3fyra/docs/options/array
================================================
ARRAY should be the output of `i3list`  

Use `--array ARRAY` to improve speed when
**i3fyra** is executed from a script that already
have the array, f.i. **i3run** and **i3Kornhe**.



================================================
FILE: src/i3fyra/docs/options/clear-virtuals
================================================
clear/reset virtual positions  



================================================
FILE: src/i3fyra/docs/options/conid
================================================
window with **CON_ID** will be used instead of active window  



================================================
FILE: src/i3fyra/docs/options/dryrun
================================================
don't execute wm commands  



================================================
FILE: src/i3fyra/docs/options/float
================================================
toggle floating state of a window  

Autolayout. If current window is tiled: floating
enabled If window is floating, it will be put in a
visible container. If there is no visible
containers. The window will be placed in a hidden
container. If no containers exist, container
'A'will be created and the window will be put
there.




================================================
FILE: src/i3fyra/docs/options/force
================================================
ignore virtual positioning.  



================================================
FILE: src/i3fyra/docs/options/hello
================================================
short description  

`--hello` long description  
this is the long description for `--hello`  
first line in `./docs/hello` is the short description.





================================================
FILE: src/i3fyra/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3fyra/docs/options/hide
================================================
Hide target containers if visible.  



================================================
FILE: src/i3fyra/docs/options/layout
================================================
update the size of the layout  

AB is point on the X axis, calculated from the
left side if INT is positive, from the right side
if it is negative. AC and BD is on Y axis from
the top if INT is positive, from the bottom if it
is negative. The whole argument needs to be
quoted. Example:  

`i3fyra --layout 'AB=-300 BD=420'

LAYOUT argument can also be the word 'redo', if it
is, the last layout appended will be restored.



================================================
FILE: src/i3fyra/docs/options/mono
================================================
toggle monocle mode 



================================================
FILE: src/i3fyra/docs/options/move
================================================
move window/create container  

DEST can either be the name of a container
(A|B|C|D), or it's position relative to the
current container with a direction:[`l`|`left`]
[`r`|`right`][`u`|`up`][`d`|`down`] If the
container doesnt exist it is created. If argument
is a direction and there is no container in that
direction, Connected container(s) visibility is
toggled. If current window is floating or not
inside ABCD, normal movement is performed.
Distance for moving floating windows with this
action can be defined with the `--speed` option.
Example: `$ i3fyra --speed 30 -m r` Will move
current window 30 pixels to the right, if it is
floating.




================================================
FILE: src/i3fyra/docs/options/orientation
================================================
main split orientation on i3fyra WS (horizontal|vertical|toggle)



================================================
FILE: src/i3fyra/docs/options/show
================================================
Show target container.  

If it doesn't exist, it will be created and
current window will be put in it. If it is
visible, nothing happens. 




================================================
FILE: src/i3fyra/docs/options/speed
================================================
distance in px a floating windows will be moved  



================================================
FILE: src/i3fyra/docs/options/verbose
================================================
print more stuff to stderr  



================================================
FILE: src/i3fyra/docs/options/version
================================================
louder output  



================================================
FILE: src/i3fyra/func/active_move_in_direction.sh
================================================
#!/bin/bash

move_normal() {
  local ldir

  case "${1:0:1}" in
    l ) ldir=left  ;;
    d ) ldir=down  ;;
    u ) ldir=up    ;;
    r ) ldir=right ;;
  esac

  messy "[con_id=${i3list[TWC]}]" move "$ldir"
}

active_move_in_direction() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local direction=$1

  ((i3list[TWF])) || [[ ${i3list[WTN]} != "${i3list[WFN]}" ]] \
    && exec i3Kornhe --array "$_array" m "$direction"

  # get visible info from i3viswiz
  # vw_target is the container currently at target pos
  # vw_parent is the parent of vw_target (A|B|C|D)
  # vw_groupsize is the number of siblings to the
  #   currently focused container
  # vw_wall is not none if target focus lands outside
  #   the current workspace
  local vw_wall vw_parent wizoutput
  declare -i vw_groupsize vw_target

  if [[ ${_o[dryrun]} ]]; then
    wizoutput=${i3list[VISWIZ]:=vw_target=3333 vw_wall=up vw_parent=C vw_groupsize=1}
    eval "$wizoutput"
  else
    read -r vw_wall vw_groupsize vw_target vw_parent < <(
      i3viswiz --parent=LIST  \
               --debug "wall,groupsize,trgcon,trgpar" \
               --debug-format "%v " "$direction"
    )

  fi

  ((_o[verbose])) && ERM "w "                         \
                         "vw_target=$vw_target "      \
                         "vw_wall=$vw_wall "          \
                         "vw_parent=$vw_parent "      \
                         "vw_groupsize=$vw_groupsize" \

  declare -A swapon

  swapon=([u]=AB [d]=CD [l]=AC [r]=BD)

  local sibdir target family sibling relatives

  ((_isvertical)) && sibdir=lr || sibdir=ud
    
  target=${i3list[TWP]}
  family=${i3list[TFF]}
  sibling=${i3list[TFS]}
  relatives=${i3list[TFO]}

  if   [[ ! ${i3list[TWP]} =~ [ABCD] ]]; then
    # when triggered on a tiled window on the i3fyra ws
    # that for some reason isn't part of the layout
    move_normal "$direction"
  elif [[ $vw_wall != none ]]; then # hit wall, toggle something

    if [[ $sibdir =~ $direction ]]; then # sibling toggling
      
      if [[ ${i3list[LVI]} =~ $sibling ]]; then
        container_hide "$sibling"
      elif [[ ${i3list[LHI]} =~ $sibling ]]; then
        container_show "$sibling"
        [[ ${swapon[$direction]} =~ $sibling ]] \
          && swap_move "i34$sibling" "i34$target"
      elif ((vw_groupsize > 1)); then # sibling doesn't exist
        active_move_to_container "$sibling"
        [[ ${swapon[$direction]} =~ $sibling ]] \
          || swap_move "i34$sibling" "i34$target"
        messy "[con_id=${i3list[TWC]}]" focus
      fi
    
    else # family toggling

      if [[ ${i3list[LVI]} =~ [${relatives}] ]]; then
        family_hide "$relatives"
      elif [[ ${i3list[LHI]} =~ [${relatives}] ]]; then
        family_show "$relatives"
        [[ ${swapon[$direction]} =~ [${relatives}] ]] \
          && swap_move "i34X$relatives" "i34X$family"
      elif ((vw_groupsize > 1)); then # no other family exist
        active_move_to_container "${relatives:0:1}"

        # hor: AC    vert: AB
        [[ $direction =~ u|l && $relatives = "${ori[fam2]}" ]] \
          && swap_move "i34X$relatives" "i34X$family"

        messy "[con_id=${i3list[TWC]}]" focus
      fi
    fi

  elif [[ $vw_parent = "$target" ]]; then
    # target and current container is the same
    # which indicates it is also not in a tabbed|stacked
    # container -> move normally
    move_normal "$direction"
  else

    if [[ ${i3list[C${vw_parent}L]} =~ splitv|splith && $direction =~ r|d ]]; then
      
      # move above/to the left of target container
      messy "[con_id=${vw_target}]" \
        mark --add i34tmp
      messy "[con_id=${i3list[TWC]}]" \
        move to mark i34tmp, swap mark i34tmp
      messy "[con_id=${vw_target}]" \
        mark --add --toggle i34tmp

    else 
      messy "[con_id=${i3list[TWC]}]" \
        move to mark "i34${vw_parent}", focus
    fi
  fi
  
}



================================================
FILE: src/i3fyra/func/active_move_to_container.sh
================================================
#!/bin/bash

active_move_to_container() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1 newcont

  [[ ${i3list[LEX]} =~ $target ]] || newcont=1

  container_show "$target"

  ((newcont)) || messy "[con_id=${i3list[TWC]}]"      \
                        focus, floating disable,      \
                        move to mark "i34$target", focus
}



================================================
FILE: src/i3fyra/func/apply_splits.sh
================================================
#!/bin/env bash

apply_splits(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local i tsn dir target sibling layout_string last_layout
  declare -i tsv splitexist size

  if [[ ${_o[layout]} = redo ]]
    then layout_string=${i3list[RED]//:/ }
    else layout_string=$1
  fi

  [[ $layout_string =~ = ]] \
    || ERX "$layout_string is not a valid layout"

  for i in ${layout_string}; do
    tsn=${i%=*} # target split name
    tsv=${i#*=} # target split value

    if [[ $tsn = "${ori[main]}" || $tsn = main ]]; then
      tsn=${ori[main]}
      target="X${ori[fam1]}" # name of split to resize
      dir=${ori[resizemain]} size=${ori[sizemain]}

      # when --layout option is used, invert split
      # if families are inverted
      # container A virtual position (VPA)
      # inverse mainsplit (2|3 || 1|3)
      [[ -n ${_o[layout]} ]] \
        && (( (_isvertical  && i3list[VPA] > 1)    \
           || (!_isvertical && i3list[VPA] % 2) )) \
        && ((tsv *= -1))

      [[ ${i3list[X${tsn}]} ]] && splitexist=1
    else
      target=${tsn:0:1} sibling=${tsn:1:1}
      dir=${ori[resizefam]} size=${ori[sizefam]}

      [[ ${i3list[LVI]} =~ $target && ${i3list[LVI]} =~ $sibling ]] \
        && splitexist=1
    fi

    ((tsv<0)) && tsv=$((size-(tsv*-1)))

    last_layout+="${tsn}=${i3list[S${tsn}]}:"

    ((splitexist)) && {
      # i3list[Sxx] = current/actual split xx
      i3list[S${tsn}]=${tsv}
      sezzy "con_mark=i34${target}" resize set "$dir" "$tsv" px
    }

    # i3list[Mxx] = last/stored    split xx
    # store split even if its not visible
    mark_vars["i34M${tsn}"]=$tsv

  done

  # store last_layout for --layout redo
  [[ ${_o[layout]} ]] && mark_vars["i34RED"]=$last_layout
}



================================================
FILE: src/i3fyra/func/CLEANUP_.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  ((${#mark_vars[@]})) && varset

  [[ -n $_msgstring ]] \
    && >&2 i3-msg "$_qflag" "${_msgstring%;}"

  ((${#new_size[@]})) && {
    for k in "${!new_size[@]}"; do
      _sizestring+="[$k] ${new_size[$k]};"
    done
    i3-msg >&2 "${qflag:-}" "${_sizestring%;}"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3fyra/func/container_create.sh
================================================
#!/bin/bash

container_create() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1

  messy "[con_id=${i3list[TWC]}]"       \
    floating disable,                   \
    move --no-auto-back-and-forth to workspace "${i3list[WFN]}"
  [[ ${i3list["X${ori[main]}"]} ]] && {
    messy "[con_mark=i34X${ori[main]}]" \
      split "${ori[charmain]}"
    messy "[con_id=${i3list[TWC]}]" \
      move to mark "i34X${ori[main]}"
  }

  messy "[con_id=${i3list[TWC]}]" \
    split "${ori[charmain]}",       \
    layout tabbed,                \
    focus, focus parent

  messy mark "i34$target"
}



================================================
FILE: src/i3fyra/func/container_hide.sh
================================================
#!/bin/bash

container_hide(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1
  local target_family sibling
  declare -i split_main split_family

  [[ ${#target} -gt 1 ]] && {
    multi_hide "$target"
    return
  }

  [[ ${ori[fam1]} =~ $target ]] \
    && target_family=${ori[fam1]} \
    || target_family=${ori[fam2]}


  split_main=${i3list[S${ori[main]}]:=0}
  split_family=${i3list[S$target_family]:=0}

  sibling=${target_family/$target/}

  messy "[con_mark=i34${target}]" move scratchpad
  i3list[LVI]=${i3list[LVI]/$target/}
  i3list[LHI]+="$target"

  # if target is last of it's fam, note it.
  # else focus sibling as the last operation (main())
  if [[ ${i3list[LVI]} =~ $sibling ]]; then
    i3list[SIBFOC]=$sibling
    mark_vars["i34F${target_family}"]=${i3list[F${target_family}]/$target/}
  else
    mark_vars["i34F${target_family}"]=$target
  fi

  # note splits
  ((split_main && split_main != ori[sizemain])) && {
    mark_vars["i34M${ori[main]}"]=$split_main
    i3list[M${main}]=$split_main
    mark_vars["i34M${target_family}"]=$split_family
    i3list[M${target_family}]=$split_family
  }

}



================================================
FILE: src/i3fyra/func/container_show.sh
================================================
#!/bin/bash

container_show() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1 target_family

  [[ ${#target} -gt 1 ]] && {
    multi_show "$target"
    return
  }

  [[ ${ori[fam1]} =~ $target ]] \
    && target_family=${ori[fam1]} \
    || target_family=${ori[fam2]}

  if [[ ${i3list[LVI]} =~ $target ]]; then
    return
  elif [[ ! ${i3list[LHI]} =~ $target ]]; then
    container_create "$target"
  elif [[ ${i3list["N$target_family"]} = "${i3list[WFN]}" ]]; then
    messy "[con_mark=i34${target}]"       \
      move --no-auto-back-and-forth to workspace "${i3list[WFN]}", \
      floating disable
  fi

  family_show "$target_family" "$target"

  i3list[LHI]=${i3list[LHI]/$target/}
  i3list[LVI]+=$target
  i3list[LEX]="${i3list[LHI]}${i3list[LVI]}"

  [[ ${i3list["N${target_family}"]} = "${i3list[WFN]}" ]] && {
    messy "[con_mark=i34$target]" \
      move to mark "i34X$target_family"

    [[ $target = "${target_family:0:1}" ]] && {
      messy "[con_mark=i34$target]" \
        swap mark "i34${target_family:1:1}"
    }

    tspl=${i3list[M${target_family}]}
    tdim=${ori[sizefam]}

    ((tspl  )) && {
      i3list[S${target_family}]=$((tdim/2))
      apply_splits "${target_family}=$tspl"
    }
  }
}



================================================
FILE: src/i3fyra/func/family_create.sh
================================================
#!/bin/bash

family_create() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target_family=$1 target_container=$2

  if [[ ${i3list["X${ori[main]}"]} ]]; then
    messy "[con_mark=i34X${ori[main]}]" \
      split "${ori[charmain]}"
    messy "[con_mark=i34$target_container]" \
      move --no-auto-back-and-forth to workspace "${i3list[WFN]}", \
      floating disable, \
      move to mark "i34X${ori[main]}", split "${ori[charmain]}", \
      layout "split${ori[charfam]}", \
      focus, focus parent
    messy mark "i34X$target_family"
  else
    messy "[con_mark=i34$target_container]" \
      move --no-auto-back-and-forth to workspace "${i3list[WFN]}", \
      floating disable, \
      layout "split${ori[charfam]}", \
      focus, focus parent
    messy mark "i34X$target_family"
    messy "[con_mark=i34X$target_family]" \
      layout "split${ori[charmain]}", \
      focus, focus parent
    messy mark "i34X${ori[main]}"
  fi
}



================================================
FILE: src/i3fyra/func/family_hide.sh
================================================
#!/bin/bash

family_hide(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local family=$1
  local child childs

  declare -i famw famh famx famy split_size
  declare -a visible_children

  split_size=$(( ( _isvertical ? i3list[WFH] : i3list[WFW] ) - i3list["S${ori[main]}"] ))
  ((split_size < 0)) && ((split_size *= -1))

  famw=$((_isvertical ? i3list[WFW] : split_size ))
  famh=$((_isvertical ? split_size : i3list[WFH]))
  famx=$((_isvertical ? 0 : i3list["S${ori[main]}"]))
  famy=$((_isvertical ? i3list["S${ori[main]}"] : 0))

  for child in "${family:0:1}" "${family:1:1}"; do
    [[ ${i3list[LVI]} =~ $child ]] \
      && visible_children+=("$child")
  done

  if ((${#visible_children[@]} == 1)); then
    child=${visible_children[0]}
    messy "[con_mark=i34$child]" \
      move scratchpad

    i3list[LVI]=${i3list[LVI]/$child/}
    i3list[LHI]+=$child

    unset 'i3list[X$family]'
    i3list[F$family]=$child
    mark_vars["i34F${family}"]=$child
  else
    messy "[con_mark=i34X${family}]"                \
      floating enable,                              \
      resize set "$famw" "$famh",                   \
      move absolute position "$famx" px "$famy" px, \
      move scratchpad

    for child in "${visible_children[@]}"; do
      i3list[LVI]=${i3list[LVI]/$child/}
      i3list[LHI]+=$child
      childs+=$child
    done

    mark_vars["i34F${family}"]=$childs
    mark_vars["i34M${family}"]=${i3list[S${family}]:=0}
  fi

  mark_vars["i34M${ori[main]}"]=${i3list[S${ori[main]}]:=0}

}



================================================
FILE: src/i3fyra/func/family_show.sh
================================================
#!/bin/bash

family_show() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target_family=$1 target_container=${2:-}
  local other_family

  [[ ${i3list["N${target_family}"]} = "${i3list[WFN]}" ]] \
    && return

  
  if [[ -z ${i3list[X${target_family}]} ]]; then
    # when family_hide and family contains only
    # one container. The family is destroyed and
    # the container is moved to the scratchpad
    # but noted in [F$family]
    last_in_fam=${i3list[F$target_family]:0:1}

    if [[ ! $target_container ]]; then
     [[ ${i3list[LEX]} =~ $last_in_fam ]] && {
       family_create "$target_family" "$last_in_fam"
     }
    else
      family_create "$target_family" "$target_container"
    fi

  elif [[ ${i3list["N${target_family}"]} != "${i3list[WFN]}" ]]; then

    messy "[con_mark=i34X${target_family}]" \
      move --no-auto-back-and-forth to workspace "${i3list[WFN]}", \
      floating disable

    if [[ ${i3list["X${ori[main]}"]} ]]; then

      messy "[con_mark=i34X${ori[main]}]"     \
        split "${ori[charmain]}"
      messy "[con_mark=i34X${target_family}]" \
        move to mark "i34X${ori[main]}"

    else
      messy "[con_mark=i34X${target_family}]" \
        layout split"${ori[charmain]}", \
        focus, focus parent
      messy mark "i34X${ori[main]}"
    fi
  fi

  # when target family is AC or AB, it is 
  # the "first" family in the main container
  # if the other family is visible, 
  # we need to swap them
  [[ $target_family =~ A ]] && {

    [[ ${ori[fam1]} =~ A ]] \
      && other_family=${ori[fam2]} \
      || other_family=${ori[fam1]}

    [[ ${i3list["N${other_family}"]} = "${i3list[WFN]}" ]] \
      && messy "[con_mark=i34X${target_family}]"  \
           swap mark "i34X${other_family}"
  }

  apply_splits "${ori[main]}=${i3list[M${ori[main]}]}"
}



================================================
FILE: src/i3fyra/func/float_toggle.sh
================================================
#!/bin/bash

float_toggle(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local target

  # AWF - 1 = floating; 0 = tiled
  if ((i3list[AWF]==1)); then

    # WSA != i3fyra && normal tiling
    if [[ ${i3list[WAN]} != "${i3list[WFN]}" ]]; then
      messy "[con_id=${i3list[AWC]}]" floating disable
      return

    # only on fyra WS, if i3king rule for window
    # exist that doesn't do: "floating enable",
    # execute that rule and return
    elif [[ -f $I3_KING_PID_FILE ]]; then
      mapfile -t king_commands <<< "$(i3king --conid "${i3list[TWC]}" --print-commands)"
      for command in "${!king_commands[@]}"; do
        if [[ ${king_commands[command]} =~ floating\ enable ]]
          then unset 'king_commands[command]'
          else messy "${king_commands[command]}"
        fi
      done

      [[ ${king_commands[*]} ]] && return
    fi
    

    if [[ ${i3list[LVI]} =~ $I3FYRA_MAIN_CONTAINER ]]; then
      target=$I3FYRA_MAIN_CONTAINER
    elif [[ ${i3list[LVI]} ]]; then
      target=${i3list[LVI]:0:1}
    elif [[ ${i3list[LHI]} ]]; then
      target=${i3list[LHI]:0:1}
    else
      target=$I3FYRA_MAIN_CONTAINER
    fi

     if [[ ${i3list[LEX]} =~ $target ]]; then
      container_show "$target"
      messy "[con_id=${i3list[AWC]}]" floating disable, \
        move to mark "i34${target}"
    else
      # if $target container doesn't exist, create it
      container_show "$target"
    fi
  else
    # AWF == 0 && make AWC floating
    messy "[con_id=${i3list[AWC]}]" floating enable
  fi
}



================================================
FILE: src/i3fyra/func/initialize_globals.sh
================================================
#!/bin/bash

initialize_globals() {

  declare -Ag i3list
  declare -Ag mark_vars
  declare -Ag new_size
  declare -Ag ori

  _marks_json=$(i3-msg -t get_marks)

  [[ ! $_action =~ orintation|layout && ! $_marks_json =~ i3fyra_ws ]] && {
    # the i3fyra_ws mark/var is read by i3list
    # if it isn't present no info regarding i3fyra
    # will be in the output of i3list
    # we set the mark/var here

    ((_o[verbose])) && ERM INIT FYRA_WS

    [[ $I3FYRA_WS ]] || {
      eval "$(i3list)"
      I3FYRA_WS=${i3list[WAN]}
    }

    (( _o[float] && i3list[AWF]==0 )) \
      || i3var set i3fyra_ws "$I3FYRA_WS"

  }

  [[ $_marks_json =~ i34ORI ]] || {

    ((_o[verbose])) && ERM INIT FYRA_ORIENTATION

    i3var set i34ORI "${_o[orientation]:-$I3FYRA_ORIENTATION}"
  }

  # _qflag is option added to i3-msg (cleanup())
  ((_o[verbose])) || _qflag='-q'

  : "${_o[array]:=$(i3list ${_o[conid]:+-n ${_o[conid]}})}"
  eval "${_array:=${_o[array]}}"

  declare -gi _isvertical

  declare -i sw=${i3list[WFW]:-${i3list[WAW]}}
  declare -i sh=${i3list[WFH]:-${i3list[WAH]}}
  declare -i swh=$((sw/2))
  declare -i shh=$((sh/2))

  if [[ ${i3list[ORI]} = vertical ]]; then
    _isvertical=1
    ori=(

      [main]=AC [fam1]=AB [fam2]=CD [fam3]=BD

      [charmain]=v        [charfam]=h
      [movemain]=down     [movefam]=right
      [resizemain]=height [resizefam]=width
      [sizemain]=$sh      [sizefam]=$sw 
      [sizemainhalf]=$shh [sizefamhalf]=$swh

    )
  else
    _isvertical=0
    ori=(

      [main]=AB [fam1]=AC [fam2]=BD [fam3]=CD

      [charmain]=h        [charfam]=v
      [movemain]=right    [movefam]=down
      [resizemain]=width  [resizefam]=height
      [sizemain]=$sw      [sizefam]=$sh
      [sizemainhalf]=$swh [sizefamhalf]=$shh

    )
  fi
}



================================================
FILE: src/i3fyra/func/monocle.sh
================================================
#!/bin/bash

# https://github.com/budlabs/i3ass/issues/225
monocle_toggle() {

  ((i3list[WSA] == i3list[WSF])) || {
    ERM "mono operation only possible on with i3fyra workspace"
    return
  }

  if ((${#i3list[LVI]} < 2)); then
    # use family memory if it exist
    last_seen="${i3list[F${ori[fam1]}]}${i3list[F${ori[fam2]}]}"
    [[ $last_seen ]] \
      && to_show=$last_seen \
      || to_show=${i3list[LEX]}
    
    multi_show "$to_show"
  else
    multi_hide "${i3list[LVI]/${i3list[AWP]}/}"
  fi
}



================================================
FILE: src/i3fyra/func/multi_hide.sh
================================================
#!/bin/bash

multi_hide(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local arg=$1 trg trgs i f1=${ori[fam1]} f2=${ori[fam2]}

  # only hide visible containers in arg
  for (( i = 0; i < ${#arg}; i++ )); do
    trg=${arg:$i:1}
    [[ ${i3list[LVI]} =~ $trg ]] && trgs+=$trg
  done

  ((${#trgs})) || return
  
  # hide whole families if present in arg and visible
  [[ $trgs =~ ${f1:0:1} && $trgs =~ ${f1:1:1} ]] \
    && trgs=${trgs//[$f1]/} && family_hide "$f1"
  
  [[ $trgs =~ ${f2:0:1} && $trgs =~ ${f2:1:1} ]] \
    && trgs=${trgs//[$f2]/} && family_hide "$f2"

  # hide rest if any
  ((${#trgs})) && for ((i=0;i<${#trgs};i++)); do
    single=${trgs:$i:1}
    container_hide "$single"

    # setting the family memory to the single hidden
    # container, let us restore with --mono
    [[ $f1 =~ $single ]] \
      && mark_vars["i34F${f1}"]=$single \
      || mark_vars["i34F${f2}"]=$single
  done
}



================================================
FILE: src/i3fyra/func/multi_show.sh
================================================
#!/bin/bash

multi_show(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local arg=$1 trg trgs i f1=${ori[fam1]} f2=${ori[fam2]}

  # only show hidden containers in arg
  for (( i = 0; i < ${#arg}; i++ )); do
    trg=${arg:$i:1}
    [[ ${i3list[LHI]} =~ $trg ]] \
      && container_show "$trg"
  done
}



================================================
FILE: src/i3fyra/func/orientation.sh
================================================
#!/bin/bash

orientation() {

  local new_orientation=$1 
  local old_orientation=${i3list[ORI]}
  local i container

  [[ $new_orientation = toggle ]] && {
    if [[ $old_orientation = vertical ]]
      then new_orientation=horizontal
      else new_orientation=vertical
    fi
  }

  [[ $new_orientation = "$old_orientation" ]] && return

  declare -A new_ori
  declare -a in_the_wrong

  [[ $new_orientation = vertical ]] \
    && new_ori=(
                  [main]=AC [fam1]=AB [fam2]=CD 
                  [lo_main]=splitv [lo_fam]=splith 
                  [C_to]=CD [B_to]=AB [C_from]=BD [B_from]=AC
                ) \
    || new_ori=(
                  [main]=AB [fam1]=AC [fam2]=BD 
                  [lo_main]=splith [lo_fam]=splitv 
                  [C_to]=AC [B_to]=BD [C_from]=AB [B_from]=CD
                )

  # ori array is defined in initialize_globals
  # and have the old orientation details
  [[ ${i3list[N"${ori[main]}"]} ]] \
    && messy "[con_mark=i34X${ori[main]}] mark i34MAIN"

  [[ ${i3list[N"${ori[fam1]}"]} ]]         \
    && messy "[con_mark=i34X${ori[fam1]}]" \
       layout "${new_ori[lo_main]}",       \
       mark "i34X${new_ori[fam1]}"

  [[ ${i3list[N"${ori[fam2]}"]} ]]         \
    && messy "[con_mark=i34X${ori[fam2]}]" \
       layout "${new_ori[lo_main]}",       \
       mark "i34X${new_ori[fam2]}"

  [[ ${i3list[LEX]} =~ B ]] \
    && [[ ${i3list[N${new_ori[B_from]}]} = "${i3list[CBN]}" ]] \
    && in_the_wrong[i++]=B
    
  [[ ${i3list[LEX]} =~ C ]] \
    && [[ ${i3list[N${new_ori[C_from]}]} = "${i3list[CCN]}" ]] \
    && in_the_wrong[i]=C

  if ((${#in_the_wrong[@]} == 2)); then
    messy "[con_mark=i34B]" swap mark i34C
  elif ((${#in_the_wrong[@]} == 1)); then
    container=${in_the_wrong[0]}
    messy "[con_mark=i34${container}]" \
          "move to mark i34X${new_ori[${container}_to]}"
  fi

  [[ $new_orientation = vertical && ${in_the_wrong[*]} =~ C ]] \
    && messy "[con_mark=i34C] swap mark i34${new_ori[C_to]/C}"

  [[ $new_orientation = horizontal && ${in_the_wrong[*]} =~ B ]] \
    && messy "[con_mark=i34B] swap mark i34${new_ori[B_to]/B}"

  # test below is true if f.i orientation WAS h and only AC
  # is visible. If BD is on the scratchpad, it
  # will now be renamed (CD), but CD needs to be on this
  # ws with C innit.
  [[ ! ${in_the_wrong[*]} && ${i3list[LVI]} =~ ([BC]) ]] && {
    container=${BASH_REMATCH[1]}
    [[ ${i3list[N"${new_ori[${container}_from]}"]} ]] \
      && messy "[con_mark=i34X${new_ori[${container}_to]}]" unmark
    messy "[con_mark=i34${container}]"      \
          "move to mark i34MAIN", split "${new_ori[lo_main]: -1}",  \
          focus, focus parent
    messy mark "i34X${new_ori[${container}_to]}"
  }

  for cont in A B C D; do
    [[ ${i3list[LVI]} =~ $cont ]] || continue
    messy "[con_mark=i34$cont] layout ${new_ori[lo_fam]}"
  done
  
  messy "[con_mark=i34MAIN] mark i34X${new_ori[main]}"

  i3var set i34ORI "$new_orientation"
}



================================================
FILE: src/i3fyra/func/sezzy.sh
================================================
#!/bin/bash

sezzy() {
  local criterion=$1 args
  shift
  args=$*
  (( _o[verbose] )) && ERM "r [$criterion] $args"
  (( _o[dryrun]  )) || new_size["$criterion"]=$args
}



================================================
FILE: src/i3fyra/func/swap_move.sh
================================================
#!/bin/bash

swap_move(){

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local m1=$1 m2=$2
  local c1 c2 i1 i2 v1 v2 tmrk k
  declare -i tspl tdim

  messy "[con_mark=${m1}]"  swap mark "${m2}", mark i34tmp
  messy "[con_mark=${m2}]"  mark "${m1}"
  messy "[con_mark=i34tmp]" mark "${m2}"

  # ck_ -> character key
  # ik_ -> integer key
  declare -A ck_default
  declare -A ck_target
  declare -a ik_current

  ck_default=([A]=0 [B]=1 [C]=2 [D]=3)
  
  # if: i3list[VPA]=2 ; i3list[VPC]=0 \
  #       -> ik_current=([0]=C [1]=B [2]=A [3]=D)
  for k in A B C D; do
    current_val=${i3list[VP${k}]:=${ck_default[$k]}}
    ik_current[current_val]=$k
  done

   ERM "${ik_current[*]} LLLLLLLL"

  # family marks always contain 'X'
  # when we swap families all virtual positions
  # are swapped
  if [[ $m1 =~ X ]]; then

    ((_isvertical)) \
      && ck_target=([A]=C [B]=D [C]=A [D]=B) \
      || ck_target=([A]=B [B]=A [C]=D [D]=C)

    tdim=${ori[sizemain]}
    tmrk=${ori[main]}
    tspl=${i3list[S$tmrk]}

    mark_vars[i34M${ori[fam1]}]=${i3list[M${ori[fam2]}]}
    mark_vars[i34M${ori[fam2]}]=${i3list[M${ori[fam1]}]}

    ERM "VPA=${i3list[VPA]}; VPB=${i3list[VPB]}; VPC=${i3list[VPC]}; VPD=${i3list[VPD]}"
    for k in A B C D; do

      c1=${k}                     c2=${ck_target[$k]}
      i1=${ck_default[$c1]}       i2=${ck_default[$c2]}
      v1=${ik_current[$i1]:=$c1}  v2=${ik_current[$i2]:=$c2}

      mark_vars[i34VP$v1]=$i2
      mark_vars[i34VP$v2]=$i1

      [[ ${i3list[LEX]} =~ $k ]] || continue
      messy "[con_mark=i34$k]" mark "i34tmp$k"
    done

    for k in A B C D; do
      [[ ${i3list[LEX]} =~ $k ]] || continue
      messy "[con_mark=i34tmp$k]" mark "i34${ck_target[$k]}"
    done

    
  else # swap within family

    c1=${m1#i34}                c2=${m2#i34}
    i1=${ck_default[$c1]}       i2=${ck_default[$c2]}
    v1=${ik_current[$i1]:=$c1}  v2=${ik_current[$i2]:=$c2}

    mark_vars[i34VP$v1]=$i2
    mark_vars[i34VP$v2]=$i1

    [[ ${ori[fam1]} =~ $c1 ]] \
      && tmrk=${ori[fam1]} \
      || tmrk=${ori[fam2]}

    tspl="${i3list[S${tmrk}]}"
    tdim=${ori[sizefam]}

  fi

  # invert split
  ((tspl+tdim)) && apply_splits "$tmrk=$((tdim-tspl))"

  messy "[con_id=${i3list[TWC]}]" focus
}



================================================
FILE: src/i3fyra/func/varset.sh
================================================
#!/bin/bash

varset() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}(${mark_vars[*]})"

  local key val re  current_value

  for key in "${!mark_vars[@]}"; do
    unset current_value
    val=${mark_vars[$key]}

    re="\"${key}=([^\"]*)\""

    [[ $_marks_json =~ $re ]] && current_value=${BASH_REMATCH[1]}

    [[ $current_value = "$val" ]] && continue

    new_mark="${key}=$val"
    old_mark="${key}=$current_value"

    # this will remove the old mark
    [[ $current_value ]] \
      && messy "[con_id=${i3list[RID]}] mark --toggle --add $old_mark"

    messy "[con_id=${i3list[RID]}] mark --add $new_mark"

  done
}



================================================
FILE: src/i3fyra/func/virtual_position.sh
================================================
#!/bin/bash

# takes a string with one or more container names (ABCD)
# returns virtual positions for the containers
virtual_position() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target=$1
  declare -i vpos k
  declare -a q

  # if target is A && i3list[VPA] == 2
  # then target=@@2 -> target=C

  [[ $target =~ ^[ABCD=[:space:]]+$ ]] && {
    
    q=([0]=A [1]=B [2]=C [3]=D)

    for k in 0 1 2 3; do
      vpos=${i3list[VP${q[$k]}]:=$k}
      (( k != vpos )) && [[ $target =~ ${q[k]} ]] \
        && target=${target//${q[$k]}/@@$vpos}
    done

    [[ $target =~ @@ ]] && for k in 0 1 2 3; do
      target=${target//@@$k/${q[$k]}}
    done

  }

  echo "$target"
}



================================================
SYMLINK: src/i3fyra/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3fyra/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3fyra/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3fyra/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3fyra/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3fyra/share.mak -> share.mak
================================================



================================================
FILE: src/i3fyra/tests/array
================================================
i3list[AWF]=0              	# Active Window floating
i3list[ATW]=1520           	# Active Window tab width
i3list[ATX]=0              	# Active Window tab x postion
i3list[AWH]=220            	# Active Window height
i3list[AWI]=8388888        	# Active Window id
i3list[AWW]=1520           	# Active Window width
i3list[AFO]=BD             	# Active Window relatives
i3list[AWX]=0              	# Active Window x position
i3list[AFC]=D              	# Active Window cousin
i3list[AWY]=0              	# Active Window y position
i3list[AFF]=AC             	# Active Window family
i3list[AFS]=C              	# Active Window sibling
i3list[AWB]=20             	# Active Window titlebar height
i3list[AFT]=B              	# Active Window twin
i3list[AWP]=A              	# Active Window parent
i3list[AWC]=94622836163952 	# Active Window con_id
i3list[TWB]=20             	# Target Window titlebar height
i3list[TFS]=C              	# Target Window sibling
i3list[TFF]=AC             	# Target Window family
i3list[TWP]=A              	# Target Window Parent container
i3list[TFT]=B              	# Target Window twin
i3list[TWC]=94622836163952 	# Target Window con_id
i3list[TWF]=0              	# Target Window Floating
i3list[TTW]=1520           	# Target Window tab width
i3list[TWH]=220            	# Target Window height
i3list[TTX]=0              	# Target Window tab x postion
i3list[TWI]=8388888        	# Target Window id
i3list[TWW]=1520           	# Target Window width
i3list[TWX]=0              	# Target Window x position
i3list[TFO]=BD             	# Target Window relatives
i3list[TWY]=0              	# Target Window y position
i3list[TFC]=D              	# Target Window cousin
i3list[CAF]=94622836163952 	# Container A Focused container id
i3list[CBF]=94622834984992 	# Container B Focused container id
i3list[CCF]=94622834928688 	# Container C Focused container id
i3list[CDF]=94622835840096 	# Container D Focused container id
i3list[CAW]=1              	# Container A Workspace
i3list[CBW]=1              	# Container B Workspace
i3list[CCW]=1              	# Container C Workspace
i3list[CAL]=tabbed         	# Container A Layout
i3list[CDW]=1              	# Container D Workspace
i3list[CBL]=tabbed         	# Container B Layout
i3list[CCL]=tabbed         	# Container C Layout
i3list[CDL]=tabbed         	# Container D Layout
i3list[SAB]=1520           	# Current split: AB
i3list[MCD]=770            	# Stored split: CD
i3list[SAC]=220            	# Current split: AC
i3list[SBD]=252            	# Current split: BD
i3list[SCD]=1520           	# Current split: CD
i3list[MAB]=1520           	# Stored split: AB
i3list[MAC]=220            	# Stored split: AC
i3list[MBD]=252            	# Stored split: BD
i3list[LEX]=DCBA           	# Existing containers (LVI+LHI)
i3list[LHI]=               	# Hidden i3fyra containers
i3list[LVI]=DCBA           	# Visible i3fyra containers
i3list[FAC]=AC             	# Family AC memory
i3list[FBD]=BD             	# Family BD memory
i3list[LAL]=ACBD           	# All containers in family order
i3list[WAH]=1080           	# Active Workspace height
i3list[WAI]=94622835607392 	# Active Workspace con_id
i3list[WAW]=1920           	# Active Workspace width
i3list[WSF]=1              	# i3fyra Workspace Number
i3list[WAX]=0              	# Active Workspace x position
i3list[WST]=1              	# Target Workspace Number
i3list[WAY]=0              	# Active Workspace y position
i3list[WFH]=1080           	# i3fyra Workspace Height
i3list[WTH]=1080           	# Target Workspace Height
i3list[WFI]=94622835607392 	# i3fyra Workspace con_id
i3list[WAN]='1'            	# Active Workspace name
i3list[WTI]=94622835607392 	# Target Workspace con_id
i3list[WFW]=1920           	# i3fyra Workspace Width
i3list[WTW]=1920           	# Target Workspace Width
i3list[WFX]=0              	# i3fyra Workspace X position
i3list[WTX]=0              	# Target Workspace X poistion
i3list[WFY]=0              	# i3fyra Workspace Y position
i3list[WTY]=0              	# Target Workspace Y position
i3list[WFN]='1'            	# i3fyra Workspace name
i3list[WSA]=1              	# Active Workspace number
i3list[WTN]='1'            	# Target Workspace name



================================================
FILE: src/i3fyra/tests/ref1
================================================
 
f windowmove(Up)
f containerhide(C)
m [con_mark=i34C] move scratchpad
m [con_mark=i34A] focus child
f varset(i34MAB 1520 i34MAC 220)
m [con_mark=i34MAB] mark i34MAB=1520
m [con_mark=i34MAC] mark i34MAC=220



================================================
FILE: src/i3fyra/tests/results
================================================
 
f windowmove(Up)
f containerhide(C)
m [con_mark=i34C] move scratchpad
m [con_mark=i34A] focus child
f cleanup()
f varset(i34MAB 1520 i34MAC 220)
m [con_mark=i34MAB] mark i34MAB=1520
m [con_mark=i34MAC] mark i34MAC=220
m [con_mark=i34GHOST] move scratchpad



================================================
FILE: src/i3get/config.mak
================================================
NAME         := i3get
VERSION      := 0.94
CREATED      := 2017-03-08
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := i3get [OPTIONS]
DESCRIPTION  := prints info about a specific window to stdout
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT =                \
	$(CACHE_DIR)/help_table.txt   \
	$(CACHE_DIR)/long_help.md     \
	$(DOCS_DIR)/description.md    \
	$(CACHE_DIR)/copyright.txt


$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  
	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md
	  
	  printf '%s\n' \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt

	} > $@



================================================
FILE: src/i3get/i3get
================================================
#!/bin/bash

main(){

  : "${_o[winid]:-${_o[id]}}"

  result=$(get_window)
  timeout=$SECONDS

  ((_o[synk])) && [[ ! $result ]] && sleep .1 && while :; do
    result=$(get_window)
    [[ $result || $((SECONDS-timeout)) -gt ${_o[timeout]:-60} ]] \
      && break
    i3-msg -qt subscribe '["window"]'
  done

  [[ $result ]] && echo "$result"
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3get/i3get.1
================================================
.nh
.TH I3GET   2022-07-19 budlabs "User Manuals"
.SH NAME
.PP
i3get - prints info about a specific window to stdout

.SH SYNOPSIS
.PP
\fB\fCi3get [OPTIONS]\fR

.SH OPTIONS
.PP
.RS

.nf
-c, --class        CLASS         | target windows with CLASS  
-n, --conid        CON_ID        | target windows with CON_ID  
-h, --help                       | print help and exit  
-d, --id           WIN_ID        | target windows with WIN_ID  
-i, --instance     INSTANCE      | target windows with INSTANCE
--json             TREE          | Use TREE instead of the output of `i3-msg -t get_tree`
-m, --mark         MARK          | MARK | target containers with MARK  
-r, --print        OUTPUT        | what to print. defaults to 'n'  
--print-format     FORMAT_STRING | %v is value, %k is name. default: '%vn'  
--role             ROLE          | match ROLE against window_role  
-y, --synk                       | block script till window exist.
--timeout          SECONDS       | seconds for --synk to timeout (defaults to 60)  
-t, --title        TITLE         | target windows with TITLE  
-o, --titleformat  TITLE_FORMAT  | match TITLE_FORMAT against title_format  
--type             TYPE          | match TYPE against window_type  
--verbose                        | print messages to stderr  
-v, --version                    | print version info and exit  
--winid            WIN_ID        | target windows with WIN_ID  

.fi
.RE

.SS -r, --print        OUTPUT
.PP
\fIOUTPUT\fP can be one or more of the following
characters:

.TS
allbox;
l l l 
l l l .
\fB\fCcharacter\fR	\fB\fCprint\fR	\fB\fCreturn\fR
\fB\fCt\fR	title	string
\fB\fCc\fR	class	string
\fB\fCi\fR	instance	string
\fB\fCd\fR	Window ID	INT
\fB\fCn\fR	Con_Id (default)	INT
\fB\fCm\fR	mark	JSON list
\fB\fCw\fR	workspace number	INT
\fB\fCW\fR	workspace name	STRING
\fB\fCa\fR	is active	true or false
\fB\fCf\fR	floating state	string
\fB\fCo\fR	title format	string
\fB\fCe\fR	fullscreen	1 or 0
\fB\fCs\fR	sticky	true or false
\fB\fCu\fR	urgent	true or false
\fB\fCy\fR	window_type	string
\fB\fCr\fR	window_role	string
.TE

.PP
Each character in OUTPUT will be tested and the
return value will be printed on a new line. If no
value is found, \fB\fC--i3get could not find:
CHARACTER\fR will get printed.

.PP
In the example below, the target window did not have a mark:

.PP
.RS

.nf
$ i3get -r tfcmw
/dev/pts/9
user_off
URxvt
--i3get could not find: m
1

.fi
.RE

.SH USAGE
.PP
Search for \fB\fCCRITERIA\fR in the output of \fB\fCi3-msg -t get_tree\fR,
return desired information.
If no arguments are passed,
\fB\fCcon_id\fR of active window is returned.
If there is more then one criterion,
all of them must be true to get results.


.SH EXAMPLES
.PP
search for window with instance name sublime_text.
Request workspace, title and floating state.

.PP
.RS

.nf
$ i3get --instance sublime_text --print wtf 
1
~/src/bash/i3ass/i3get (i3ass) - Sublime Text
user_off

.fi
.RE

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3get/options
================================================
[--class|-c CLASS]
[--instance|-i INSTANCE]
[--title|-t TITLE]
[--conid|-n CON_ID]
[--id|-d WIN_ID]
[--winid WIN_ID]
[--mark|-m MARK]
[--titleformat|-o TITLE_FORMAT]
[--role ROLE]
[--type TYPE]
[--synk|-y]
[--print|-r OUTPUT]
[--print-format FORMAT_STRING]
[--json TREE]
--timeout SECONDS
--help|-h
--version|-v
--verbose



================================================
FILE: src/i3get/watch.sh
================================================
#!/bin/bash

_source=$(readlink -f "${BASH_SOURCE[0]}")
_dir=${_source%/*}

while read -r ; do
  clear
  bashbud --bump "$_dir"
  shellcheck "$_dir/program.sh"
done < <(
  inotifywait --event close_write          \
              --recursive --monitor        \
              --exclude 'awklib[.]sh$'     \
              "$_dir"/lib/*.sh             \
              "$_dir/main.sh"              \
              "$_dir/manifest.md"
)



================================================
FILE: src/i3get/awklib/END.awk
================================================
END {

  if (length(arg_search))
  {
    for (suspect_id in suspect_targets) {

      search_match=0

      for (search in arg_search) {
        if (match(ac[suspect_id][search],arg_search[search]))
          search_match+=1
      }

      if (search_match == length(arg_search)) {
        target_container_id=suspect_id
        break
      }
    }
  }
  else
    target_container_id=active_container_id

  if (! target_container_id)
    exit

  split(arg_print,toprint,"")
  format = arg_print_format

  for (k in toprint) {
    switch(toprint[k]) {

      case "t":
        k = "title"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["name"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "c":
        k = "class"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["class"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "i":
        k = "instance"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["instance"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out) 
      break

      case "d":
        k = "win_id"
        v = ac[target_container_id]["window"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "n":
        k = "con_id"
        v = target_container_id
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "m":
        k = "marks"
        v = ac[target_container_id]["marks"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "w":
        if (ac[target_container_id]["type"] ~ "workspace")
          target_workspace_id = target_container_id
        else
          target_workspace_id = ac[target_container_id]["workspace"]
        k = "ws number"
        v = ac[target_workspace_id]["num"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "W":
        if (ac[target_container_id]["type"] ~ "workspace")
          target_workspace_id = target_container_id
        else
          target_workspace_id = ac[target_container_id]["workspace"]
        k = "ws name"
        v = gensub(/^"|"$/,"","g",ac[target_workspace_id]["name"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "a":
        k = "focused"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["focused"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "f":
        k = "floating"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["floating-i3get"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "o":
        k = "title-format"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["title_format"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "e":
        k = "fullscreen"
        v = ac[target_container_id]["fullscreen_mode"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "s":
        k = "sticky"
        v = ac[target_container_id]["sticky"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out) 
      break

      case "u":
        k = "urgent"
        v = ac[target_container_id]["urgent"]
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "y":
        k = "type"
        v = gensub(/^"|"$/,"","g",ac[target_container_id]["window_type"])
        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break

      case "r":
        k = "role"

        if ("window_role" in ac[target_container_id])
          v = gensub(/^"|"$/,"","g",ac[target_container_id]["window_role"])
        else
          v = "unknown"

        out = gensub(/%v/,v,"g",format)
        out = gensub(/%k/,k,"g",out)
        printf ("%s", out)
      break
    }
  }
}



================================================
SYMLINK: src/i3get/awklib/main.awk -> main.awk
================================================



================================================
FILE: src/i3get/docs/description.md
================================================
Search for `CRITERIA` in the output of `i3-msg -t get_tree`,
return desired information.
If no arguments are passed,
`con_id` of active window is returned.
If there is more then one criterion,
all of them must be true to get results.

# EXAMPLES

search for window with instance name sublime_text. 
Request workspace, title and floating state.  

``` shell
$ i3get --instance sublime_text --print wtf 
1
~/src/bash/i3ass/i3get (i3ass) - Sublime Text
user_off
```



================================================
FILE: src/i3get/docs/options/active
================================================
Currently active window (default)  



================================================
FILE: src/i3get/docs/options/class
================================================
target windows with CLASS  



================================================
FILE: src/i3get/docs/options/conid
================================================
target windows with CON_ID  



================================================
FILE: src/i3get/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3get/docs/options/id
================================================
target windows with WIN_ID  



================================================
FILE: src/i3get/docs/options/instance
================================================
target windows with INSTANCE



================================================
FILE: src/i3get/docs/options/json
================================================
Use TREE instead of the output of `i3-msg -t get_tree`



================================================
FILE: src/i3get/docs/options/mark
================================================
MARK | target containers with MARK  



================================================
FILE: src/i3get/docs/options/print
================================================
what to print. defaults to 'n'  

*OUTPUT* can be one or more of the following 
characters:   

|character | print            | return
|:---------|:-----------------|:------
|`t`       | title            | string
|`c`       | class            | string
|`i`       | instance         | string
|`d`       | Window ID        | INT
|`n`       | Con_Id (default) | INT
|`m`       | mark             | JSON list
|`w`       | workspace number | INT
|`W`       | workspace name   | STRING
|`a`       | is active        | true or false
|`f`       | floating state   | string
|`o`       | title format     | string
|`e`       | fullscreen       | 1 or 0
|`s`       | sticky           | true or false
|`u`       | urgent           | true or false
|`y`       | window_type      | string
|`r`       | window_role      | string

Each character in OUTPUT will be tested and the
return value will be printed on a new line. If no
value is found, `--i3get could not find:
CHARACTER` will get printed.

In the example below, the target window did not have a mark:  

```
$ i3get -r tfcmw
/dev/pts/9
user_off
URxvt
--i3get could not find: m
1
```



================================================
FILE: src/i3get/docs/options/print-format
================================================
%v is value, %k is name. default: '%v\n'  



================================================
FILE: src/i3get/docs/options/role
================================================
match ROLE against window_role  



================================================
FILE: src/i3get/docs/options/synk
================================================
block script till window exist.



================================================
FILE: src/i3get/docs/options/timeout
================================================
seconds for --synk to timeout (defaults to 60)  



================================================
FILE: src/i3get/docs/options/title
================================================
target windows with TITLE  



================================================
FILE: src/i3get/docs/options/titleformat
================================================
match TITLE_FORMAT against title_format  



================================================
FILE: src/i3get/docs/options/type
================================================
match TYPE against window_type  



================================================
FILE: src/i3get/docs/options/verbose
================================================
print messages to stderr  



================================================
FILE: src/i3get/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3get/docs/options/winid
================================================
target windows with WIN_ID  



================================================
FILE: src/i3get/func/CLEANUP.sh
================================================
#!/bin/bash #bashbud

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3get/func/get_window.sh
================================================
#!/bin/bash

get_window() {

  local json
  json=${_o[json]:-$(i3-msg -t get_tree)}

  for o in instance class conid winid mark title titleformat type role parent; do

    [[ ${_o[$o]} ]] || continue

    case "$o" in
      role        ) json_key=window_role     ;;
      type        ) json_key=window_type     ;;
      titleformat ) json_key=title_format    ;;
      parent      ) json_key=i3fyracontainer ;;
      title       ) json_key=name            ;;
      winid       ) json_key=window          ;;
      conid       ) json_key=id              ;;
      mark        ) json_key=marks           ;;
      *           ) json_key=$o              ;;
    esac

    begin_block+="arg_search[\"$json_key\"]=\"${_o[$o]}\";"

  done

  <<< "$json" gawk -f <(
    echo "BEGIN { $begin_block }"
    _awklib
  ) FS=: RS=, \
    arg_print="${_o[print]:-n}" \
    arg_print_format="${_o[print-format]:-%v\n}"
}



================================================
SYMLINK: src/i3get/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3get/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3get/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3get/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3get/share.mak -> share.mak
================================================



================================================
FILE: src/i3get/tests/benchmark
================================================
21/06/07 (rewrote back to AWK)
========
time(while ((++i<100));do i3get -i typiskt -r tcidamow >/dev/null ; done)
real  0m1.684s

time(while ((++i<100));do i3get -i typiskt -r tcidamo --json "$(< test.json)" >/dev/null ; done)
real  0m2.107s

time(while ((++i<100));do i3get -i typiskt -r tcidamow --json "$(< test.json)" >/dev/null ; done)
real  0m2.112s

cat main.sh awklib/* lib/get_window.sh | grep -E '^\s*[^#].+$' | wc -l
238


20/07/12
========

time(while ((++i<100));do i3get -i typiskt -r tcidamow  >/dev/null ; done)
real  0m3.260s

time(while ((++i<100));do i3get -i typiskt -r tcidamo  >/dev/null ; done)
real  0m2.379s

time(while ((++i<100));do i3get -i typiskt -r tcidamo --json test.json >/dev/null ; done)
real  0m1.865s

time(while ((++i<100));do i3get -i typiskt -r tcidamow --json test.json >/dev/null ; done)
real  0m2.737s

cat main.sh lib/* | grep -E '^\s*[^#].+$' | wc -l
126

---


time(while ((++i<100));do i3get -i typiskt -r tcidamo >/dev/null ; done)
real  0m2.370s
user  0m1.744s
sys   0m0.564s

time(while ((++i<100));do i3get -i typiskt -r tcidamo >/dev/null ; done)
real  0m2.338s
user  0m1.697s
sys  0m0.574s


## slower when using w
time(while ((++i<100));do i3get -i typiskt -r tcidamow --json test.json >/dev/null ; done)
real  0m3.802s
user  0m3.042s
sys   0m0.864s

time(while ((++i<100));do i3get -i typiskt -r tcidamow >/dev/null ; done)
real  0m4.176s
user  0m3.299s
sys   0m0.815s

---

awk version:
time(while ((++i<100));do i3get -i typiskt -r tcidamo >/dev/null ; done)

real  0m3.848s
user  0m3.379s
sys   0m0.736s

wc -l program.sh 
331 program.sh


----



================================================
FILE: src/i3get/tests/test.json
================================================
{"id":94203248400544,"type":"root","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"root","window":null,"window_type":null,"nodes":[{"id":94203248402192,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3","window":null,"window_type":null,"nodes":[{"id":94203248405296,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":94203248408432,"type":"workspace","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3_scratch","num":-1,"window":null,"window_type":null,"nodes":[],"floating_nodes":[{"id":94203248465728,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248454304,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAB=1444"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248454304],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248416176,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":482,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248459776,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAC=306"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248459776],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248491200,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":482,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248419152,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MCD=770"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248419152],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248502304,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":482,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248491664,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MBD=252"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248491664],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203247732512,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248654000,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34FBD=BD"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248654000],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203253685200,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203253687104,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203248372848=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203253687104],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203255582128,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203254638960,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203250219536=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203254638960],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248669408,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203253686064,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203252172928=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203253686064],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203253523472,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203253523008,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizetits=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203253523008],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203254789744,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203256887472,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizemode=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203256887472],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203257139120,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203257138656,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizecon=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203257138656],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203258923712,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203259045328,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203250515280=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203259045328],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203251748800,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248652544,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203248747072=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203248652544],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203257957008,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203257956544,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["hidden94203251749264=1"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203257956544],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203259168592,"type":"floating_con","orientation":"horizontal","scratchpad_state":"changed","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":616,"y":673,"width":728,"height":370},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203251749264,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":616,"y":693,"width":728,"height":350},"deco_rect":{"x":0,"y":0,"width":728,"height":20},"window_rect":{"x":2,"y":0,"width":724,"height":348},"geometry":{"x":0,"y":0,"width":724,"height":348},"name":"/dev/pts/12","title_format":"typiskt","window":8390950,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"typiskt","title":"/dev/pts/12","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94203251749264],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"focus":[94203248465728,94203248416176,94203248491200,94203248502304,94203247732512,94203253685200,94203255582128,94203248669408,94203253523472,94203254789744,94203257139120,94203258923712,94203251748800,94203257957008,94203259168592],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94203248408432],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94203248405296],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203252343376,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"HDMI2","window":null,"window_type":null,"nodes":[{"id":94203253163888,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"topdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":2,"insert_where":2}]},{"id":94203253525392,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":94203248431776,"type":"workspace","orientation":"horizontal","scratchpad_state":"none","percent":1.0,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"1","num":1,"window":null,"window_type":null,"nodes":[{"id":94203248533952,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.75208333333333332593,"urgent":false,"marks":["i34XAC"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1444,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248724240,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.35555555555555540259,"urgent":false,"marks":["i34A"],"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1444,"height":384},"deco_rect":{"x":720,"y":0,"width":240,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203251753248,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.70215311004784686233,"urgent":false,"focused":true,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":20,"width":1014,"height":364},"deco_rect":{"x":0,"y":0,"width":1014,"height":20},"window_rect":{"x":0,"y":0,"width":1012,"height":362},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/8","title_format":"termsmall","window":8389868,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"termsmall","title":"/dev/pts/8","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203247705376,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.29784688995215313767,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1014,"y":20,"width":430,"height":364},"deco_rect":{"x":1014,"y":0,"width":430,"height":20},"window_rect":{"x":2,"y":0,"width":426,"height":362},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/9","title_format":"auto","window":8390912,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/9","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203251753248,94203247705376],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248508848,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.64444444444444459741,"urgent":false,"marks":["i34C"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":384,"width":1444,"height":696},"deco_rect":{"x":1012,"y":0,"width":508,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203257126144,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.19999999999999998335,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":404,"width":1444,"height":676},"deco_rect":{"x":0,"y":0,"width":288,"height":20},"window_rect":{"x":0,"y":0,"width":1442,"height":676},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/10","title_format":"auto","window":8390345,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/10","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203247734992,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.19999999999999998335,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":404,"width":1444,"height":676},"deco_rect":{"x":288,"y":0,"width":288,"height":20},"window_rect":{"x":0,"y":0,"width":1442,"height":676},"geometry":{"x":0,"y":361,"width":1447,"height":719},"name":"9 AUR (en) - jpeg2png-git - Vivaldi","title_format":"vivaldi","window":48234497,"window_type":"normal","window_properties":{"class":"Vivaldi-main","instance":"vivaldi-stable","window_role":"browser","title":"9 AUR (en) - jpeg2png-git - Vivaldi","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203251541616,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.19999999999999998335,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":404,"width":1444,"height":676},"deco_rect":{"x":576,"y":0,"width":288,"height":20},"window_rect":{"x":0,"y":0,"width":1442,"height":676},"geometry":{"x":0,"y":245,"width":1278,"height":835},"name":"~/git/lab/i3ass/ass/i3get/awklib/getwindow.awk (i3get) - Sublime Text","title_format":"git/lab/i3ass/ass/i3get/awklib/getwindow.awk","window":39845891,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_main","title":"~/git/lab/i3ass/ass/i3get/awklib/getwindow.awk (i3get) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203257161808,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.19999999999999998335,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":404,"width":1444,"height":676},"deco_rect":{"x":864,"y":0,"width":288,"height":20},"window_rect":{"x":0,"y":0,"width":1442,"height":676},"geometry":{"x":0,"y":361,"width":1447,"height":719},"name":"calibre - || calibre ||","title_format":"calibre","window":60817420,"window_type":"normal","window_properties":{"class":"calibre-main","instance":"calibre-gui","title":"calibre - || calibre ||","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203253222144,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.19999999999999998335,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":404,"width":1444,"height":676},"deco_rect":{"x":1152,"y":0,"width":292,"height":20},"window_rect":{"x":0,"y":0,"width":1442,"height":676},"geometry":{"x":0,"y":0,"width":902,"height":720},"name":"The Shallows [MOBI] — E-book viewer","window":58720303,"window_type":"normal","window_properties":{"class":"calibre","instance":"calibre-ebook-viewer","title":"The Shallows [MOBI] — E-book viewer","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203251541616,94203257126144,94203247734992,94203253222144,94203257161808],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203248724240,94203248508848],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203250221056,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.24791666666666672958,"urgent":false,"marks":["i34XBD"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":1444,"y":0,"width":476,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203248635296,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.45000000000000006661,"urgent":false,"marks":["i34B"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1444,"y":0,"width":476,"height":486},"deco_rect":{"x":960,"y":0,"width":960,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203247822480,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"marks":["i3monitor"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1444,"y":20,"width":476,"height":466},"deco_rect":{"x":0,"y":0,"width":158,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"title_format":"monitor","window":null,"window_type":null,"nodes":[{"id":94203248647456,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":0,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/2","title_format":"i3listn","window":8388635,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3listn","title":"/dev/pts/2","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203255604736,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":59,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/7","title_format":"dunst","window":8390759,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"dunst","title":"/dev/pts/7","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248448608,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":118,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"i3","title_format":"i3","window":20971529,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3","title":"i3","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248663216,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":177,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/4","title_format":"xfsettingsd","window":8388667,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"xfsettingsd","title":"/dev/pts/4","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203252690032,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":236,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/1","title_format":"polybar","window":8389886,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"polybar","title":"/dev/pts/1","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248665488,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":295,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/5","title_format":"pulse","window":8388681,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"pulse","title":"/dev/pts/5","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248676928,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":354,"y":0,"width":59,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"vb4c","window":44040201,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"vb4c","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248995216,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":40,"width":476,"height":446},"deco_rect":{"x":413,"y":0,"width":63,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":444},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"browser","window":46137353,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"browser","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203248448608,94203248663216,94203255604736,94203248647456,94203248676928,94203252690032,94203248995216,94203248665488],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203248694800,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":20,"width":476,"height":466},"deco_rect":{"x":158,"y":0,"width":158,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":464},"geometry":{"x":0,"y":0,"width":1442,"height":697},"name":"~/git/bud/budlabs-hugo-private/content/links/dotfiles where a mistake.md (subltmp) - Sublime Text","title_format":"subltmp","window":40873443,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_subltmp","title":"~/git/bud/budlabs-hugo-private/content/links/dotfiles where a mistake.md (subltmp) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203250223328,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":20,"width":476,"height":466},"deco_rect":{"x":316,"y":0,"width":160,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":464},"geometry":{"x":0,"y":0,"width":1200,"height":1000},"name":"llpp m4 - Unknown.pdf","window":35651584,"window_type":"unknown","window_properties":{"class":"llpp","instance":"llpp","title":"llpp m4 - Unknown.pdf","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203248694800,94203247822480,94203250223328],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248744192,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.54999999999999993339,"urgent":false,"marks":["i34D"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1444,"y":486,"width":476,"height":594},"deco_rect":{"x":406,"y":0,"width":65,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94203249782944,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":506,"width":476,"height":574},"deco_rect":{"x":0,"y":0,"width":158,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":574},"geometry":{"x":0,"y":0,"width":1920,"height":808},"name":"/home/bud/pix/zoo - File Manager","title_format":"pix/zoo","window":14680068,"window_type":"normal","window_properties":{"class":"ThunarD","instance":"thunar-7na","window_role":"Thunar-1593373798-3562220418","title":"/home/bud/pix/zoo - File Manager","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203248513472,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":506,"width":476,"height":574},"deco_rect":{"x":158,"y":0,"width":158,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":574},"geometry":{"x":0,"y":0,"width":1518,"height":860},"name":"~/dox/not/ass/todo (not) - Sublime Text","title_format":"not","window":39956618,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_not","title":"~/dox/not/ass/todo (not) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94203251738672,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1444,"y":506,"width":476,"height":574},"deco_rect":{"x":316,"y":0,"width":160,"height":20},"window_rect":{"x":2,"y":0,"width":474,"height":574},"geometry":{"x":0,"y":0,"width":474,"height":574},"name":"/home/bud/vid/bud - File Manager","title_format":"vid/bud","window":15509804,"window_type":"normal","window_properties":{"class":"ThunarD","instance":"thunar-7td","window_role":"Thunar-1594370071-225595149","title":"/home/bud/vid/bud - File Manager","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203249782944,94203248513472,94203251738672],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94203248635296,94203248744192],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94203248533952,94203250221056],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94203248431776],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94203247808128,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":1080,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"bottomdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":3,"insert_where":2}]}],"floating_nodes":[],"focus":[94203253525392,94203253163888,94203247808128],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94203252343376,94203248402192],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}



================================================
FILE: src/i3gw/config.mak
================================================
NAME         := i3gw
VERSION      := 0.999
CREATED      := 2017-01-11
UPDATED      := 2022-05-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := i3gw MARK
DESCRIPTION  := a ghost window wrapper for i3wm
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT =                \
	$(CACHE_DIR)/help_table.txt   \
	$(CACHE_DIR)/long_help.md     \
	$(DOCS_DIR)/description.md    \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  
	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n' \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt

	} > $@



================================================
FILE: src/i3gw/i3gw
================================================
#!/bin/bash

main(){

  [[ ${mark:=$1} ]] || ERX "no name specified"

  w="$(i3-msg open)"
  w="${w//[^0-9]/}"

  messy "[con_id=$w]" floating disable, mark "$mark"
}

__dir=$(dirname $(readlink -f "${BASH_SOURCE[0]}")) #bashbud
source "$__dir/_init.sh"                            #bashbud



================================================
FILE: src/i3gw/i3gw.1
================================================
.nh
.TH I3GW   2022-05-21 budlabs "User Manuals"
.SH NAME
.PP
i3gw - a ghost window wrapper for i3wm

.SH SYNOPSIS
.PP
\fB\fCi3gw MARK\fR

.SH OPTIONS
.PP
.RS

.nf
-h, --help     | print help and exit  
--verbose      | short description  
-v, --version  | print messages to stderr  

.fi
.RE

.SH USAGE
.PP
\fB\fCi3-msg\fR has an undocumented function: \fIopen\fP,
it creates empty containers,
or as I call them: ghosts.
Since these empty containers doesn't contain any windows
there is no instance/class/title to identify them,
making it difficult to manage them.
They do however have a \fB\fCcon_id\fR
and I found that the easiest way to keep track of ghosts, is to mark them.
That is what this script does,
it creates a ghost,
get its \fB\fCcon_id\fR and marks it.

.SH EXAMPLES
.PP
\fB\fC$ i3gw casper\fR

.PP
this will create a ghost marked casper,
you can perform any action you can perform on a regular container.

.PP
.RS

.nf
$ i3-msg [con_mark=casper] move to workspace 2
$ i3-msg [con_mark=casper] split v
$ i3-msg [con_mark=casper] layout tabbed
$ i3-msg [con_mark=casper] kill

.fi
.RE

.PP
the last command (\fB\fCkill\fR), destroys the container.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3gw/options
================================================
--verbose
--help|-h --version|-v



================================================
FILE: src/i3gw/docs/description.md
================================================
`i3-msg` has an undocumented function: *open*, 
it creates empty containers, 
or as I call them: ghosts. 
Since these empty containers doesn't contain any windows 
there is no instance/class/title to identify them, 
making it difficult to manage them. 
They do however have a `con_id` 
and I found that the easiest way to keep track of ghosts, is to mark them. 
That is what this script does, 
it creates a ghost, 
get its `con_id` and marks it.

## EXAMPLES

`$ i3gw casper`  

this will create a ghost marked casper, 
you can perform any action you can perform on a regular container.

``` text
$ i3-msg [con_mark=casper] move to workspace 2
$ i3-msg [con_mark=casper] split v
$ i3-msg [con_mark=casper] layout tabbed
$ i3-msg [con_mark=casper] kill
```

the last command (`kill`), destroys the container.



================================================
FILE: src/i3gw/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3gw/docs/options/verbose
================================================
short description  



================================================
FILE: src/i3gw/docs/options/version
================================================
print messages to stderr  



================================================
FILE: src/i3gw/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3gw/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3gw/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3gw/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3gw/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3gw/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3gw/share.mak -> share.mak
================================================



================================================
FILE: src/i3king/config.mak
================================================
NAME         := i3king
VERSION      := 0.4.4
CREATED      := 2021-06-01
UPDATED      := 2025-03-30
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := i3king [OPTIONS]
DESCRIPTION  := window ruler
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  :=                     \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(DOCS_DIR)/description.md           \
	$(DOCS_DIR)/environment_variables.md \
	$(CACHE_DIR)/copyright.txt


$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  
	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md
	  cat $(DOCS_DIR)/environment_variables.md

	  printf '%s\n'  \
		  '## CONTACT' \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues" \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3king/i3king
================================================
#!/bin/bash

: "${XDG_CONFIG_HOME:=$HOME/.config}"
: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KING_RULE_FILE:=$XDG_CONFIG_HOME/i3king/rules}"
: "${I3_KING_PID_FILE:=$XDG_RUNTIME_DIR/i3ass/i3king.pid}"

main(){

  declare -Ag ma

  declare -ag global_rules
  declare -ag default_rules
  declare -ag close_rules
  declare -ag title_rules
  declare -ag rules
  declare -ag commands
  declare -g  _fs=$'\x1f' # field separator, US

  [[ ${_o[reload]} && -f $I3_KING_PID_FILE ]] && {
    kill -USR1 "$(< "$I3_KING_PID_FILE")"
    exit
  }

  : "${_o[verbose]:=$I3_ASS_VERBOSE}"

  ((_o[verbose])) && {
    ERM "i3king start"
    _file_log=/dev/stderr
  }

  [[ ${_o[log]} ]] && {
    _file_log=${_o[log]}
    mkdir -p "${_file_log%/*}"
    {
      date
      echo ---------------------------------
    } >> "$_file_log"
  }

  _file_rules=${_o[config]:-$I3_KING_RULE_FILE}

  # create default config file if it doesn't exist
  [[ -f $_file_rules ]] || {
    [[ -f $I3_KING_RULE_FILE ]] \
      || _createconf "${I3_KING_RULE_FILE%/*}"
    _file_rules=$I3_KING_RULE_FILE
  }

  parse_rules "$_file_rules"

  if [[ ${_o[apply]} ]]; then
    apply_rules
    exit
  elif [[ ${_o[conid]} ]]; then
    mapfile -t wininfo <<< "$(i3get -n "${_o[conid]}" -r ncityrd)"
    match_window "${wininfo[@]}"
    exit
  elif [[ ${_o[winid]} ]]; then
    mapfile -t wininfo <<< "$(i3get -d "${_o[winid]}" -r ncityrd)"
    match_window "${wininfo[@]}"
    exit
  fi

  trap 'rm -rf "$I3_KING_PID_FILE"' HUP INT EXIT
  trap 'exec $0 "${BASH_ARGV[@]}"' USR1

  mkdir -p "${I3_KING_PID_FILE%/*}"
  echo "$$" > "$I3_KING_PID_FILE"

  re=$(make_regex)
  
  while :; do
    while read -r json ; do

      if [[ ${json//\\\"/%DQ%} =~ $re ]]; then

        i=1
        ma=(
          [change]="${BASH_REMATCH[++i]}"          # "change:"          - STRING
          [cid]="${BASH_REMATCH[++i]}"             # "id:"              - INT
          [urgent]="${BASH_REMATCH[++i]}"          # "urgent:"          - false|true
          [O]="${BASH_REMATCH[++i]}"               # ! optional group
          [mrk]="${BASH_REMATCH[++i]}"             # "marks:"           - ["mark1","mark2"...]
          [focused]="${BASH_REMATCH[++i]}"         # "focused:"         - false|true
          [x]="${BASH_REMATCH[++i]}"               # rect
          [y]="${BASH_REMATCH[++i]}"               # rect
          [w]="${BASH_REMATCH[++i]}"               # rect
          [h]="${BASH_REMATCH[++i]}"               # rect
          [b]="${BASH_REMATCH[++i]}"               # deco_rect, height. i.e. titlebar height
          [O]="${BASH_REMATCH[++i]}"               # actual_deco_rect (new in i3 4.22)
          [title]="${BASH_REMATCH[++i]//%DQ%/\"}"  # "name:"            - STRING
          [O]="${BASH_REMATCH[++i]}"               # ! optional group
          [frm]="${BASH_REMATCH[++i]//%DQ%/\"}"    # "title_format:"    - string
          [wid]="${BASH_REMATCH[++i]}"             # "window:"          - INT
          [typ]="${BASH_REMATCH[++i]}"             # "window_type:"     - STRING
          [O]="${BASH_REMATCH[++i]}"               # ! optional group
          [cls]="${BASH_REMATCH[++i]}"             # "class:"           - STRING
          [O]="${BASH_REMATCH[++i]}"               # ! optional group
          [ins]="${BASH_REMATCH[++i]}"             # "instance:"        - STRING
          [O]="${BASH_REMATCH[++i]}"               # ! optional group
          [rol]="${BASH_REMATCH[++i]:-unknown}"             # "window_role:"     - STRING
          [fullscreen]="${BASH_REMATCH[++i]}"      # "fullscreen_mode:" - 0|1
          [sticky]="${BASH_REMATCH[++i]}"          # "sticky:"          - true|false
          [floating]="${BASH_REMATCH[++i]}"        # "floating:"        - auto_off|auto_on|user_off|user_on
          [O]="${BASH_REMATCH[++i]}"               # "swallows:"        - auto_off|auto_on|user_off|user_on
        )

        match_window "${ma[cid]}"            \
                     "${ma[cls]:-unknown}"   \
                     "${ma[ins]:-unknown}"   \
                     "${ma[title]:-unknown}" \
                     "${ma[typ]:-unknown}"   \
                     "${ma[rol]:-unknown}"   \
                     "${ma[wid]}"            \
                     "${ma[change]}"
      fi

    done < <(
              if [[ ${_o[json]} ]]; then
                echo "${_o[json]}"
              else
                i3-msg -mt subscribe '["window"]'
              fi
            )

    [[ ${_o[no-restart]} || ! -f "$I3_KING_PID_FILE" || ${_o[json]} ]] \
      && break

    while :; do
      sleep .1
      [[ -S $(i3 --get-socketpath) ]] && break
    done

    [[ ${_o[no-apply]} ]] || apply_rules
  done
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3king/i3king.1
================================================
.nh
.TH I3KING   2023-08-04 budlabs "User Manuals"
.SH NAME
.PP
i3king - window ruler

.SH SYNOPSIS
.PP
\fB\fCi3king [OPTIONS]\fR

.SH OPTIONS
.PP
.RS

.nf
-a, --apply                | Match all existing windows against the rules and exit.
-c, --config         FILE  | use FILE as config  
-n, --conid          CONID | window with CONID, match against rules and exit exit.
--dryrun                   | Parse rules but don't execute commands.
-h, --help                 | print help and exit  
--json               JSON  | use JSON instead of output from: `i3-msg -t subscribe`
--log                FILE  | print messages to FILE instead of STDERR  
--no-apply                 | dont re-apply the rules on i3 crash 
--no-restart               | dont restart on i3 crash  
--print-commands           | Print commands to STDOUT instead of executing them.
--reload                   | force reload of i3king  
--verbose                  | More verbose output to **STDERR**.  
-v, --version              | print version info and exit  
-d, --winid          WINID | window with WINID, match against rules and exit exit.  

.fi
.RE

.SS -c, --config         FILE
.PP
Override the value of the Environment variable
\fBI3_KING_RULE_FILE\fP . Or the default value:
.br
\fB\fC~/.config/i3king/rules\fR

.SS --no-apply
.PP
If this option is set it will not automatically
apply rules to all windows when the IPC socket is
broken (happens on a crash or on \fB\fCrestart\fR).
This option has no effect if \fB\fC--no-restart\fR is used.

.SS --no-restart
.PP
When the IPC socket is broken, i3king will automatically
restart if this option is not set.

.SH USAGE
.PP
i3king will match all \fBnew\fP windows against the
rules defined in \fBI3_KING_RULE_FILE\fP
(\fI\fB\fC~/.config/i3king/rules\fR\fP). If a rule matches
the created window, the command associated with
the rule will get passed to \fB\fCi3-msg\fR\&.

.PP
The criterias a window can get matched against are
.br
- \fBclass\fP
- \fBinstance\fP
- \fBtitle\fP
- \fBwindow_type\fP
- \fBwindow_role\fP

.PP
Use \fBGLOBAL\fP rules to match any windows. global
rules can have a \fBblack\fPlist for windows that
will not trigger the rule.

.PP
A variant of the GLOBAL rule is \fBDEFAULT\fP rules,
which works exactly like GLOBAL rules, except they
only get triggered if the window didn't match any
\fI"normal"\fP rules (regular GLOBAL rules are normal).

.PP
\fBON_CLOSE\fP work like normal rules but will only
trigger when a window is closed.

.PP
Just like in the i3 config the \fB\fCset\fR directive is
available, so you can make variables.

.PP
Some built in magic variables are avaible in the config:

.RS
.IP \(bu 2
$INSTANCE
.IP \(bu 2
$CLASS
.IP \(bu 2
$CONID
.IP \(bu 2
$WINID
.IP \(bu 2
$TITLE

.RE

.PP
\fBTITLE\fP is a rule type that works slightly different
than the others. If triggered it will always execute
the command \fB\fCtitle_format NEW_TITLE\fR\&. And triggers
on new windows and when a window title changes.

.PP
Instead of a command you specify: \fB\fC[option]/REGEX/ template\fR
Use \fB\fC$1,$2,$3...\fR in the template to expand them to
the corresponding capture group from the regex.

.PP
\fB\fC[option]\fR is optional and can be either:
.br
- \fB\fC~0\fR remove expanded $HOME/ from NEW_TITLE
  \fIif this results in empty NEW_TITLE, a single \fB\fC~\fR will be used\fP
- \fB\fC~1\fR replace expanded $HOME with \fB\fC~\fR

.SH EXAMPLE
.PP
.RS

.nf
# assuming the window class is "Thunar" and the window
# title is something like "/home/anon/.config/i3 - Thunar"

TITLE class=Thunar
  /^(.+)\\s-\\s(Thunar)$/ Filemanager: $2 - $1

# the above will result in NEW_TITLE: 
# Filemanager: Thunar - /home/anon/.config/i3

TITLE class=Thunar
  ~0/^(.+)\\s-\\s(Thunar)$/ $1

# the above will result in NEW_TITLE: 
# .config/i3

TITLE class=Thunar
  ~1/^(.+)\\s-\\s(Thunar)$/ $1

# the above will result in NEW_TITLE: 
# ~/.config/i3


.fi
.RE

.SH EXAMPLE
.PP
.RS

.nf
GLOBAL \\
  class=URxvt instance=htop, \\
  instance=firefox
    title_format $INSTANCE

.fi
.RE

.PP
The above rule will set the title_format to the instance
name of all windows, except a URxvt window with the
instance name htop, and firefox windows.

.PP
If $I3_KING_RULES_FILE doesn't exist,
a example rule file will get created. See that
file for details about the syntax.

.PP
If you used to have \fB\fCfor_window\fR rules that triggered
\fB\fCi3fyra --move\fR commands. It is recommended to use
the built in varialbe \fB$CONID\fP when executing i3fyra:

.SH EXAMPLE
.PP
.RS

.nf
# old i3 version:
for_window [instance=qutebrowser] exec --no-startup-id i3fyra --move C

# with i3 king:
instance=qutebrowser
  exec --no-startup-id i3fyra --conid $CONID --move C

.fi
.RE

.PP
(\fIthe \fB\fC--conid\fR option in i3fyra is brand new\fP)

.PP
If the \fB\fCrestart\fR command is issued from i3, all
windows lose gets new container IDs, marks are
lost and other more or less strange things might
happen to the layout. Another thing is that all
open IPC sockets are closed and this means that
any ipc subscriber would have to be restarted.
\fBi3king\fP will, when the socket is broken, match
all known windows against the rules again, and
automatically restart itself. If you for some
reason don't want this behaviour, try \fB\fC--no-
restart\fR and/or \fB\fC--no-apply\fR options.

.SH protip
.PP
Sending USR1 to the i3king process will restart
i3king. Hint: \fB\fCkill -USR1 $(< "$XDG_RUNTIME_DIR/i3ass/i3king.pid")\fR

.SH ENVIRONMENT
.SS BASHBUD_DIR
.PP
bashbud config dir location.

.SS I3_KING_RULE_FILE
.PP
Path to file containing rules to be parsed.

.SS I3_KING_PID_FILE
.PP
When i3king is running this file contains the pid
of the i3king process. It is used by \fBi3fyra\fP to
know if i3king is running, if it is, it will try
to match windows against the rules when \fB\fC--float\fR
option toggles the floating state to tiled.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2021-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3king/options
================================================
    [--config|-c FILE] [--no-apply] [--no-restart]
    --apply|-a [--config|-c FILE] 
    --conid|-n CONID [--print-commands] [--config|-c FILE]
    --winid|-d WINID [--print-commands] [--config|-c FILE]
    --json JSON [--verbose] [--dryrun] [--log FILE]
    --reload
    --help|-h
    --version|-v



================================================
FILE: src/i3king/watch.sh
================================================
#!/bin/bash

_source=$(readlink -f "${BASH_SOURCE[0]}")
_dir=${_source%/*}

while read -r ; do
  clear
  bashbud --bump "$_dir"
  shellcheck "$_dir/program.sh" && {
    # time(
    #   while ((++i<50));do 
    #     "$_dir/program.sh" -i typiskt --json "$_dir/t/tree.json"
    #   done >/dev/null
    # )
    :
  }
done < <(
  inotifywait --event close_write          \
              --recursive --monitor        \
              --exclude 'awklib[.]sh$'     \
              "$_dir"/lib/*.sh             \
              "$_dir/main.sh"              \
              "$_dir/manifest.md"
)



================================================
FILE: src/i3king/conf/rules
================================================
# if the first nonblank character is "#", the line is ignored (comment)
# blank lines are also ignored.

# rules are always declared before the commands:
instance=firefox title="a window title|tab"
# the commands need to be on one line and indented with whitespace:
# the commands are sent to i3-msg, so to execute
# "other" commands you need to use 'exec' just as in 
# the i3 config.
  exec --no-startup-id notify-send "a firefox window was created"

# it is also possible to use 'set' like in the i3 config
# to make variables.
set $X   exec --no-startup-id
set $MSG exec --no-startup-id notify-send

# global rules will apply to all windows
GLOBAL
  $MSG "a new window was created"

# default rules applies to any window that does
# not match a "normal" rule
# in this file it will never get triggered, since
# the above GLOBAL rule is considered normal and
# will always trigger.
DEFAULT
  $MSG "no other rules matched"

# global rule declarations can be followed by a rule.
# windows matching such a rule will be ignored.
GLOBAL class=URxvt
  $MSG "this is NOT a URxvt window"

# use comma to group rules to the same command
class=URxvt , instance=firefox
  $MSG "this is a terminal or browser window"

# this also works for global rules
GLOBAL class=URxvt , instance=firefox
  $MSG "this is NOT a URxvt or firefox window"

# lines ending with backslash (\)
# will get added to the beginning of the next line
# the rule below is equivalent to the one above:
GLOBAL \
  class=URxvt ,\
  instance=firefox
    $MSG "this is NOT a URxvt or firefox window"

ON_CLOSE instance=firefox
  $MSG "the firefox window is now closed"

# use semicolon to execute more then one command,
# notice that we need exec after the semicolon ($X/$MSG)
class=URxvt
  $MSG "this is a terminal window" ;\
  $MSG "the instance name is $INSTANCE"



================================================
FILE: src/i3king/docs/description.md
================================================
i3king will match all **new** windows against the
rules defined in **I3_KING_RULE_FILE**
(*`~/.config/i3king/rules`*). If a rule matches
the created window, the command associated with
the rule will get passed to `i3-msg`.

The criterias a window can get matched against are  
- **class**
- **instance**
- **title**
- **window_type**
- **window_role**

Use **GLOBAL** rules to match any windows. global
rules can have a **black**list for windows that
will not trigger the rule.

A variant of the GLOBAL rule is **DEFAULT** rules,
which works exactly like GLOBAL rules, except they
only get triggered if the window didn't match any
*"normal"* rules (regular GLOBAL rules are normal).

**ON_CLOSE** work like normal rules but will only
trigger when a window is closed.

Just like in the i3 config the `set` directive is
available, so you can make variables.

Some built in magic variables are avaible in the config:  
  
- $INSTANCE
- $CLASS
- $CONID
- $WINID
- $TITLE

**TITLE** is a rule type that works slightly different
than the others. If triggered it will always execute
the command `title_format NEW_TITLE`. And triggers
on new windows and when a window title changes.

Instead of a command you specify: `[option]/REGEX/ template`
Use `$1,$2,$3...` in the template to expand them to
the corresponding capture group from the regex.

`[option]` is optional and can be either:  
- `~0` remove expanded $HOME/ from NEW_TITLE
  *if this results in empty NEW_TITLE, a single `~` will be used*
- `~1` replace expanded $HOME with `~`

EXAMPLE
-------
```
# assuming the window class is "Thunar" and the window
# title is something like "/home/anon/.config/i3 - Thunar"

TITLE class=Thunar
  /^(.+)\s-\s(Thunar)$/ Filemanager: $2 - $1

# the above will result in NEW_TITLE: 
# Filemanager: Thunar - /home/anon/.config/i3

TITLE class=Thunar
  ~0/^(.+)\s-\s(Thunar)$/ $1

# the above will result in NEW_TITLE: 
# .config/i3

TITLE class=Thunar
  ~1/^(.+)\s-\s(Thunar)$/ $1

# the above will result in NEW_TITLE: 
# ~/.config/i3

```

EXAMPLE
-------

``` text
GLOBAL \
  class=URxvt instance=htop, \
  instance=firefox
    title_format $INSTANCE
```
The above rule will set the title_format to the instance
name of all windows, except a URxvt window with the
instance name htop, and firefox windows.

If $I3_KING_RULES_FILE doesn't exist,
a example rule file will get created. See that
file for details about the syntax.

If you used to have `for_window` rules that triggered
`i3fyra --move` commands. It is recommended to use
the built in varialbe **$CONID** when executing i3fyra:  

EXAMPLE
-------
``` text
# old i3 version:
for_window [instance=qutebrowser] exec --no-startup-id i3fyra --move C

# with i3 king:
instance=qutebrowser
  exec --no-startup-id i3fyra --conid $CONID --move C
```

(*the `--conid` option in i3fyra is brand new*)

If the `restart` command is issued from i3, all
windows lose gets new container IDs, marks are
lost and other more or less strange things might
happen to the layout. Another thing is that all
open IPC sockets are closed and this means that
any ipc subscriber would have to be restarted.
**i3king** will, when the socket is broken, match
all known windows against the rules again, and
automatically restart itself. If you for some
reason don't want this behaviour, try `--no-
restart` and/or `--no-apply` options.

protip
------

Sending USR1 to the i3king process will restart
i3king. Hint: `kill -USR1 $(< "$XDG_RUNTIME_DIR/i3ass/i3king.pid")`



================================================
FILE: src/i3king/docs/environment_variables.md
================================================


## ENVIRONMENT

### BASHBUD_DIR

bashbud config dir location.

### I3_KING_RULE_FILE

Path to file containing rules to be parsed.

### I3_KING_PID_FILE

When i3king is running this file contains the pid
of the i3king process. It is used by **i3fyra** to
know if i3king is running, if it is, it will try
to match windows against the rules when `--float`
option toggles the floating state to tiled.



================================================
FILE: src/i3king/docs/options/apply
================================================
Match all existing windows against the rules and exit.



================================================
FILE: src/i3king/docs/options/config
================================================
use FILE as config  

Override the value of the Environment variable
**I3_KING_RULE_FILE** . Or the default value:  
`~/.config/i3king/rules`



================================================
FILE: src/i3king/docs/options/conid
================================================
window with CONID, match against rules and exit exit.



================================================
FILE: src/i3king/docs/options/dryrun
================================================
Parse rules but don't execute commands.



================================================
FILE: src/i3king/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3king/docs/options/json
================================================
use JSON instead of output from: `i3-msg -t subscribe`



================================================
FILE: src/i3king/docs/options/log
================================================
print messages to FILE instead of STDERR  



================================================
FILE: src/i3king/docs/options/no-apply
================================================
dont re-apply the rules on i3 crash 

If this option is set it will not automatically
apply rules to all windows when the IPC socket is
broken (happens on a crash or on `restart`).
This option has no effect if `--no-restart` is used.



================================================
FILE: src/i3king/docs/options/no-restart
================================================
dont restart on i3 crash  

When the IPC socket is broken, i3king will automatically
restart if this option is not set.



================================================
FILE: src/i3king/docs/options/print-commands
================================================
Print commands to STDOUT instead of executing them.



================================================
FILE: src/i3king/docs/options/reload
================================================
force reload of i3king  



================================================
FILE: src/i3king/docs/options/verbose
================================================
More verbose output to **STDERR**.  



================================================
FILE: src/i3king/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3king/docs/options/winid
================================================
window with WINID, match against rules and exit exit.  



================================================
FILE: src/i3king/func/apply_rules.sh
================================================
#!/bin/bash

apply_rules() {
  declare -a ids
  declare -a wininfo
  mapfile -t ids <<< "$(all_window_ids)"

  # cid=$1 class=$2 instance=$3 title=$4 type=$5
  for id in "${ids[@]}"; do
    mapfile -t wininfo <<< "$(i3get -d "$id" -r ncityd)"
    sleep .1
    match_window "${wininfo[@]}" apply
  done
}

all_window_ids() {
  i3-msg -t get_tree \
    | gawk '$1 == "\"window\"" && $2 != "null" {print $2}' RS=, FS=:
}



================================================
FILE: src/i3king/func/CLEANUP.sh
================================================
#!/bin/bash #bashbud

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3king/func/make_regex.sh
================================================
#!/bin/bash

make_regex() {

local re

re+=$(cat << EOB
(\{)
"change":"(new|close|title)",
"container":[{]
"id":([0-9]+),
"type":"[^"]+",
"orientation":"[^"]+",
"scratchpad_state":"[^"]+",
"percent":[0-9.]+,
"urgent":(false|true),
("marks":(\[[^]]*\]),)?
"focused":(true|false),
"output":"[^"]+",
"layout":"[^"]+",
"workspace_layout":"[^"]+",
"last_split_layout":"[^"]+",
"border":"[^"]+",
"current_border_width":[0-9-]+,
"rect":[{]"x":([0-9]+),"y":([0-9]+),"width":([0-9]+),"height":([0-9]+)},
"deco_rect":[^g]+ght":([0-9]+)},
("actual_deco_rect":[^}]+},)?
"window_rect":[^}]+},
"geometry":[^}]+},
"name":"?([^\"]+)"?,
("title_format":"([^"]+)",)?
"window_icon_padding":[^,]+,
"window":(${_c[id]:-[0-9]+}),
"window_type":"([^"]+)",
"window_properties":\{
("class":"([^"]+)",)?
("instance":"([^"]+)",)?
("window_role":"([^"]+)",)?
[^}]+\},
"nodes":[^,]+,
"floating_nodes":[^,]+,
"focus":[^,]+,
"fullscreen_mode":([0-9]),
"sticky":(false|true),
"floating":"([^"]+)",
("swallows":.+)?
EOB
)

# remove all newline characters
echo "${re//$'\n'/}"
}



================================================
FILE: src/i3king/func/match_window.sh
================================================
#!/bin/bash

match_window() {

  local cid=$1 class=$2 instance=$3 title=$4 
  local type=$5 role=$6 wid=$7 change=$8

  ((_o[print-commands])) && change=new

  local last_cmd cmd rule
  local title_regex title_options new_title

  local identifier=""

  identifier+="class$_fs$2$_fs"
  identifier+="instance$_fs$3$_fs"
  identifier+="title$_fs$4$_fs"
  identifier+="window_type$_fs$type$_fs"
  identifier+="window_role$_fs$role$_fs"

  declare -a matches default_execute execute

  [[ $cid =~ ^[0-9]{5,}$ ]] \
    || ERX "match_window(): $cid is not a valid containerID"

  case "$change" in
  close )
    for rule in "${!close_rules[@]}"; do
      [[ $identifier =~ ${close_rules[$rule]} ]] || continue
      cmd=${commands[$rule]}
      [[ $cmd = "$last_cmd" ]] && continue
      last_cmd=$cmd

      execute+=("$cmd")
      matches+=("ON_CLOSE: ${close_rules[$rule]}"$'\n'$'\t'"$cmd")
    done
    ;;
  new )
    # test default rules first
    for rule in "${!default_rules[@]}"; do

      cmd=${commands[$rule]}

      [[ $identifier =~ ${default_rules[$rule]} ]] && {

        [[ $cmd = "$last_cmd" ]] && {
          unset 'default_execute[-1]'
          unset 'matches[-1]'
        }
        last_cmd=$cmd
        continue
      }

      [[ $cmd = "$last_cmd" ]] && continue
      last_cmd=$cmd

      default_execute+=("$cmd")
      matches+=("DEFAULT: -"$'\n'$'\t'"$cmd")

    done

    unset last_cmd

    # then global rules
    for rule in "${!global_rules[@]}"; do

      cmd=${commands[$rule]}

      [[ $identifier =~ ${global_rules[$rule]} ]] && {

        [[ $cmd = "${execute[-1]}" ]] && {
          unset 'execute[-1]'
          unset 'matches[-1]'
        }
        last_cmd=$cmd
        continue
      }

      [[ $cmd = "$last_cmd" ]] && continue
      last_cmd=$cmd

      execute+=("$cmd")
      matches+=("GLOBAL: -"$'\n'$'\t'"$cmd")
    done

    unset last_cmd

    for rule in "${!rules[@]}"; do
      [[ $identifier =~ ${rules[$rule]} ]] || continue
      cmd=${commands[$rule]}
      [[ $cmd = "$last_cmd" ]] && continue
      last_cmd=$cmd

      rule_out=${rules[$rule]//$_fs/:}
      rule_out=${rule_out//\[^:]/.}

      execute+=("$cmd")
      matches+=("NORMAL: $rule_out"$'\n'$'\t'"$cmd")
    done
    ;& # FALLTHRU !!!!
  
  title) #  apply both to new windows and titlechange
    for rule in "${!title_rules[@]}"; do
      [[ $identifier =~ ${title_rules[$rule]} ]] || continue
      cmd=${commands[$rule]}
      cmd=${cmd//\\\//@@SLASH@@}
      [[ $cmd =~ ^([^/]+)?/([^/]+)/[[:space:]]+(.+)$ ]] && {
        title_regex=${BASH_REMATCH[2]//@@SLASH@@//}
        new_title=${BASH_REMATCH[3]}
        title_options=${BASH_REMATCH[1]}

        [[ $title =~ ${title_regex} ]] && {
          for rematch in "${!BASH_REMATCH[@]}"; do
            ((rematch)) || continue
            new_title="${new_title//\$$rematch/${BASH_REMATCH[rematch]}}"
          done
        }

        case "$title_options" in
        "~0" )
          [[ $new_title =~ ("${HOME}"[/]?) ]] && {
            new_title=${new_title//${BASH_REMATCH[1]}/}
            [[ $new_title ]] || new_title="~"
          }
          ;;

        "~1" )
          [[ $new_title =~ ("${HOME}") ]] \
            && new_title=${new_title//${BASH_REMATCH[1]}/'~'}
          ;;
        esac
      }

      execute+=("title_format $new_title")
      matches+=("TITLE: $title")
      matches+=("REGEX: $cmd")
    done
    ;;
  esac

  [[ -a $_file_log && ${#matches[@]} -gt 0 ]] && {
    echo $'\n'"WINDOW: "\
     "${identifier//$_fs/:}"$'\n'
    for k in "${matches[@]}"; do
      echo "$k"
    done
    echo
    echo EXECUTE:
  } >> "$_file_log"

  ((${#execute[@]})) && unset 'default_execute[@]'
  ((${#default_execute[@]})) && execute=("${default_execute[@]}")

  ((${#execute[@]})) && {
    
    for k in "${execute[@]}"; do

      cmd=$k
      cmd=${cmd//\$INSTANCE/$instance}
      cmd=${cmd//\$ROLE/$role}
      cmd=${cmd//\$TYPE/$type}
      cmd=${cmd//\$CLASS/$class}
      cmd=${cmd//\$CONID/$cid}
      cmd=${cmd//\$WINID/$wid}
      cmd=${cmd//\$TITLE/$title}

      [[ -a $_file_log ]] && echo $'\t'"$cmd" >> "$_file_log"

      if [[ $change = close ]]; then
        # without prefixing command with ; 
        # the command is not executed everytime.
        # not sure why, but it works like this
        prefix=";"
      else
        # cant prefix with conid when we close
        # since the window doesn't exist
        prefix="[con_id=$cid]"
      fi

      ((_o[print-commands] || _o[dryrun])) \
        || >&2 i3-msg "${prefix:-} $cmd"

      ((_o[print-commands])) && echo "${prefix:-} $cmd"
      
    done
  }
}



================================================
FILE: src/i3king/func/parse_rules.sh
================================================
#!/bin/bash

parse_rules() {

  declare -A vars
  local re_set re_group re_rule rule_type
  local last_line_type

  re_set='^\s*set\s+[$](\S+)\s+(.+)$'
  re_group='(\s*([^=[:space:]]+)=([^=]+\S)\s*)$'
  re_rule='^(GLOBAL|DEFAULT|ON_CLOSE|TITLE)?((\s+)?(.+)\s*)?$'

  declare -i counter_criteria counter_commands
  declare -f dummy_command

  dummy_command() {

    # this function is triggered when a rule is
    # declared without a command. So we add the command
    # 'nop' (no operation).

    local  msg='nop SYNTAX ERROR in i3king file'
   
    while ((counter_commands < counter_criteria)); do
      commands[counter_commands++]=$msg
    done
  }
  
  while read -r  ; do

    line="${prevline:+$prevline }$REPLY"

    [[ $line =~ ^[[:space:]]*$ || $line =~ ^[[:space:]]*# ]] \
      && continue

    if [[ $line =~ \\$ ]]; then
      prevline=${line%\\}
      continue
    else
      unset prevline
    fi
    
    if [[ $line =~ $re_set ]]; then
      vars["${BASH_REMATCH[1]}"]=${BASH_REMATCH[2]}

    # line is indented, parse command
    elif [[ $line =~ ^[[:space:]]+(.+)[[:space:]]*$ ]]; then

      cmd=${BASH_REMATCH[1]}
      for k in "${!vars[@]}"; do
        cmd=${cmd//\$$k/${vars[$k]}}
      done

      # use command id instead of storing cmd string

      while ((counter_commands < counter_criteria)); do
        commands[counter_commands++]=$cmd
      done

      last_line_type="command"

    elif [[ $line =~ $re_rule ]]; then

      [[ $last_line_type = rule ]] && dummy_command "$line"

      # re_rules=^(GLOBAL|DEFAULT|ON_CLOSE|TITLE)?((\s+)?(.+)\s*)?$
      rule_type=${BASH_REMATCH[1]:-NORMAL}

      [[ $rule_type = ON_CLOSE && ! ${BASH_REMATCH[4]} ]] \
        && continue # criteria mandatory

      # group by comma
      mapfile -t ignore_combined <<< "${BASH_REMATCH[4]//,/$'\n'}"

      for crit in "${ignore_combined[@]}"; do

        [[ $crit =~ = || $rule_type =~ DEFAULT|GLOBAL ]] || {
          ERR "'$line'" $'\n' \
              "Expected criteria, got ('$crit') A missplaced command?"

          continue
        }

        # if we don't have  a criteria it is
        # a line with a single GLOBAL/DEFAULT
        # we set the (blacklist) rule to nonsense (-)
        # to make sure it never matches
        if [[ $crit ]]; then
          wc="${_fs}[^${_fs}]*$_fs" # wildcard :.*:
          rule="class${wc}instance${wc}title${wc}window_type${wc}window_role${wc}"
        else
          # this rule should never match
          rule="-$_fs$_fs$_fs"
        fi

        while [[ $crit =~ $re_group ]]; do

          # re_group='(\s*([^=[:space:]]+)=([^=]+\S)\s*)$'

          crit=${crit:0:$((${#BASH_REMATCH[1]}*-1))}
          key=${BASH_REMATCH[2]} 
          val=${BASH_REMATCH[3]//\\s/[[:space:]]}
          val=${val// /[[:space:]]}

          # remove double quotes
          val=${val#\"} val=${val%\"}

          # ^ and $
          if [[ $val =~ ^\^(.+)\$$ ]]; then
            val="(${BASH_REMATCH[1]})"
          elif [[ $val =~ ^\^(.+) ]]; then
            val="(${BASH_REMATCH[1]})[^${_fs}]*"
          elif [[ $val =~ ^(.+)\$$ ]]; then
            val="[^${_fs}]*(${BASH_REMATCH[1]})"
          fi

          rule=${rule/$key${_fs}\[^${_fs}]\*${_fs}/$key${_fs}$val${_fs}}
        done

        [[ -a $_file_log && -z ${_o[print-commands]} ]] && {
          rule_out=${rule//$_fs/:}
          rule_out=${rule_out//\[^:]/.}
          echo "$rule_out" 
        } >> "$_file_log"

        case "$rule_type" in
          DEFAULT  ) default_rules[counter_criteria++]=$rule ;;
          GLOBAL   ) global_rules[counter_criteria++]=$rule  ;;
          ON_CLOSE ) close_rules[counter_criteria++]=$rule   ;;
          TITLE    ) title_rules[counter_criteria++]=$rule   ;;
          *        ) rules[counter_criteria++]=$rule         ;;
        esac

      done

      last_line_type=rule
    fi

  done < "$1"

  [[ $last_line_type = rule ]] && dummy_command
}



================================================
SYMLINK: src/i3king/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3king/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3king/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3king/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3king/share.mak -> share.mak
================================================



================================================
FILE: src/i3Kornhe/config.mak
================================================
NAME         := i3Kornhe
VERSION      := 0.71
CREATED      := 2017-12-12
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := move and resize windows gracefully
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  ?=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(DOCS_DIR)/environment_variables.md \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME'                  \
								  '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS'
	  
	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  echo '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md
	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md
	  cat $(DOCS_DIR)/environment_variables.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
		  "Send bugs and feature requests to:  " \
		  "$(CONTACT)/issues"                    \
		  '## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3Kornhe/i3Kornhe
================================================
#!/bin/bash

: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KORNHE_FIFO_FILE:=$XDG_RUNTIME_DIR/i3ass/i3Kornhe.fifo}"

main(){

  declare -g  _next_mode
  declare -g  _direction
  declare -ig _speed
  declare -ig _margin

  declare -g  _msgstring  # combined i3-msg
  declare -g  _array      # output from i3list
  declare -g  _qflag      # -q option passed to i3-msg
  declare -g  _stamp      # millisecond timestamp
  declare -Ag i3list      # i3list array
  declare -Ag last        # array with last i3Kornhe info

  : "${_o[verbose]:=$I3_ASS_VERBOSE}"

  # suffix the FIFO filename with the same suffix
  # as the i3-socketpath to ensure we are not
  # sending commands to a fifo being created in
  # a different session.
  until [[ ${sp:=$(i3 --get-socketpath)} ]]
    do sleep .1
  done

  I3_KORNHE_FIFO_FILE+=${sp##*.}

  ((_o[verbose])) || _qflag='-q'

  [[ ${_next_mode:=${1,,}} =~ ^(l|r|u|d|left|right|up|down|[0-9]|size|move|s|m|x)$ ]] \
    || ERX "i3Kornhe: mode ('$1') is not valid!"

  _next_mode=${_next_mode:0:1} ; mode=$1
  shift

  [[ ! $_next_mode =~ s|m && ${#@} -gt 0 ]] \
    && ERX "i3Kornhe: mode ('$mode') expected 0 arguments got '($*)'"

  [[ $_next_mode =~ s|m && ${#@} -gt 1 ]] \
    && ERX "i3Kornhe: mode ('$mode') expected 0-1 arguments got '($*)'"
  
  [[ ${_direction:=${1,,}} ]] && { 
    [[ ${_direction} =~ ^(l|r|u|d|left|right|up|down|[0-9])$ ]]  \
      || ERX "i3Kornhe: direction ('$_direction') is not valid!" \
             "( left|right|up|down|l|r|u|d|0-9 )"
  }

  : "${_direction:=$_next_mode}" ; _direction=${_direction:0:1}

  _speed=${_o[speed]//[!0-9]}
  ((_speed >= 0)) || _speed=10

  _margin=${_o[margin]//[!0-9]}
  ((_margin >= 0)) || _margin=5

  [[ -p $I3_KORNHE_FIFO_FILE ]] && {
    echo "$_direction $_next_mode $_speed $_margin" >> "$I3_KORNHE_FIFO_FILE" &
    # ((_o[verbose] && ! _o[dryrun])) && timer_stop
    exit
  }

  [[ -f ${I3_KORNHE_FIFO_FILE}.lock ]] && exit
  touch "${I3_KORNHE_FIFO_FILE}.lock"

  [[ ${_array:=${_o[array]}} ]] \
    || _array=$(i3list ${_o[json]:+--json "${_o[json]}"})

  eval "$_array"

  # if request is to move a tiled window
  # on the i3fyra (WSF) workspace, we redirect
  # the action to i3fyra
  [[ $_next_mode = m ]] && (( i3list[AWF]!=1 && i3list[WSA]==i3list[WSF])) && {
    rm -f "$I3_KORNHE_FIFO_FILE"*
    exec i3fyra --move "$_direction" "${_o[verbose]:+--verbose}" --array "$_array"
  }

  rm -f "$I3_KORNHE_FIFO_FILE"
  mkdir -p "${I3_KORNHE_FIFO_FILE%/*}"
  mkfifo "$I3_KORNHE_FIFO_FILE"
  echo "$_direction $_next_mode $_speed $_margin" >> "$I3_KORNHE_FIFO_FILE" &
  trap 'CLEANUP' EXIT INT HUP

  # when modifying FLOATING windows we enter a i3
  # binding mode, and change the title format of 
  # the active window to display mode type and
  # coordinates. We need to keep the original title
  # and use i3var for that.
  if ((i3list[AWF])); then

    last=(
      [title]=$(i3get -r o)
      [mode]=$_next_mode
      [conid]=${i3list[AWC]}
    )

  # when i3Kornhe is used to modify a TILED window
  # we don't enter a i3 binding mode, and it is
  # only when we exit the binding mode that the
  # fifo file is destroyed. Therefor we set this
  # autodestruct timer in the background.
  # It is not needed if the user have set up
  # --release keybindings, but there is no good
  # way to know if they have and in case they haven't
  # we keep this.
  else
    (
      sleep 1
      [[ -p $I3_KORNHE_FIFO_FILE ]] \
        && echo EXIT >> "$I3_KORNHE_FIFO_FILE"
    ) &
  fi

  rm "${I3_KORNHE_FIFO_FILE}.lock"

  while [[ -p $I3_KORNHE_FIFO_FILE ]]; do
    while read -rst 1 _direction _next_mode _speed _margin ; do

      [[ $_direction ]] || continue

      if [[ $_direction = EXIT || $_direction = RELEASE ]]; then
        rm -f "$I3_KORNHE_FIFO_FILE"* ; break 2
      elif [[ $_direction = x ]]; then
        exit_mode
        rm -f "$I3_KORNHE_FIFO_FILE"* ; break 2
      elif [[ $_direction =~ ^[1-9]$ ]]; then
        _next_mode=m
      elif [[ $_next_mode = s && ${last[mode]} = s ]]; then
          last[corner]=""
      elif [[ $_next_mode != x && $_next_mode = "$_direction" ]]; then
        _next_mode=${last[mode]:-x}
      fi

      if ((i3list[AWF])); then
        # this is needed when we go from size mode
        # to move mode, otherwise the coordinates
        # from before the size operations will be used
        [[ ${last[mode]} = "$_next_mode" ]] || eval "$(i3list)"
        modify_floating
      else
        modify_tiled
      fi

      [[ ${_o[oneshot]} ]] && echo EXIT >> "$I3_KORNHE_FIFO_FILE"

    done < "$I3_KORNHE_FIFO_FILE"

    ((i3list[AWF])) && {
      # we only append the window geometry to the 
      # window title if the window is being moved.
      # to correctly display geometry from a resize
      # operation we need to query i3list every time.
      [[ ${last[mode]} = m ]] \
        && title_format+="x:${i3list[AWX]} y:${i3list[AWY]} w:${i3list[AWW]} h:${i3list[AWH]}"
      
      messy "[con_id=${last[conid]}] title_format $title_format"
      messy mode sizemode
    }

    [[ $_msgstring ]] && \
      >&2 i3-msg "${_qflag:-}" "$_msgstring"
    _msgstring=''

  done
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3Kornhe/i3Kornhe.1
================================================
.nh
.TH I3KORNHE   2023-07-22 budlabs "User Manuals"
.SH NAME
.PP
i3Kornhe - move and resize windows gracefully

.SH SYNOPSIS
.PP
.RS

.nf
i3Kornhe     DIRECTION [--verbose] [--array ARRAY] [--json JSON]
i3Kornhe     move [--speed|-p SPEED] [DIRECTION]
i3Kornhe     size [--speed|-p SPEED] [DIRECTION]
i3Kornhe     1-9 [--margin INT] [--oneshot]
i3Kornhe     --help|-h
i3Kornhe     --version|-v
i3Kornhe     x

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
--array       ARRAY | use ARRAY instead of output of `i3list`  
-h, --help          | print help and exit  
--json        JSON  | use ARRAY instead of output of `i3-msg -t get_tree`  
--margin      INT   | Defaults to 5 if not set  
--oneshot           | automatically exit sizemove mode after action  
-p, --speed   SPEED | set step SPEED in pixels  
--verbose           | louder output  
-v, --version       | print version info and exit  

.fi
.RE

.SS --margin      INT
.PP
This is only used when
moving a window and the direction is a number.
INT is the number of pixels from the screen
edge the window will be positioned at.

.PP
The default value is 5 and it applies to all
margins of the screen.

.SH USAGE
.PP
i3Kornhe provides an alternative way to move and
resize windows in \fBi3\fP\&. It has some more
functions then the defaults and is more
streamlined. Resizing floating windows is done by
first selecting a corner of the window, and then
moving that corner.

.SH ENVIRONMENT
.SS I3_KORNHE_FIFO_FILE
.PP
File that commands will be sent to.
Defaults to: $XDG_RUNTIME_DIR/i3ass/i3Kornhe.fifo

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3Kornhe/options
================================================
    DIRECTION [--verbose] [--array ARRAY] [--json JSON]
    move [--speed|-p SPEED] [DIRECTION]
    size [--speed|-p SPEED] [DIRECTION]
    1-9 [--margin INT] [--oneshot]
    --help|-h
    --version|-v
    **x**



================================================
FILE: src/i3Kornhe/docs/description.md
================================================
i3Kornhe provides an alternative way to move and
resize windows in **i3**. It has some more
functions then the defaults and is more
streamlined. Resizing floating windows is done by
first selecting a corner of the window, and then
moving that corner.



================================================
FILE: src/i3Kornhe/docs/environment_variables.md
================================================
## ENVIRONMENT

### I3_KORNHE_FIFO_FILE  

File that commands will be sent to.
Defaults to: $XDG_RUNTIME_DIR/i3ass/i3Kornhe.fifo



================================================
FILE: src/i3Kornhe/docs/options/array
================================================
use ARRAY instead of output of `i3list`  



================================================
FILE: src/i3Kornhe/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3Kornhe/docs/options/json
================================================
use ARRAY instead of output of `i3-msg -t get_tree`  



================================================
FILE: src/i3Kornhe/docs/options/margin
================================================
Defaults to 5 if not set  

This is only used when
moving a window and the direction is a number.
INT is the number of pixels from the screen
edge the window will be positioned at.

The default value is 5 and it applies to all
margins of the screen.



================================================
FILE: src/i3Kornhe/docs/options/margin-bottom
================================================
Defaults to `--margin` if not set  



================================================
FILE: src/i3Kornhe/docs/options/margin-left
================================================
Defaults to `--margin` if not set  



================================================
FILE: src/i3Kornhe/docs/options/margin-right
================================================
Defaults to `--margin` if not set  



================================================
FILE: src/i3Kornhe/docs/options/margin-top
================================================
Defaults to `--margin` if not set



================================================
FILE: src/i3Kornhe/docs/options/oneshot
================================================
automatically exit sizemove mode after action  



================================================
FILE: src/i3Kornhe/docs/options/speed
================================================
set step SPEED in pixels  



================================================
FILE: src/i3Kornhe/docs/options/verbose
================================================
louder output  



================================================
FILE: src/i3Kornhe/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3Kornhe/func/CLEANUP.sh
================================================
#!/bin/bash

CLEANUP() {
  
  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3Kornhe/func/exit_mode.sh
================================================
#!/usr/bin/env bash

exit_mode(){
  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  [[ ${last[conid]} ]] || last[conid]=$(i3get)
  
  messy "mode default"

  # reset title to old title_format or actual title
  messy "[con_id=${last[conid]}]" \
        "title_format ${last[title]:-%title}"
}



================================================
FILE: src/i3Kornhe/func/modify_floating.sh
================================================
#!/bin/sh

modify_floating() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local corner cv ch conid

  conid=${last[conid]:=${i3list[AWC]}}

  # m - move
  if [[ $_next_mode = m ]]; then

    title_format="MOVE "

    case "$_direction" in
      l ) ((i3list[AWX]-=_speed)) ;;
      r ) ((i3list[AWX]+=_speed)) ;;
      u ) ((i3list[AWY]-=_speed)) ;;
      d ) ((i3list[AWY]+=_speed)) ;;
      1|2|3|4|5|6|7|8|9 )
        
        case "$_direction" in
          1|2|3 ) i3list[AWY]=$(( i3list[WAY]+_margin )) ;;
          4|5|6 ) i3list[AWY]=$(( i3list[WAY]+(i3list[WAH]/2)-(i3list[AWH]/2) )) ;;
          7|8|9 ) i3list[AWY]=$(( i3list[WAY]+( i3list[WAH]-(i3list[AWH]+_margin) ) )) ;;
        esac

        case "$_direction" in
          1|4|7 ) i3list[AWX]=$(( i3list[WAX]+_margin )) ;;
          2|5|8 ) i3list[AWX]=$(( i3list[WAX]+(i3list[WAW]/2)-(i3list[AWW]/2) )) ;;
          3|6|9 ) i3list[AWX]=$(( i3list[WAX]+( i3list[WAW]-(i3list[AWW]+_margin) ) )) ;;
        esac
      ;;

    esac

    corner=move
    messy "[con_id=$conid] move position ${i3list[AWX]} ${i3list[AWY]}"

  elif [[ $_next_mode = s ]]; then

    if [[ ${last[corner]} =~ ^b|t ]]; then
      corner=${last[corner]}
    else
      _speed=0
      case "$_direction" in
        l ) corner="topleft"     ;;
        r ) corner="bottomright" ;;
        u ) corner="topright"    ;;
        d ) corner="bottomleft"  ;;
      esac
    fi

    title_format="RESIZE $corner"

    [[ $corner =~ (top|bottom)(left|right) ]] \
      && cv=${BASH_REMATCH[1]} ch=${BASH_REMATCH[2]} 
      
    if   [[ $cv = top && $_direction = u ]]; then
      resize_as="grow up"
    elif [[ $cv = top && $_direction = d ]]; then
      resize_as="shrink up"
    elif [[ $cv = bottom && $_direction = u ]]; then
      resize_as="shrink down"
    elif [[ $cv = bottom && $_direction = d ]]; then
      resize_as="grow down"
    fi

    if   [[ $ch = left && $_direction = l ]]; then
      resize_as="grow left"
    elif [[ $ch = left && $_direction = r ]]; then
      resize_as="shrink left"
    elif [[ $ch = right && $_direction = l ]]; then
      resize_as="shrink right"
    elif [[ $ch = right && $_direction = r ]]; then
      resize_as="grow right"
    fi

    ((_speed)) && messy "[con_id=$conid] resize $resize_as $_speed px"

  fi

  last=(
        [mode]=$_next_mode
        [conid]=$conid
        [corner]=$corner
        [title]=${last[title]:-%title}
       )
}



================================================
FILE: src/i3Kornhe/func/modify_tiled.sh
================================================
#!/bin/sh

modify_tiled() {

  ((_o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  if [[ $_next_mode = m ]]; then

    case "$_direction" in
      l ) _direction=left  ;;
      r ) _direction=right ;;
      u ) _direction=up    ;;
      d ) _direction=down  ;;
    esac

    messy "move $_direction"
    echo EXIT >> "$I3_KORNHE_FIFO_FILE" &

  elif [[ $_next_mode = s ]]; then

    case "$_direction" in
      l ) messy "resize shrink width $_speed px" ;;
      r ) messy "resize grow width $_speed px" ;;
      u ) messy "resize grow height $_speed px" ;;
      d ) messy "resize shrink height $_speed px" ;;
    esac

  fi

}



================================================
SYMLINK: src/i3Kornhe/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3Kornhe/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3Kornhe/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3Kornhe/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3Kornhe/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3Kornhe/share.mak -> share.mak
================================================



================================================
FILE: src/i3list/config.mak
================================================
NAME         := i3list
VERSION      := 0.54
CREATED      := 2017-10-06
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := list information about the current i3 session
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  ?=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(CACHE_DIR)/copyright.txt


$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME'                  \
								  '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' 

	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

		echo '## OPTIONS'
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
			'## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3list/i3list
================================================
#!/bin/bash

main(){

  for o in instance class conid winid mark title titleformat type role parent; do

    [[ ${_o[$o]} ]] || continue

    case "$o" in
      role        ) json_key=window_role     ;;
      type        ) json_key=window_type     ;;
      titleformat ) json_key=title_format    ;;
      parent      ) json_key=i3fyracontainer ;;
      title       ) json_key=name            ;;
      winid       ) json_key=window          ;;
      conid       ) json_key=id              ;;
      mark        ) json_key=marks           ;;
      *           ) json_key=$o              ;;
    esac

    begin_block+="arg_search[\"$json_key\"]=\"${_o[$o]}\";"

  done

  gawk -f <(
    echo "BEGIN { $begin_block }"
    _awklib
  ) FS=: RS=, <<< "${_o[json]:-$(i3-msg -t get_tree)}"

}

__dir=$(dirname $(readlink -f "${BASH_SOURCE[0]}")) #bashbud
source "$__dir/_init.sh"                            #bashbud



================================================
FILE: src/i3list/i3list.1
================================================
.nh
.TH I3LIST   2023-07-12 budlabs "User Manuals"
.SH NAME
.PP
i3list - list information about the current i3 session

.SH SYNOPSIS
.PP
.RS

.nf
i3list     [--json JSON]
i3list     --instance|-i TARGET [--json JSON] [--verbose]
i3list     --class|-c    TARGET [--json JSON] [--verbose]
i3list     --conid|-n    TARGET [--json JSON] [--verbose]
i3list     --winid|-d    TARGET [--json JSON] [--verbose]
i3list     --mark|-m     TARGET [--json JSON] [--verbose]
i3list     --title|-t    TARGET [--json JSON] [--verbose]
i3list     --help|-h
i3list     --version|-v

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
-c, --class    TARGET | Search for windows with a class matching *TARGET*  
-n, --conid    TARGET | Search for windows with a CON_ID matching TARGET  
-h, --help            | print help and exit  
-i, --instance TARGET | Search for windows with a instance matching TARGET  
--json         JSON   | Use JSON instead of output from  `i3-msg -t get_tree`   
-m, --mark     TARGET | Search for windows with a mark matching TARGET  
-t, --title    TARGET | Search for windows with a title matching TARGET    
--verbose             | Short description  
-v, --version         | Print version info and exit  
-d, --winid    TARGET | Search for windows with a **WINDOW_ID** matching *TARGET*  

.fi
.RE

.SH USAGE
.PP
\fB\fCi3list\fR prints a list in a \fIarray\fP formatted list.
If a search criteria is given
(\fB\fC-c\fR|\fB\fC-i\fR|\fB\fC-n\fR|\fB\fC-d\fR|\fB\fC-m\fR)
information about the first window matching the criteria is displayed.
Information about the active window is always displayed.
If no search criteria is given,
the active window will also be the target window.

.PP
By using eval,
the output can be used as an array in bash scripts,
but the array needs to be declared first.

.SH EXAMPLE
.PP
.RS

.nf
$ i3list
i3list[AWF]=0                  # Active Window floating
i3list[ATW]=270                # Active Window tab width
i3list[ATX]=540                # Active Window tab x postion
i3list[AWH]=1700               # Active Window height
i3list[AWI]=4194403            # Active Window id
i3list[AWW]=1080               # Active Window width
i3list[AFO]=AB                 # Active Window relatives
i3list[AWX]=0                  # Active Window x position
i3list[AFC]=B                  # Active Window cousin
i3list[AWY]=220                # Active Window y position
i3list[AFF]=CD                 # Active Window family
i3list[AFS]=D                  # Active Window sibling
i3list[AWB]=20                 # Active Window titlebar height
i3list[AFT]=A                  # Active Window twin
i3list[AWP]=C                  # Active Window parent
i3list[AWC]=94283162546096     # Active Window con_id
i3list[TWB]=20                 # Target Window titlebar height
i3list[TFS]=D                  # Target Window sibling
i3list[TFF]=CD                 # Target Window family
i3list[TWP]=C                  # Target Window Parent container
i3list[TFT]=A                  # Target Window twin
i3list[TWC]=94283162546096     # Target Window con_id
i3list[TWF]=0                  # Target Window Floating
i3list[TTW]=270                # Target Window tab width
i3list[TWH]=1700               # Target Window height
i3list[TTX]=540                # Target Window tab x postion
i3list[TWI]=4194403            # Target Window id
i3list[TWW]=1080               # Target Window width
i3list[TWX]=0                  # Target Window x position
i3list[TFO]=AB                 # Target Window relatives
i3list[TWY]=220                # Target Window y position
i3list[TFC]=B                  # Target Window cousin
i3list[CAF]=94283159300528     # Container A Focused container id
i3list[CBF]=94283160891520     # Container B Focused container id
i3list[CCF]=94283162546096     # Container C Focused container id
i3list[CAW]=1                  # Container A Workspace
i3list[CBW]=1                  # Container B Workspace
i3list[CCW]=1                  # Container C Workspace
i3list[CAL]=tabbed             # Container A Layout
i3list[CBL]=tabbed             # Container B Layout
i3list[CCL]=tabbed             # Container C Layout
i3list[SAB]=730                # Current split: AB
i3list[MCD]=770                # Stored split: CD
i3list[SAC]=220                # Current split: AC
i3list[SBD]=220                # Current split: BD
i3list[SCD]=1080               # Current split: CD
i3list[MAB]=730                # Stored split: AB
i3list[MAC]=220                # Stored split: AC
i3list[LEX]=CBA                # Existing containers (LVI+LHI)
i3list[LHI]=                   # Hidden i3fyra containers
i3list[LVI]=CBA                # Visible i3fyra containers
i3list[FCD]=C                  # Family CD memory
i3list[LAL]=ABCD               # All containers in family order
i3list[WAH]=1920               # Active Workspace height
i3list[WAI]=94283159180304     # Active Workspace con_id
i3list[WAW]=1080               # Active Workspace width
i3list[WSF]=1                  # i3fyra Workspace Number
i3list[WAX]=0                  # Active Workspace x position
i3list[WST]=1                  # Target Workspace Number
i3list[WAY]=0                  # Active Workspace y position
i3list[WFH]=1920               # i3fyra Workspace Height
i3list[WTH]=1920               # Target Workspace Height
i3list[WFI]=94283159180304     # i3fyra Workspace con_id
i3list[WAN]='1'                # Active Workspace name
i3list[WTI]=94283159180304     # Target Workspace con_id
i3list[WFW]=1080               # i3fyra Workspace Width
i3list[WTW]=1080               # Target Workspace Width
i3list[WFX]=0                  # i3fyra Workspace X position
i3list[WTX]=0                  # Target Workspace X poistion
i3list[WFY]=0                  # i3fyra Workspace Y position
i3list[WTY]=0                  # Target Workspace Y position
i3list[WFN]='1'                # i3fyra Workspace name
i3list[WSA]=1                  # Active Workspace number
i3list[WTN]='1'                # Target Workspace name


$ declare -A i3list # declares associative array
$ eval "$(i3list)"
$ echo ${i3list[WAW]}
1080

.fi
.RE

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3list/options
================================================
    [--json JSON]
    --instance|-i TARGET [--json JSON] [--verbose]
    --class|-c    TARGET [--json JSON] [--verbose]
    --conid|-n    TARGET [--json JSON] [--verbose]
    --winid|-d    TARGET [--json JSON] [--verbose]
    --mark|-m     TARGET [--json JSON] [--verbose]
    --title|-t    TARGET [--json JSON] [--verbose]
    --help|-h
    --version|-v



================================================
FILE: src/i3list/awklib/descriptions.awk
================================================
function descriptions() {
  
  desc["CAL"]="Container A Layout"
  desc["CAF"]="Container A Focused container id"
  desc["CAW"]="Container A Workspace number"
  desc["CAN"]="Container A Workspace name"
  desc["CBL"]="Container B Layout"
  desc["CBF"]="Container B Focused container id"
  desc["CBW"]="Container B Workspace number"
  desc["CBN"]="Container B Workspace name"
  desc["CCL"]="Container C Layout"
  desc["CCF"]="Container C Focused container id"
  desc["CCW"]="Container C Workspace number"
  desc["CCN"]="Container C Workspace name"
  desc["CDL"]="Container D Layout"
  desc["CDF"]="Container D Focused container id"
  desc["CDW"]="Container D Workspace number"
  desc["CDN"]="Container D Workspace name"

  desc["SAB"]="Current split: AB"
  desc["SAC"]="Current split: AC"
  desc["SBD"]="Current split: BD"
  desc["SCD"]="Current split: CD"
  desc["MAB"]="Stored split: AB"
  desc["MAC"]="Stored split: AC"
  desc["MBD"]="Stored split: BD"
  desc["MCD"]="Stored split: CD"
  desc["FAC"]="Family AC memory"
  desc["FBD"]="Family BD memory"
  desc["FCD"]="Family CD memory"
  desc["FAB"]="Family AB memory"

  desc["LVI"]="Visible i3fyra containers"
  desc["LHI"]="Hidden i3fyra containers"
  desc["LAL"]="All containers in family order"
  desc["LEX"]="Existing containers (LVI+LHI)"

  desc["AWF"]="Active Window floating"
  desc["AWP"]="Active Window parent"
  desc["AWC"]="Active Window con_id"
  desc["AWI"]="Active Window id"
  desc["AFT"]="Active Window twin" 
  desc["AFC"]="Active Window cousin" 
  desc["AFS"]="Active Window sibling" 
  desc["AFF"]="Active Window family" 
  desc["AFO"]="Active Window relatives"
  desc["AWW"]="Active Window width"
  desc["AWH"]="Active Window height"
  desc["AWX"]="Active Window x position"
  desc["AWY"]="Active Window y position"
  desc["AWB"]="Active Window titlebar height"
  desc["ATX"]="Active Window tab x postion"
  desc["ATW"]="Active Window tab width"
  desc["ABW"]="Active Window border width"
  desc["APA"]="Active Window parent ID"

  desc["TWF"]="Target Window Floating"
  desc["TWC"]="Target Window con_id"
  desc["TWI"]="Target Window id"
  desc["TWP"]="Target Window Parent container"
  desc["TFT"]="Target Window twin" 
  desc["TFC"]="Target Window cousin" 
  desc["TFS"]="Target Window sibling" 
  desc["TFF"]="Target Window family" 
  desc["TFO"]="Target Window relatives"
  desc["TTX"]="Target Window tab x postion"
  desc["TTW"]="Target Window tab width"
  desc["TWW"]="Target Window width"
  desc["TWH"]="Target Window height"
  desc["TWX"]="Target Window x position"
  desc["TWY"]="Target Window y position"
  desc["TWB"]="Target Window titlebar height"
  desc["TBW"]="Target Window border width"
  desc["TPA"]="Target Window parent ID"
  
  desc["WAW"]="Active Workspace width"
  desc["WAH"]="Active Workspace height"
  desc["WAX"]="Active Workspace x position"
  desc["WAY"]="Active Workspace y position"
  desc["WAN"]="Active Workspace name"
  desc["WSA"]="Active Workspace number"
  desc["WAI"]="Active Workspace con_id"
  desc["WST"]="Target Workspace Number"
  desc["WTN"]="Target Workspace name"
  desc["WTH"]="Target Workspace Height"
  desc["WTI"]="Target Workspace con_id"
  desc["WTW"]="Target Workspace Width"
  desc["WTX"]="Target Workspace X poistion"
  desc["WTY"]="Target Workspace Y position"
  desc["WSF"]="i3fyra Workspace Number"
  desc["WFH"]="i3fyra Workspace Height"
  desc["WFI"]="i3fyra Workspace con_id"
  desc["WFW"]="i3fyra Workspace Width"
  desc["WFX"]="i3fyra Workspace X position"
  desc["WFY"]="i3fyra Workspace Y position"
  desc["WFN"]="i3fyra Workspace name"

  desc["XAB"]="family AB workspace number"
  desc["XAC"]="family AC workspace number"
  desc["XCD"]="family CD workspace number"
  desc["XBD"]="family BD workspace number"

  desc["NAB"]="family AB workspace name"
  desc["NAC"]="family AC workspace name"
  desc["NCD"]="family CD workspace name"
  desc["NBD"]="family BD workspace name"

  desc["VPA"]="virtual position A"
  desc["VPB"]="virtual position B"
  desc["VPC"]="virtual position C"
  desc["VPD"]="virtual position D"

  desc["RID"]="root container id"
  desc["RED"]="last applied layout"

  desc["ORI"]="i3fyra orientation"
  desc["SUS"]="containers matching all criteria"
}



================================================
FILE: src/i3list/awklib/END.awk
================================================
END {
  descriptions()

  # strfrm is the format string used for the output
  strfrm="i3list[%s]=%-26s # %s\n"

  # determine target container ID
  if ( length(arg_search) == 0 ) {
    target_container_id=active_container_id
  } else {

    for (suspect_id in suspect_targets) {

      search_match=0

      for (search in arg_search) { 
        if (match(ac[suspect_id][search],arg_search[search]))
          search_match+=1
      }

      if (search_match == length(arg_search)) {
        SUS++
        if (length(target_container) == 0)
          target_container_id=suspect_id
      }
    }
  }


  # initialize i3fyra values
  if (i3fyra_workspace_id) {
    orientation=("ORI" in fyra_vars ? fyra_vars["ORI"] : "horizontal")
    if (orientation == "horizontal") {
      main_split="AB"
      
      fyra_vars["LAL"]="ACBD"

      # SAB - main split size
      if ("A" in fyra_containers && fyra_containers["A"]["visible"]) {
        main_split_size=ac[fyra_containers["A"]["id"]]["w"]
      }
      else if ("C" in fyra_containers && fyra_containers["C"]["visible"])
        main_split_size=ac[fyra_containers["C"]["id"]]["w"]
      else
        main_split_size=0

      if (main_split_size == ac[i3fyra_workspace_id]["w"])
        main_split_size=0
    }

    else if (orientation == "vertical") {
      main_split="AC"
      
      fyra_vars["LAL"]="ABCD"

      # SAC - main split size
      if ("A" in fyra_containers && fyra_containers["A"]["visible"])
        main_split_size=ac[fyra_containers["A"]["id"]]["h"]
      else if ("B" in fyra_containers && fyra_containers["B"]["visible"])
        main_split_size=ac[fyra_containers["B"]["id"]]["h"]
      else
        main_split_size=0

      if (main_split_size == ac[i3fyra_workspace_id]["h"])
        main_split_size=0
    }
  }

  at["A"]=active_container_id
  at["T"]=target_container_id

  for (target in at) {
    id=at[target]
    if (id) {
      # if its not a con it is probably a workspace
      # dont print window info on that id
      if (ac[id]["type"] == "\"con\"")
      {
        print_window(target,id)
        print ""

        if (i3fyra_workspace_id) {

          parent_id=ac[id]["parent"]
          awp=ac[parent_id]["i3fyra_mark"]
          grand_parent_id=ac[parent_id]["parent"]
          gwp=ac[grand_parent_id]["i3fyra_mark"]

          if (awp) {
            print_fyra_window(target,id,awp)
            print ""
          } else if (gwp) {
            print_fyra_window(target,id,gwp)
            print ""
          }

        }
      }

      if (target == "A" || target_container_id == active_container_id)
        print_workspace(target,active_workspace_id)
      else
        print_workspace(target,ac[id]["workspace"])
      print ""
    }
  }

  ### -- I3FYRA STUFF
  if (i3fyra_workspace_name) {
    if (i3fyra_workspace_id) {
      print_workspace("F",i3fyra_workspace_id)
      print ""

      for (container_name in fyra_containers) {
        container_id=fyra_containers[container_name]["id"]
        workspace_id=fyra_containers[container_name]["workspace"]

        key="C" container_name "L"; printf(strfrm,key, ac[container_id]["layout"], desc[key])
        key="C" container_name "W"; printf(strfrm,key, ac[workspace_id]["num"], desc[key])
        key="C" container_name "N"; printf(strfrm,key, ac[workspace_id]["name"], desc[key])

        focused=ac[container_id]["focused"]
        # make sure the focused container is a window
        # while (!("window" in ac[focused]))
        #   focused=ac[focused]["focused"]

        key="C" container_name "F"; printf(strfrm,key, focused, desc[key])

        if (fyra_containers[container_name]["visible"])
          LVI=LVI container_name
        else 
          LHI=LHI container_name
      }
      
      print ""

      key="LVI"; printf(strfrm,key, LVI, desc[key])
      key="LHI"; printf(strfrm,key, LHI, desc[key])
      key="LEX"; printf(strfrm,key, LVI LHI, desc[key])

      print ""
      
      for (family in fyra_splits) {

        first=substr(family,1,1)

        split(family,split_childs,"")
        first_id=fyra_containers[first]["id"]

        if (family == main_split)
          family_split_size = main_split_size

        else if ( orientation == "horizontal"       && 
             fyra_containers[first]["visible"] &&
             ac[first_id]["h"] != ac[i3fyra_workspace_id]["h"] )
          family_split_size=ac[first_id]["h"]

        else if ( orientation == "vertical"         && 
                  fyra_containers[first]["visible"] &&
                  ac[first_id]["w"] != ac[i3fyra_workspace_id]["w"] )
          family_split_size=ac[first_id]["w"]

        else
          family_split_size=0

        key="S" family; printf(strfrm, key, family_split_size, desc[key])
      }
    }
    else
      printf(strfrm,"WFN", i3fyra_workspace_name, desc["WFN"])

    print ""
  }

  if (length(fyra_vars) > 0) {
    for (key in fyra_vars) {
      printf(strfrm, key, fyra_vars[key], desc[key])
    }

    print ""
  }
  
  printf(strfrm, "RID", root_id, desc["RID"])
  printf(strfrm, "SUS", SUS, desc["SUS"])
}



================================================
FILE: src/i3list/awklib/print_fyra_window.awk
================================================
function print_fyra_window(t, container_id, parent, key) {

  key=t "WP"; printf(strfrm,key, parent, desc[key])

  # desc["AFT"]="Active Window twin" 
  key=t "FT"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "B" : "C") : 
     parent == "B" ? ( orientation == "horizontal" ? "A" : "D") :
     parent == "C" ? ( orientation == "horizontal" ? "D" : "A") :
     parent == "D" ? ( orientation == "horizontal" ? "C" : "B") : 0),
    desc[key])

  # desc["AFC"]="Active Window cousin" 
  key=t "FC"; printf(strfrm,key,
    (parent == "A" ? "D" : 
     parent == "B" ? "C" :
     parent == "C" ? "B" :
     parent == "D" ? "A" : 0),
    desc[key])

  # desc["AFS"]="Active Window sibling" 
  key=t "FS"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "C" : "B") : 
     parent == "B" ? ( orientation == "horizontal" ? "D" : "A") :
     parent == "C" ? ( orientation == "horizontal" ? "A" : "D") :
     parent == "D" ? ( orientation == "horizontal" ? "B" : "C") : 0),
    desc[key])

  # desc["AFF"]="Active Window family"
  key=t "FF"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "AC" : "AB") : 
     parent == "B" ? ( orientation == "horizontal" ? "BD" : "AB") :
     parent == "C" ? ( orientation == "horizontal" ? "AC" : "CD") :
     parent == "D" ? ( orientation == "horizontal" ? "BD" : "CD") : 0),
    desc[key])

  # desc["AFO"]="Active Window relatives"
  key=t "FO"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "BD" : "CD") : 
     parent == "B" ? ( orientation == "horizontal" ? "AC" : "CD") :
     parent == "C" ? ( orientation == "horizontal" ? "BD" : "AB") :
     parent == "D" ? ( orientation == "horizontal" ? "AC" : "AB") : 0),
    desc[key])
}



================================================
FILE: src/i3list/awklib/print_window.awk
================================================
function print_window(t, container_id, key) {
  key=t "WC"; printf(strfrm,key, container_id, desc[key])
  key=t "WF"; printf(strfrm,key, ac[container_id]["floating"], desc[key])
  key=t "WI"; printf(strfrm,key, ac[container_id]["window"], desc[key])
  key=t "WW"; printf(strfrm,key, ac[container_id]["w"], desc[key])
  key=t "WH"; printf(strfrm,key, ac[container_id]["h"]+ac[container_id]["deco_h"], desc[key])
  key=t "WX"; printf(strfrm,key, ac[container_id]["x"], desc[key])
  key=t "WY"; printf(strfrm,key, ac[container_id]["y"]-ac[container_id]["deco_h"], desc[key])
  key=t "WB"; printf(strfrm,key, ac[container_id]["deco_h"], desc[key])
  key=t "TX"; printf(strfrm,key, ac[container_id]["deco_x"], desc[key])
  key=t "TW"; printf(strfrm,key, ac[container_id]["deco_w"], desc[key])
  key=t "BW"; printf(strfrm,key, ac[container_id]["current_border_width"], desc[key])
  key=t "PA"; printf(strfrm,key, ac[container_id]["parent"], desc[key])
}




================================================
FILE: src/i3list/awklib/print_workspace.awk
================================================
function print_workspace(t, container_id, key) {
  key="W" t "I"; printf(strfrm,key, container_id, desc[key])
  key="W" t "X"; printf(strfrm,key, ac[container_id]["x"], desc[key])
  key="W" t "Y"; printf(strfrm,key, ac[container_id]["y"], desc[key])
  key="W" t "W"; printf(strfrm,key, ac[container_id]["w"], desc[key])
  key="W" t "H"; printf(strfrm,key, ac[container_id]["h"], desc[key])

  
  key="W" t "N"; printf(strfrm,key, ac[container_id]["name"], desc[key])
  key="WS" t   ; printf(strfrm,key, ac[container_id]["num"], desc[key])
}



================================================
SYMLINK: src/i3list/awklib/main.awk -> main.awk
================================================



================================================
FILE: src/i3list/docs/description.md
================================================
`i3list` prints a list in a *array* formatted list. 
If a search criteria is given 
(`-c`|`-i`|`-n`|`-d`|`-m`) 
information about the first window matching the criteria is displayed. 
Information about the active window is always displayed. 
If no search criteria is given, 
the active window will also be the target window.

By using eval, 
the output can be used as an array in bash scripts, 
but the array needs to be declared first.

## EXAMPLE

```text
$ i3list
i3list[AWF]=0                  # Active Window floating
i3list[ATW]=270                # Active Window tab width
i3list[ATX]=540                # Active Window tab x postion
i3list[AWH]=1700               # Active Window height
i3list[AWI]=4194403            # Active Window id
i3list[AWW]=1080               # Active Window width
i3list[AFO]=AB                 # Active Window relatives
i3list[AWX]=0                  # Active Window x position
i3list[AFC]=B                  # Active Window cousin
i3list[AWY]=220                # Active Window y position
i3list[AFF]=CD                 # Active Window family
i3list[AFS]=D                  # Active Window sibling
i3list[AWB]=20                 # Active Window titlebar height
i3list[AFT]=A                  # Active Window twin
i3list[AWP]=C                  # Active Window parent
i3list[AWC]=94283162546096     # Active Window con_id
i3list[TWB]=20                 # Target Window titlebar height
i3list[TFS]=D                  # Target Window sibling
i3list[TFF]=CD                 # Target Window family
i3list[TWP]=C                  # Target Window Parent container
i3list[TFT]=A                  # Target Window twin
i3list[TWC]=94283162546096     # Target Window con_id
i3list[TWF]=0                  # Target Window Floating
i3list[TTW]=270                # Target Window tab width
i3list[TWH]=1700               # Target Window height
i3list[TTX]=540                # Target Window tab x postion
i3list[TWI]=4194403            # Target Window id
i3list[TWW]=1080               # Target Window width
i3list[TWX]=0                  # Target Window x position
i3list[TFO]=AB                 # Target Window relatives
i3list[TWY]=220                # Target Window y position
i3list[TFC]=B                  # Target Window cousin
i3list[CAF]=94283159300528     # Container A Focused container id
i3list[CBF]=94283160891520     # Container B Focused container id
i3list[CCF]=94283162546096     # Container C Focused container id
i3list[CAW]=1                  # Container A Workspace
i3list[CBW]=1                  # Container B Workspace
i3list[CCW]=1                  # Container C Workspace
i3list[CAL]=tabbed             # Container A Layout
i3list[CBL]=tabbed             # Container B Layout
i3list[CCL]=tabbed             # Container C Layout
i3list[SAB]=730                # Current split: AB
i3list[MCD]=770                # Stored split: CD
i3list[SAC]=220                # Current split: AC
i3list[SBD]=220                # Current split: BD
i3list[SCD]=1080               # Current split: CD
i3list[MAB]=730                # Stored split: AB
i3list[MAC]=220                # Stored split: AC
i3list[LEX]=CBA                # Existing containers (LVI+LHI)
i3list[LHI]=                   # Hidden i3fyra containers
i3list[LVI]=CBA                # Visible i3fyra containers
i3list[FCD]=C                  # Family CD memory
i3list[LAL]=ABCD               # All containers in family order
i3list[WAH]=1920               # Active Workspace height
i3list[WAI]=94283159180304     # Active Workspace con_id
i3list[WAW]=1080               # Active Workspace width
i3list[WSF]=1                  # i3fyra Workspace Number
i3list[WAX]=0                  # Active Workspace x position
i3list[WST]=1                  # Target Workspace Number
i3list[WAY]=0                  # Active Workspace y position
i3list[WFH]=1920               # i3fyra Workspace Height
i3list[WTH]=1920               # Target Workspace Height
i3list[WFI]=94283159180304     # i3fyra Workspace con_id
i3list[WAN]='1'                # Active Workspace name
i3list[WTI]=94283159180304     # Target Workspace con_id
i3list[WFW]=1080               # i3fyra Workspace Width
i3list[WTW]=1080               # Target Workspace Width
i3list[WFX]=0                  # i3fyra Workspace X position
i3list[WTX]=0                  # Target Workspace X poistion
i3list[WFY]=0                  # i3fyra Workspace Y position
i3list[WTY]=0                  # Target Workspace Y position
i3list[WFN]='1'                # i3fyra Workspace name
i3list[WSA]=1                  # Active Workspace number
i3list[WTN]='1'                # Target Workspace name


$ declare -A i3list # declares associative array
$ eval "$(i3list)"
$ echo ${i3list[WAW]}
1080
```



================================================
FILE: src/i3list/docs/options/class
================================================
Search for windows with a class matching *TARGET*  



================================================
FILE: src/i3list/docs/options/conid
================================================
Search for windows with a CON_ID matching TARGET  



================================================
FILE: src/i3list/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3list/docs/options/instance
================================================
Search for windows with a instance matching TARGET  



================================================
FILE: src/i3list/docs/options/json
================================================
Use JSON instead of output from  `i3-msg -t get_tree`   



================================================
FILE: src/i3list/docs/options/mark
================================================
Search for windows with a mark matching TARGET  



================================================
FILE: src/i3list/docs/options/title
================================================
Search for windows with a title matching TARGET    



================================================
FILE: src/i3list/docs/options/verbose
================================================
Short description  



================================================
FILE: src/i3list/docs/options/version
================================================
Print version info and exit  



================================================
FILE: src/i3list/docs/options/winid
================================================
Search for windows with a **WINDOW_ID** matching *TARGET*  



================================================
FILE: src/i3list/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -f /tmp/i3flip_lock ]] && rm /tmp/i3flip_lock

  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3list/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3list/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3list/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3list/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3list/share.mak -> share.mak
================================================



================================================
FILE: src/i3list/tests/0
================================================
i3list[AWF]=0              	# Active Window floating
i3list[ATW]=1015           	# Active Window tab width
i3list[ATX]=0              	# Active Window tab x postion
i3list[AWH]=334            	# Active Window height
i3list[AWI]=8389868        	# Active Window id
i3list[AWW]=1015           	# Active Window width
i3list[AFO]=BD             	# Active Window relatives
i3list[AWX]=0              	# Active Window x position
i3list[AFC]=D              	# Active Window cousin
i3list[AWY]=0              	# Active Window y position
i3list[AFF]=AC             	# Active Window family
i3list[AFS]=C              	# Active Window sibling
i3list[AWB]=20             	# Active Window titlebar height
i3list[AFT]=B              	# Active Window twin
i3list[AWP]=A              	# Active Window parent
i3list[AWC]=94203251753248 	# Active Window con_id
i3list[TWB]=20             	# Target Window titlebar height
i3list[TWC]=94203265447104 	# Target Window con_id
i3list[TWF]=1              	# Target Window Floating
i3list[TTW]=728            	# Target Window tab width
i3list[TTX]=0              	# Target Window tab x postion
i3list[TWH]=370            	# Target Window height
i3list[TWI]=8394001        	# Target Window id
i3list[TWW]=728            	# Target Window width
i3list[TWX]=635            	# Target Window x position
i3list[TWY]=666            	# Target Window y position
i3list[CAF]=94203251753248 	# Container A Focused container id
i3list[CBF]=94203247822480 	# Container B Focused container id
i3list[CCF]=94203251541616 	# Container C Focused container id
i3list[CDF]=94203257841824 	# Container D Focused container id
i3list[CAW]=1              	# Container A Workspace
i3list[CBW]=1              	# Container B Workspace
i3list[CCW]=1              	# Container C Workspace
i3list[CAL]=splith         	# Container A Layout
i3list[CDW]=1              	# Container D Workspace
i3list[CBL]=tabbed         	# Container B Layout
i3list[CCL]=tabbed         	# Container C Layout
i3list[CDL]=tabbed         	# Container D Layout
i3list[SAB]=1445           	# Current split: AB
i3list[MCD]=770            	# Stored split: CD
i3list[SAC]=334            	# Current split: AC
i3list[SBD]=232            	# Current split: BD
i3list[SCD]=1445           	# Current split: CD
i3list[MAB]=1445           	# Stored split: AB
i3list[MAC]=334            	# Stored split: AC
i3list[MBD]=438            	# Stored split: BD
i3list[LEX]=DCBA           	# Existing containers (LVI+LHI)
i3list[LHI]=               	# Hidden i3fyra containers
i3list[LVI]=DCBA           	# Visible i3fyra containers
i3list[FBD]=BD             	# Family BD memory
i3list[LAL]=ACBD           	# All containers in family order
i3list[WAH]=1080           	# Active Workspace height
i3list[WAI]=94203248431776 	# Active Workspace con_id
i3list[WAW]=1920           	# Active Workspace width
i3list[WSF]=1              	# i3fyra Workspace Number
i3list[WAX]=0              	# Active Workspace x position
i3list[WAY]=0              	# Active Workspace y position
i3list[WST]=-1             	# Target Workspace Number
i3list[WFH]=1080           	# i3fyra Workspace Height
i3list[WFI]=94203248431776 	# i3fyra Workspace con_id
i3list[WAN]='1'            	# Active Workspace name
i3list[WTH]=0              	# Target Workspace Height
i3list[WFW]=1920           	# i3fyra Workspace Width
i3list[WTI]=94203248408432 	# Target Workspace con_id
i3list[WFX]=0              	# i3fyra Workspace X position
i3list[WTW]=0              	# Target Workspace Width
i3list[WFY]=0              	# i3fyra Workspace Y position
i3list[WTX]=0              	# Target Workspace X poistion
i3list[WTY]=0              	# Target Workspace Y position
i3list[WFN]='1'            	# i3fyra Workspace name
i3list[WSA]=1              	# Active Workspace number
i3list[WTN]='__i3_scratch' 	# Target Workspace name



================================================
FILE: src/i3list/tests/1
================================================
i3list[AWF]=0              	# Active Window floating
i3list[ATW]=1015           	# Active Window tab width
i3list[ATX]=0              	# Active Window tab x postion
i3list[AWH]=334            	# Active Window height
i3list[AWI]=8389868        	# Active Window id
i3list[AWW]=1015           	# Active Window width
i3list[AFO]=BD             	# Active Window relatives
i3list[AWX]=0              	# Active Window x position
i3list[AFC]=D              	# Active Window cousin
i3list[AWY]=0              	# Active Window y position
i3list[AFF]=AC             	# Active Window family
i3list[AFS]=C              	# Active Window sibling
i3list[AWB]=20             	# Active Window titlebar height
i3list[AFT]=B              	# Active Window twin
i3list[AWP]=A              	# Active Window parent
i3list[AWC]=94203251753248 	# Active Window con_id
i3list[TWB]=20             	# Target Window titlebar height
i3list[TWC]=94203265447104 	# Target Window con_id
i3list[TWF]=1              	# Target Window Floating
i3list[TTW]=728            	# Target Window tab width
i3list[TTX]=0              	# Target Window tab x postion
i3list[TWH]=370            	# Target Window height
i3list[TWI]=8394001        	# Target Window id
i3list[TWW]=728            	# Target Window width
i3list[TWX]=635            	# Target Window x position
i3list[TWY]=666            	# Target Window y position
i3list[CAF]=94203251753248 	# Container A Focused container id
i3list[CBF]=94203247822480 	# Container B Focused container id
i3list[CCF]=94203251541616 	# Container C Focused container id
i3list[CDF]=94203257841824 	# Container D Focused container id
i3list[CAW]=1              	# Container A Workspace
i3list[CBW]=1              	# Container B Workspace
i3list[CCW]=1              	# Container C Workspace
i3list[CAL]=splith         	# Container A Layout
i3list[CDW]=1              	# Container D Workspace
i3list[CBL]=tabbed         	# Container B Layout
i3list[CCL]=tabbed         	# Container C Layout
i3list[CDL]=tabbed         	# Container D Layout
i3list[SAB]=1445           	# Current split: AB
i3list[MCD]=770            	# Stored split: CD
i3list[SAC]=334            	# Current split: AC
i3list[SBD]=232            	# Current split: BD
i3list[SCD]=1445           	# Current split: CD
i3list[MAB]=1445           	# Stored split: AB
i3list[MAC]=334            	# Stored split: AC
i3list[MBD]=438            	# Stored split: BD
i3list[LEX]=DCBA           	# Existing containers (LVI+LHI)
i3list[LHI]=               	# Hidden i3fyra containers
i3list[LVI]=DCBA           	# Visible i3fyra containers
i3list[FBD]=BD             	# Family BD memory
i3list[LAL]=ACBD           	# All containers in family order
i3list[WAH]=1080           	# Active Workspace height
i3list[WAI]=94203248431776 	# Active Workspace con_id
i3list[WAW]=1920           	# Active Workspace width
i3list[WSF]=1              	# i3fyra Workspace Number
i3list[WAX]=0              	# Active Workspace x position
i3list[WAY]=0              	# Active Workspace y position
i3list[WST]=-1             	# Target Workspace Number
i3list[WFH]=1080           	# i3fyra Workspace Height
i3list[WFI]=94203248431776 	# i3fyra Workspace con_id
i3list[WAN]='1'            	# Active Workspace name
i3list[WTH]=0              	# Target Workspace Height
i3list[WFW]=1920           	# i3fyra Workspace Width
i3list[WTI]=94203248408432 	# Target Workspace con_id
i3list[WFX]=0              	# i3fyra Workspace X position
i3list[WTW]=0              	# Target Workspace Width
i3list[WFY]=0              	# i3fyra Workspace Y position
i3list[WTX]=0              	# Target Workspace X poistion
i3list[WTY]=0              	# Target Workspace Y position
i3list[WFN]='1'            	# i3fyra Workspace name
i3list[WSA]=1              	# Active Workspace number
i3list[WTN]='__i3_scratch' 	# Target Workspace name



================================================
FILE: src/i3list/tests/benchmarks
================================================
removed match in favour for classic pattern
===========================================
time(while ((++i<50));do i3list -i typiskt --json t/tree.json  >/dev/null ; done)
real  0m1.711s -400

time(while ((++i<100));do i3list -i typiskt --json t/tree.json  >/dev/null ; done)
real  0m3.410s


Hardcoded name for all relevant keys
====================================
time(while ((++i<100));do i3list -i typiskt --json t/tree.json  >/dev/null ; done)
real  0m4.469s

time(while ((++i<50));do i3list -i typiskt --json t/tree.json  >/dev/null ; done)
real  0m2.157s -800


FD instead of pipe to start awk
===============================

time(while ((++i<50));do i3list -i typiskt --json t/tree.json  >/dev/null ; done)
real  0m2.932s

time(while ((++i<50));do i3list -i typiskt  >/dev/null ; done)
real  0m2.899s

time(while ((++i<100));do i3list -i typiskt  >/dev/null ; done)
real  0m5.880s

cat main.sh lib/* | grep -E '^\s*[^#].+$' | wc -l
404


20/07/12 - before anything
==========================

time(while ((++i<100));do i3list -i typiskt  >/dev/null ; done)
real  0m5.962s

cat main.sh lib/* awklib/* | grep -E '^\s*[^#].+$' | wc -l
766



================================================
FILE: src/i3run/config.mak
================================================
NAME         := i3run
VERSION      := 0.2.2
CREATED      := 2017-04-20
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := Run, Raise or hide windows in i3wm
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  :=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(DOCS_DIR)/environment_variables.md \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS'

	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  echo '## OPTIONS'
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md
	  cat $(DOCS_DIR)/environment_variables.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
		  '## COPYRIGHT'

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3run/i3run
================================================
#!/bin/bash

: "${I3RUN_BOTTOM_GAP:=10}"
: "${I3RUN_TOP_GAP:=10}"
: "${I3RUN_LEFT_GAP:=10}"
: "${I3RUN_RIGHT_GAP:=10}"

main(){

  declare -ag _criteria   # options passed to i3list/i3get/i3viswiz
  declare -A   i3list     # globals array
  declare -g  _msgstring  # passed to i3-msg ( messy() )
  declare -ag _pass_array # helper var for storing --array option
  declare -ag _command    # command to execute
  declare -g  _array      # result of i3list

  for k in instance class title conid winid; do
    [[ ${_o[$k]} ]] || continue
    _criteria+=("--$k" "${_o[$k]}")
  done ; unset -v k

  [[ -z ${_criteria[*]} ]] \
    && ERX "please specify a criteria"

  _array=$(i3list "${_criteria[@]}")
  _pass_array=(${_o[verbose]:+--verbose} --array "$_array")
  eval "$_array"

  # shellcheck disable=SC2206
  # SC2206:  Quote to prevent word splitting/globbin.
  # the only way to win, regarding i3run --command COMMAND
  # is to not use it and do: i3run -- COMMAND , instead 
  if [[ ${_o[command]} ]] 
    then _command=(${_o[command]})
    else _command=("$@")
  fi

  # if window doesn't exist, launch the command.
  if [[ ${i3list[TWC]} ]]
    then focuswindow
    else [[ ${_o[hide]} ]] || launchcommand
  fi
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3run/i3run.1
================================================
.nh
.TH I3RUN   2022-05-22 budlabs "User Manuals"
.SH NAME
.PP
i3run - Run, Raise or hide windows in i3wm

.SH SYNOPSIS
.PP
.RS

.nf
i3run --instance|-i INSTANCE  [--hide] [--summon|-s] [--nohide|-g] [--verbose] [--silent]
i3run --class|-c    CLASS     [--hide] [--rename|-x OLD_NAME] 
i3run --title|-t    TITLE     [--hide] [--rename-instance OLD_NAME] [--rename-class OLD_NAME] [--rename-title OLD_NAME]
i3run --conid|-n    CON_ID    [--hide] [--force|-f] [--FORCE|-F] 
i3run --winid|-d    WIN_ID    [--hide] [--command|-e COMMAND] [--mouse|-m]
i3run --help|-h
i3run --version|-v

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
-F, --FORCE                    | Execute COMMAND (`--command`), even if the window already exist. 
-c, --class           CLASS    | Search for windows with the given CLASS
-e, --command         COMMAND  | execute COMMAND if window is not found  
-n, --conid           CON_ID   | Search for windows with the given CON_ID 
-f, --force                    | Execute COMMAND (`--command`), even if the window already exist. But not when hiding a window.
-h, --help                     | print help and exit  
--hide                         | always send target window to the scratchpad  
-i, --instance        INSTANCE | Search for windows with the given INSTANCE  
-m, --mouse                    | windows will be summoned to the mouse cursor  
-g, --nohide                   | Don't hide window/container if it's active.  
-x, --rename          OLD_NAME | rename window properties on creation  
--rename-class        OLD_NAME | explicitly rename the class.
--rename-instance     OLD_NAME | explicitly rename the instance. 
--rename-title        OLD_NAME | explicitly rename the title.
--silent                       | don't print the container ID of found/created window  
-s, --summon                   | summon window instead of switching workspace focus  
-t, --title           TITLE    | Search for windows with the given TITLE  
--verbose                      | More stuff is printed to stderr  
-v, --version                  | print version info and exit  
-d, --winid           WIN_ID   | Search for windows with WIN_ID  

.fi
.RE

.SS -e, --command         COMMAND
.PP
\fBExample\fP

.PP
.RS

.nf
# with --command:
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# with -- (recomended)
i3run --instance sublime_text -- subl "&&" notify-send "sublime is started"

.fi
.RE

.PP
Notice that you will need to \fIescape\fP some shell
builtins that effect the commandline (\fB\fC&&\fR, \fB\fC;\fR,
\fB\fC&\fR, \fB\fC|\fR, \fB\fC||\fR ...) in the second example.

.SS -x, --rename          OLD_NAME
.PP
If the search criteria is \fB\fC--instance\fR, the window
with instance: \fIOLDNAME\fP will get a new instance
name matching the criteria when it is created
(\fIneeds \fB\fCxdotool\fR\fP).

.PP
\fBNB\fP
.br
This option will not work reliably when using multiple
search criteria. When you want to do that instead use:
.br
\fB\fC--rename-instance , --rename-class , --rename-title\fR .

.PP
.RS

.nf
i3run --instance budswin --rename sublime_main -- subl

# when the command above is executed:
# a window with the instance name: "budswin" will be searched for.
# if no window is found the command: "subl" will get executed,
# and when a window with the instance name: "sublime_main" is found,
# the instance name of that window will get renamed to: "budswin"

# the example below, will not work properly:  
i3run --title bud --instance budswin --rename sublime_main -- subl

# it will start like the first example, but if it
# doesnt find the custom instance budswin, it will
# try to search for a window with the TITLE sublime_main

# do this instead:  
i3run --title bud --instance budswin --rename-instance sublime_main -- subl

.fi
.RE

.SH USAGE
.PP
i3run will try to find a window matching a criteria.
Criteria is specified with one or more command line options:
.br
\fB\fC--class , --instance , --title , --conid , --winid\fR
.br
All criteria specified must match, if multiple windows
match all criteria one will be chosen at random.

.PP
Depending on the state of target window different actions will apply:

.PP
.RS

.nf
Active and not handled by i3fyra     | send to scratchpad
Active and handled by i3fyra         | send container to scratchpad
Handled by i3fyra and hidden         | **show** container
Not handled by i3fyra and hidden     | **show** window
Not on current workspace             | goto workspace and focus window
Not active, not hidden, on workspace | focus window
Not found                            | execute COMMAND

.fi
.RE

.PP
Hidden in this context,  means that window is on
the scratchpad. Show in this context means,  move
window to current workspace.

.PP
With \fB\fC--nohide\fR set windows/containers will not be
sent to the scratchpad by \fBi3run\fP\&.

.PP
With \fB\fC--summon\fR windows not on current workspace
will be sent to current workspace instead of switching
workspace.

.PP
COMMAND is everything after -- , or the argument to \fB\fC--command\fR\&.

.PP
If COMMAND doesn't result in a window that matches the criteria
\fBi3run\fP will \fIget stuck\fP waiting for such a window, and it can
lead to undesired behavior.
.br
Don't do this: \fB\fCi3run --class Google-chrome -- firefox\fR

.SH ENVIRONMENT
.SS I3RUN_BOTTOM_GAP, I3RUN_RIGHT_GAP, I3RUN_LEFT_GAP, I3RUN_TOP_GAP
.PP
Distance from the screen edge to
show floating windows. This only has effect When
\fB\fC--mouse\fR option is used and the window needs to
be autoadjusted not to be rendered \fIoutisde\fP the
workspace.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3run/options
================================================
--instance|-i INSTANCE  [--hide] [--summon|-s] [--nohide|-g] [--verbose] [--silent]
--class|-c    CLASS     [--hide] [--rename|-x OLD_NAME] 
--title|-t    TITLE     [--hide] [--rename-instance OLD_NAME] [--rename-class OLD_NAME] [--rename-title OLD_NAME]
--conid|-n    CON_ID    [--hide] [--force|-f] [--FORCE|-F] 
--winid|-d    WIN_ID    [--hide] [--command|-e COMMAND] [--mouse|-m]
--help|-h
--version|-v



================================================
FILE: src/i3run/docs/description.md
================================================

i3run will try to find a window matching a criteria.
Criteria is specified with one or more command line options:  
`--class , --instance , --title , --conid , --winid`  
All criteria specified must match, if multiple windows
match all criteria one will be chosen at random.  

Depending on the state of target window different actions will apply:  

    Active and not handled by i3fyra     | send to scratchpad
    Active and handled by i3fyra         | send container to scratchpad
    Handled by i3fyra and hidden         | **show** container
    Not handled by i3fyra and hidden     | **show** window
    Not on current workspace             | goto workspace and focus window
    Not active, not hidden, on workspace | focus window
    Not found                            | execute COMMAND

Hidden in this context,  means that window is on
the scratchpad. Show in this context means,  move
window to current workspace.

With `--nohide` set windows/containers will not be
sent to the scratchpad by **i3run**.  

With `--summon` windows not on current workspace
will be sent to current workspace instead of switching
workspace.

COMMAND is everything after -- , or the argument to `--command`.  

If COMMAND doesn't result in a window that matches the criteria
**i3run** will *get stuck* waiting for such a window, and it can
lead to undesired behavior.  
Don't do this: `i3run --class Google-chrome -- firefox`



================================================
FILE: src/i3run/docs/environment_variables.md
================================================


## ENVIRONMENT

### I3RUN_BOTTOM_GAP, I3RUN_RIGHT_GAP, I3RUN_LEFT_GAP, I3RUN_TOP_GAP

Distance from the screen edge to
show floating windows. This only has effect When
`--mouse` option is used and the window needs to
be autoadjusted not to be rendered *outisde* the
workspace.



================================================
FILE: src/i3run/docs/options/class
================================================
Search for windows with the given CLASS



================================================
FILE: src/i3run/docs/options/command
================================================
execute COMMAND if window is not found  

**Example**

``` shell
# with --command:
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# with -- (recomended)
i3run --instance sublime_text -- subl "&&" notify-send "sublime is started"
```

Notice that you will need to *escape* some shell
builtins that effect the commandline (`&&`, `;`,
`&`, `|`, `||` ...) in the second example.



================================================
FILE: src/i3run/docs/options/conid
================================================
Search for windows with the given CON_ID 



================================================
FILE: src/i3run/docs/options/FORCE
================================================
Execute COMMAND (`--command`), even if the window already exist. 



================================================
FILE: src/i3run/docs/options/force
================================================
Execute COMMAND (`--command`), even if the window already exist. But not when hiding a window.



================================================
FILE: src/i3run/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3run/docs/options/hide
================================================
always send target window to the scratchpad  



================================================
FILE: src/i3run/docs/options/instance
================================================
Search for windows with the given INSTANCE  



================================================
FILE: src/i3run/docs/options/mouse
================================================
windows will be summoned to the mouse cursor  



================================================
FILE: src/i3run/docs/options/nohide
================================================
Don't hide window/container if it's active.  



================================================
FILE: src/i3run/docs/options/rename
================================================
rename window properties on creation  

If the search criteria is `--instance`, the window
with instance: *OLDNAME* will get a new instance
name matching the criteria when it is created
(*needs `xdotool`*).

**NB**  
This option will not work reliably when using multiple
search criteria. When you want to do that instead use:  
`--rename-instance , --rename-class , --rename-title` .

```shell
i3run --instance budswin --rename sublime_main -- subl

# when the command above is executed:
# a window with the instance name: "budswin" will be searched for.
# if no window is found the command: "subl" will get executed,
# and when a window with the instance name: "sublime_main" is found,
# the instance name of that window will get renamed to: "budswin"

# the example below, will not work properly:  
i3run --title bud --instance budswin --rename sublime_main -- subl

# it will start like the first example, but if it
# doesnt find the custom instance budswin, it will
# try to search for a window with the TITLE sublime_main

# do this instead:  
i3run --title bud --instance budswin --rename-instance sublime_main -- subl
```



================================================
FILE: src/i3run/docs/options/rename-class
================================================
explicitly rename the class.



================================================
FILE: src/i3run/docs/options/rename-instance
================================================
explicitly rename the instance. 



================================================
FILE: src/i3run/docs/options/rename-title
================================================
explicitly rename the title.



================================================
FILE: src/i3run/docs/options/silent
================================================
don't print the container ID of found/created window  



================================================
FILE: src/i3run/docs/options/summon
================================================
summon window instead of switching workspace focus  



================================================
FILE: src/i3run/docs/options/title
================================================
Search for windows with the given TITLE  



================================================
FILE: src/i3run/docs/options/verbose
================================================
More stuff is printed to stderr  



================================================
FILE: src/i3run/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3run/docs/options/winid
================================================
Search for windows with WIN_ID  



================================================
FILE: src/i3run/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3run/func/focuswindow.sh
================================================
#!/bin/bash

focuswindow(){

  local hvar target_container

  # prioritize "visible" containers 
  # when we get multiple matches (SUS)
  if [[ ${i3list[SUS]} = 1 || ${i3list[TWC]} = "${i3list[AWC]}" ]]; then
    target_container=${i3list[TWC]}
  elif [[ ${i3list[WTN]} = "${i3list[WAN]}" ]]; then
    target_container=$(i3viswiz "${_criteria[@]}")
  elif [[ ${i3list[WTN]} = __i3_scratch ]]; then 
    target_container=$(i3viswiz --scratchpad "${_criteria[@]}")
  fi
  
  : "${target_container:=${i3list[TWC]}}"

  [[ $target_container != "${i3list[TWC]}" ]] && {
    _array=$(i3list --conid "$target_container")
    _pass_array=(${_o[verbose]:+--verbose} --array "$_array")
    eval "$_array"
  }

  # hide target window if it is active
  # or --hide option is used
  if ((i3list[AWC] == target_container)); then
    hidewindow
  elif [[ ${_o[hide]} ]]; then
    [[ ${i3list[WTN]} != __i3_scratch ]] && hidewindow
  else # focus target window.
    # hvar can contain floating state of target
    hvar=$(i3var get "hidden${target_container}")
    if [[ -n $hvar ]]; then
      # windows need to be floating on scratchpad
      # so to "restore" a tiling window we do this
      ((hvar == 1)) && fs=enable || fs=disable
      # clear the variable
      i3var set "hidden${target_container}"
    else
      ((i3list[TWF] == 1)) && fs=enable || fs=disable
    fi
    
    if [[ -z ${i3list[TWP]} && ${i3list[WAN]} != "${i3list[WTN]}" ]]; then
      # target is not handled by i3fyra and not active
      # TWP - target window parent container name
      # target is not on active workspace
      if [[ ${i3list[WTN]} = __i3_scratch || ${_o[summon]} ]]; then
        messy "[con_id=${target_container}]"           \
              move --no-auto-back-and-forth to workspace "${i3list[WAN]}", \
              floating "$fs"
          ((i3list[TWF] && _o[mouse])) && sendtomouse
      else
        messy workspace --no-auto-back-and-forth "${i3list[WTN]}"
      fi
        
    elif [[ ${i3list[WAN]} != "${i3list[WTN]}" ]]; then
      # window is handled by i3fyra and not active
      if [[ ${i3list[WFN]} = "${i3list[WAN]}" ]]; then
        # target window is in a hidden (LHI) container
        [[ ${i3list[TWP]} =~ [${i3list[LHI]}] ]] \
          && i3fyra --force --show "${i3list[TWP]}" "${_pass_array[@]}"

      else # current ws is not i3fyra WS
        if [[ ${i3list[WTN]} = __i3_scratch || ${_o[summon]} ]]; then

          messy "[con_id=${target_container}]" \
                "move --no-auto-back-and-forth to workspace ${i3list[WAN]}," \
                "floating $fs"

          ((hvar && _o[mouse])) && sendtomouse
        else # goto target windows workspace
          # WTN == name (string) of workspace
          messy workspace --no-auto-back-and-forth "${i3list[WTN]}"
        fi
      fi
    fi

    messy "[con_id=${target_container}]" focus

   ((_o[force] + _o[FORCE] > 0)) && [[ ${_command[*]} ]] && run_command
  fi

  ((_o[silent])) || echo "${target_container}"
}



================================================
FILE: src/i3run/func/hidewindow.sh
================================================
#!/bin/bash

hidewindow() {
  # send it to the scratchpad
  if ((!_o[nohide])); then
    if [[ -z ${i3list[TWP]} ]]; then
      # keep floating state in a var
      messy "[con_id=${i3list[TWC]}]" floating enable, move scratchpad
      i3var set "hidden${i3list[TWC]}" "${i3list[TWF]}"
    else
      # if it is handled by i3fyra  hide the (A|B|C|D) container
      i3fyra --force --hide "${i3list[TWP]}" "${_pass_array[@]}" 
    fi

   ((_o[FORCE])) && [[ ${_command[*]} ]] && run_command

  else

   ((_o[force] + _o[FORCE] > 0)) && [[ ${_command[*]} ]] && run_command
  fi
}



================================================
FILE: src/i3run/func/launchcommand.sh
================================================
#!/bin/bash

launchcommand(){

  local winid conid k l
  declare -a xdtopt

  [[ $_command ]] || ERX i3run no command, no action
  
  run_command

  if   [[ -n ${_o[rename]} ]]; then

    [[ ${_criteria[0]} = '--class'    ]] && xdtopt=("--class")
    [[ ${_criteria[0]} = '--instance' ]] && xdtopt=("--classname")
    [[ ${_criteria[0]} = '--title   ' ]] && xdtopt=("--name")

    xdtopt+=("${_criteria[1]}")
    _criteria[1]=${_o[rename]}

  elif [[ -n "${_o[rename-title]}${_o[rename-class]}${_o[rename-instance]}" ]]; then

    for k in title class instance ; do

      [[ ${_o[rename-$k]} ]] || continue
      
      case "$k" in
        title    ) xdtopt+=(--name "${_o[$k]}")      ;;
        class    ) xdtopt+=(--class "${_o[$k]}")     ;;
        instance ) xdtopt+=(--classname "${_o[$k]}") ;;
      esac

      # when renaming, replace the criteria arg (--? + 1)
      # with the argument to the replace (OLD_NAME)
      for l in "${!_criteria[@]}"; do
        [[ ${_criteria[$l]} = --$k ]] && {
          _criteria[l+1]=${_o[rename-$k]} 
          break
        }
      done

    done

  fi

  [[ -n "${xdtopt[*]}" ]] && {

    read -rs winid conid \
      <<< "$(i3get "${_criteria[@]}" -yr dn --print-format '%v ')"

    ((_o[verbose])) \
      && ERM "i3run -> xdotool set_window ${xdtopt[*]} $winid"
      
    xdotool \
      set_window "${xdtopt[@]}" "$winid"       \
      set_window --overrideredirect 1 "$winid" \
      set_window --overrideredirect 0 "$winid" \
      windowunmap "$winid"                     \
      windowmap   "$winid"                           

    # need to re-get conid here because a the window
    # gets a new conid when we --overrideredirect
    conid=$(i3get -d "$winid")
  }
  
  : "${conid:=$(i3get -y "${_criteria[@]}")}"
  
  ((_o[mouse])) && sendtomouse

  messy "[con_id=$conid]" focus
  ((_o[silent])) || echo "$conid"
}



================================================
FILE: src/i3run/func/run_command.sh
================================================
#!/bin/bash

run_command() {
  [[ ${_command[*]} ]] || return
  ((_o[verbose])) && ERM "i3run -> ${_command[*]}"
  
  nohup env "${_command[@]}"  > /dev/null 2>&1 &
}



================================================
FILE: src/i3run/func/sendtomouse.sh
================================================
#!/bin/bash

sendtomouse(){
  declare -i X Y newy newx tmpx tmpy breakx breaky

  eval "$(i3list "${_criteria[@]}")"

  messy "[con_id=${i3list[TWC]}]" focus

  ((i3list[TWF])) && {
    breaky=$((i3list[WAH]-(I3RUN_BOTTOM_GAP+i3list[TWH])))
    breakx=$((i3list[WAW]-(I3RUN_RIGHT_GAP+i3list[TWW])))

    eval "$(xdotool getmouselocation --shell)"

    tmpy=$((Y-(i3list[TWH]/2)))
    tmpx=$((X-(i3list[TWW]/2))) 

    ((Y>(i3list[WAH]/2))) \
      && newy=$((tmpy>breaky
              ? breaky
              : tmpy)) \
      || newy=$((tmpy<I3RUN_TOP_GAP
              ? I3RUN_TOP_GAP
              : tmpy))

    ((X<(i3list[WAW]/2))) \
      && newx=$((tmpx<I3RUN_LEFT_GAP 
              ? I3RUN_LEFT_GAP 
              : tmpx)) \
      || newx=$((tmpx>breakx
              ? breakx 
              : tmpx))

    messy "[con_id=${i3list[TWC]}]" \
      move absolute position $newx $newy
  }
}



================================================
SYMLINK: src/i3run/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3run/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3run/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3run/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3run/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3run/share.mak -> share.mak
================================================



================================================
FILE: src/i3var/config.mak
================================================
NAME         := i3var
VERSION      := 0.050
CREATED      := 2017-12-22
UPDATED      := 2022-05-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := get or set a i3 variable
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  ?=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS'
	                
	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  echo '## OPTIONS'
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
			"## COPYRIGHT"

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3var/i3var
================================================
#!/bin/bash

main(){

  action=$1 variable_name=$2 value_to_set=$3

  [[ $action =~ get|set && ${#@} -gt 1 ]] \
    || ERX "$* not a valid command"

  : "${json:=${_o[json]:-$(i3-msg -t get_tree)}}"

  re='^\{"id":([0-9]+)[^[]+\[([^]]*"'"${variable_name}"'=([^"]*)"[^]]*)?'
  [[ $json =~ $re ]] || ERX "no vars found"

  root_id=${BASH_REMATCH[1]}
  current_value=${BASH_REMATCH[3]}

  if [[ $action = set ]]; then

    new_mark="${variable_name}=$value_to_set"
    old_mark="${variable_name}=$current_value"

    # this will remove the old mark
    [[ $current_value ]] \
      && messy "[con_id=$root_id] mark --toggle --add $old_mark"

    [[ $value_to_set ]] \
      && messy "[con_id=$root_id] mark --add $new_mark"

  elif [[ $current_value ]]; then
    echo "$current_value"
  fi
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3var/i3var.1
================================================
.nh
.TH I3VAR   2022-05-21 budlabs "User Manuals"
.SH NAME
.PP
i3var - get or set a i3 variable

.SH SYNOPSIS
.PP
.RS

.nf
i3var     set VARNAME [VALUE] [--json JSON]
i3var     get VARNAME [--json JSON]
i3var     --help|-h --version|-v --verbose

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
-h, --help         | print help and exit  
--json        JSON | Use JSON instead of the output of `i3-msg -t get_tree`  
--verbose          | print messages to stderr  
-v, --version      | print version info and exit  

.fi
.RE

.SH USAGE
.PP
\fB\fCi3var\fR is used to get or set a "variable" that is bound to the current i3wm session.
The variable is actually the mark on the \fBroot container\fP\&.

.PP
\fB\fCset\fR  [VALUE]
.br
If \fIVARNAME\fP doesn't exist,
a new window and mark will be created.
If \fIVARNAME\fP exists, it's value will be replaced with \fIVALUE\fP\&.
.br
If \fIVALUE\fP is not defined,
\fIVARNAME\fP will get unset (the mark is removed).

.PP
\fB\fCget\fR
.br
if \fIVARNAME\fP exists,
its value will be printed to \fBSTDOUT\fP\&.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3var/options
================================================
    set VARNAME [VALUE] [--json JSON]
    get VARNAME [--json JSON]
    --help|-h --version|-v --verbose



================================================
FILE: src/i3var/docs/description.md
================================================
`i3var` is used to get or set a "variable" that is bound to the current i3wm session. 
The variable is actually the mark on the **root container**.

`set`  \[VALUE\]  
If *VARNAME* doesn't exist,
a new window and mark will be created. 
If *VARNAME* exists, it's value will be replaced with *VALUE*.  
If *VALUE* is not defined, 
*VARNAME* will get unset (the mark is removed).  

`get`  
if *VARNAME* exists, 
its value will be printed to **STDOUT**.  



================================================
FILE: src/i3var/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3var/docs/options/json
================================================
Use JSON instead of the output of `i3-msg -t get_tree`  



================================================
FILE: src/i3var/docs/options/verbose
================================================
print messages to stderr  



================================================
FILE: src/i3var/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3var/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3var/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3var/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3var/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3var/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3var/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3var/share.mak -> share.mak
================================================



================================================
FILE: src/i3viswiz/config.mak
================================================
NAME         := i3viswiz
VERSION      := 0.57
CREATED      := 2018-01-18
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := options
DESCRIPTION  := professional window focus for i3wm
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  :=                     \
	$(CACHE_DIR)/synopsis.txt            \
	$(DOCS_DIR)/description.md           \
	$(CACHE_DIR)/help_table.txt          \
	$(CACHE_DIR)/long_help.md            \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS'

	  sed 's/^/    /g' $(CACHE_DIR)/synopsis.txt

	  echo "## OPTIONS"
	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

	  printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
			"## COPYRIGHT"

		cat $(CACHE_DIR)/copyright.txt
	} > $@



================================================
FILE: src/i3viswiz/i3viswiz
================================================
#!/bin/bash

main(){

  [[ ${arg_direction:=${1,,}} ]] && { 
    [[ ${arg_direction} =~ ^(l|r|u|d|left|right|up|down)$ ]]  \
      || ERX "i3viswiz: direction ('$arg_direction') is not valid!" \
             "( left|right|up|down|l|r|u|d )"

    shift
    (($#)) && ERX "i3viswiz: expected 0 arguments got '($*)'"
    arg_direction=${arg_direction:0:1}
  }

  : "${_o[json]:=$(i3-msg -t get_tree)}"
  : "${_o[debug]:=LIST}"
  : "${_o[debug-format]:=%k=%v }"
  arg_gap=$((_o[gap] > 0 ? _o[gap] : 5))

  # check if focus_wrap workspace is set
  # by looking for a mark on root container (i3var)
  # if no mark exist, check config, set the mark
  re='^\{"id":([0-9]+)[^[]+\[([^]]*"focus_wrap=([^"]*)"[^]]*)?\]'
  [[ ${_o[json]} =~ $re ]] || {
    i3-msg -t get_config | grep -E 'focus_wrapping\s+workspace' > /dev/null \
      && wrapping=workspace

    i3var set focus_wrap "${wrapping:-normal}"
  }

  for o in instance class conid winid mark title titleformat type role parent; do

    [[ ${_o[$o]} ]] || continue

    case "$o" in
      role        ) json_key=window_role     ;;
      type        ) json_key=window_type     ;;
      titleformat ) json_key=title_format    ;;
      parent      ) json_key=i3fyracontainer ;;
      title       ) json_key=name            ;;
      winid       ) json_key=window          ;;
      *           ) json_key=$o              ;;
    esac

    if [[ ${_o[$o]} = LIST ]]; 
      then arg_list=$json_key
      else begin_block+="arg_search[\"$json_key\"]=\"${_o[$o]}\"; "
    fi

  done

  result=$(
    # <<<    - content of string _o[json] will be input  to command awk
    # -f <() - output of <() will be interpreted as file containg AWK script
    # FS     - change Field  Separator to ":" (from whitespace)
    # RS     - change Record Separator to "," (from linebreak)
    # arg_   - these variables are available in the AWK script
    <<< "${_o[json]}" gawk -f <(

      echo "BEGIN {$begin_block}"
      _awklib

    ) FS=: RS=, \
    arg_direction="$arg_direction" arg_gap="$arg_gap" \
    arg_debug="${_o[debug]}" arg_debug_format="${_o[debug-format]}" \
    arg_scratchpad="${_o[scratchpad]}" arg_list="$arg_list"
  )
  
  if [[ $result =~ ^floating ]]; then

    case "$arg_direction" in
      l|u ) direction=prev   ;;
      r|d ) direction=next   ;;
      *   ) ERX "$arg_direction not valid direction (l|r|u|d)" ;;
    esac

    messy focus $direction

  elif [[ ! $arg_direction && ! ${_o[focus]} ]] || [[ $arg_list ]]; then
    [[ $result ]] && echo "$result"
  elif [[ $result =~ ^[0-9]+ ]]; then

    read -r target_id active_id root_id marked_id <<< "$result"

    [[ $arg_direction ]] && {

      # i3var set viswiz-last-direction "$active_id"
      # manually update i3vars for performance reasons
      variable_name=i3viswiz-last-direction
      new_mark="${variable_name}=$active_id"

      # remove old mark
      [[ $marked_id ]] && {
        old_mark="${variable_name}=$marked_id"
        messy "[con_mark=$old_mark] mark --toggle --add $old_mark"
      }

      messy "[con_id=$root_id] mark --add $new_mark"

    }

    messy "[con_id=$target_id]" focus
  else
    ERX "focus failed. '$result' doesn't make any sense"
  fi
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3viswiz/i3viswiz.1
================================================
.nh
.TH I3VISWIZ   2023-07-22 budlabs "User Manuals"
.SH NAME
.PP
i3viswiz - professional window focus for i3wm

.SH SYNOPSIS
.PP
.RS

.nf
i3viswiz     [--gap|-g GAPSIZE] DIRECTION 
i3viswiz     --title|-t TITLE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f] 
i3viswiz     --instance|-i INSTANCE   [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --class|-c CLASS      [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --titleformat|-o FORMAT [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --winid|-d  WINID     [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --parent|-p  CONTAINER   [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --role|-r ROLE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --type|-y TYPE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz     --scratchpad
i3viswiz     [--json JSON] [--debug VARLIST] [--debug-format FORMAT] [--verbose]
i3viswiz     --help|-h
i3viswiz     --version|-v

.fi
.RE

.SH OPTIONS
.PP
.RS

.nf
-c, --class        CLASS     | find window by **class**
--debug            VARLIST   | detailed output   
--debug-format     FORMAT    | how to format debug output  
-f, --focus                  | focus target **visible** window  
-g, --gap          GAPSIZE   | distance in pixels from the current window where new focus will be searched.  
-h, --help                   | print help and exit  
-i, --instance     INSTANCE  | find window by **instance**
--json             JSON      | use JSON instead of `i3-msg -t get_tree`  
-p, --parent       CONTAINER | window is visible in the i3fyra CONTAINER 
-r, --role         ROLE      | find window by **window_role**
--scratchpad                 | this will treat the scratchpad as the active workspace.
-t, --title        TITLE     | find window by **class**  
-o, --titleformat  FORMAT    | find window by **title_format**  
-y, --type         TYPE      | find window by **window_type**
--verbose                    | louder output   
-v, --version                | print version info and exit  
-d, --winid        WINID     | window is visible with WINID  

.fi
.RE

.SS --debug            VARLIST
.PP
VARLIST is used to determine what to output. By
default the value of VARLIST is: \fB\fCLIST\fR .
Available units are:

.PP
.RS

.nf
wall         | none|(up|left|down|right-)(workspace|area)
trgcon       | container id of the window to be focused
trgpar       | name of i3fyra container target container is located in
gap          | internal gap value used
sw           | active workspace width
sh           | active workspace height
sx           | active workspace x position
sy           | active workspace y position
aw           | active window width
ah           | active window height
ax           | active window x position
ay           | active window y position
trgx         | target windows x position
trgy         | target windows y position
grouplayout  | active windows parent container layout (tabbed|splitv|splith|stacked)
groupid      | active windows parent container ID
grouppos     | active windows position relative to its sibling containers
groupsize    | number of child containers in active windows parent container
firstingroup | container ID of the first child in active windows parent container
lastingroup  | container ID of the last child in active windows parent container
LIST         | prints a table with all visible windows
ALL          | all the above combined

.fi
.RE

.PP
Multiple units can be used if comma separated.

.PP
\fBNB\fP
.br
For this option to be usefule LIST must be the
search criterion.

.PP
Example:

.PP
.RS

.nf
$ i3viswiz --instance LIST up --debug gap,wall,grouppos
gap=5 wall=up-area grouppos=1 

.fi
.RE

.SS --debug-format     FORMAT
.PP
The default value of FORMAT is "%k=%v ".  \fB\fC%k\fR is
translated to the key/unit name, and \fB\fC%v\fR to the
value.

.PP
Example:

.PP
.RS

.nf
$ i3viswiz --instance LIST u --debug gap,wall,grouppos --debug-format "%v\\n"
5
up-area
1 

.fi
.RE

.SS -f, --focus
.PP
if this is not set, the CON_ID of target window will
get printed to STDOUT.

.SS -p, --parent       CONTAINER
.PP
CONTAINER is one of the i3fyra containers: A|B|C|D

.SS --scratchpad
.PP
This is useful if you have a f.i. a tabbed container
on the scratchpad, and you want to get the id of the
window that have focus in that container.

.SH USAGE
.PP
\fB\fCi3viswiz\fR either prints a list of the currently
visible tiled windows to \fB\fCstdout\fR or shifts the
focus depending on the arguments.

.PP
If a \fIDIRECTION\fP (left|right|up|down) is passed,
\fB\fCi3wizvis\fR will shift the focus to the window
closest in the given \fIDIRECTION\fP, or warp focus
if there are no windows in the given direction.


.SH examples
.PP
replace the normal i3 focus keybindings with viswiz like this:

.PP
.RS

.nf
Normal binding:
bindsym Mod4+Shift+Left   focus left

Wizzy binding:
bindsym Mod4+Left   exec --no-startup-id i3viswiz left

.fi
.RE

.PP
example output:

.PP
.RS

.nf
$ i3viswiz --instance LIST

* 94475856575600 ws: 1 x: 0     y: 0     w: 1558  h: 410   | termsmall
- 94475856763248 ws: 1 x: 1558  y: 0     w: 362   h: 272   | gl
- 94475856286352 ws: 1 x: 0     y: 410   w: 1558  h: 643   | sublime_main
- 94475856449344 ws: 1 x: 1558  y: 272   w: 362   h: 781   | thunar-lna

.fi
.RE

.PP
If \fB\fC--class\fR , \fB\fC--instance\fR, \fB\fC--title\fR,
\fB\fC--titleformat\fR, \fB\fC--winid\fR or \fB\fC--parent\fR is used
together with the argument \fBLIST\fP\&.
i3viswiz will print this output, with the type in
the last column of the table (class in the
example above).

.PP
If the argument is not LIST the container ID of
a visible window matching the criteria will be printed.

.PP
Assuming the same scenario as the example above,
the following command:
.br
\fB\fC$ i3viswiz --instance termsmall\fR
.br
will output the container_id (\fB\fC94475856575600\fR).
.br
If no window is matching output will be blank.

.PP
Multiple criteria is allowed:
.br
\fB\fC$ i3viswiz --instance termsmall --class URxvt\fR

.PP
\fBfocus wrapping\fP

.PP
if the setting "focus_wrapping" is set
to "workspace" in the i3config. i3viswiz will
wrap the focus only inside the currenttly
focused workspace instead of the whole work
area (other monitors).

.PP
The setting has to be present in the active config
before the first i3viswiz invokation.

.PP
To force this behavior otherwise, issue the following
command:
.br
\fB\fCi3var set focus_wrap workspace\fR

.PP
Or to disable it:
.br
\fB\fCi3var set focus_wrap normal\fR

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2018-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT



================================================
FILE: src/i3viswiz/options
================================================
    [--gap|-g GAPSIZE] DIRECTION 
    --title|-t TITLE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f] 
    --instance|-i INSTANCE   [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --class|-c CLASS      [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --titleformat|-o FORMAT [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --winid|-d  WINID     [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --parent|-p  CONTAINER   [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --role|-r ROLE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --type|-y TYPE       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
    --scratchpad
    [--json JSON] [--debug VARLIST] [--debug-format FORMAT] [--verbose]
    --help|-h
    --version|-v



================================================
FILE: src/i3viswiz/awklib/END.awk
================================================
END{

  if (arg_scratchpad)
    listvis(scratchpad_id)
  else
  {
    for (wsid in visible_workspaces)
      listvis(wsid)
  }
  

  if (length(arg_search))
  {
    for (suspect_id in suspect_targets) {

      search_match=0

      for (search in arg_search) { 
        if (match(ac[suspect_id][search],arg_search[search]) && suspect_id in visible_containers)
          search_match+=1
      }

      if (search_match == length(arg_search)) {
        print suspect_id
        break
      }
    }
    exit
  }

  # commandline example:
  #   i3viswiz down  (arg_target=d arg_type=direction)
  #   i3viswiz -i d  (arg_target=d arg_type=instance)
  else {

    if (ac[active_container_id]["floating"] == 1) {
      target_container="floating"
      print_us["trgcon"]=active_container_id
      print_us["trgpar"]="floating"
    } else {

      target_container=find_window(arg_direction)

      # if we cannot find a window in the given direction
      # try again with increased gapsize.
      if (target_container == "") {
        arg_gap=arg_gap+30
        target_container=find_window(arg_direction)
      }

      print_us["trgcon"]=target_container
      print_us["trgpar"]=ac[target_container]["i3fyracontainer"]
      
    }

    if (arg_direction ~ /^([urld])$/ && arg_list !~ /./) {
      print target_container, active_container_id, root_id, last_direction_id
      exit
    }
  }

  # commandline example:
  #   i3viswiz -i firefox   (arg_target=X arg_type=instance)
  #   i3viswiz -i firefox d (arg_target=d arg_type=instance)

  print_us["gap"]=arg_gap

  print_us["sw"]=ac[active_workspace_id]["w"]
  print_us["sh"]=ac[active_workspace_id]["h"]
  print_us["sx"]=ac[active_workspace_id]["x"]
  print_us["sy"]=ac[active_workspace_id]["y"]

  print_us["aw"]=ac[active_container_id]["w"]
  print_us["ah"]=ac[active_container_id]["h"]
  print_us["ax"]=ac[active_container_id]["x"]
  print_us["ay"]=ac[active_container_id]["y"]

  if (arg_debug == "ALL") {
    for (k in print_us) {
      v=gensub(/%k/,k,1,arg_debug_format)
      debug_out=debug_out gensub(/%v/,print_us[k],1,v)
    }

    print debug_out
    arg_debug="LIST"
  }

  else if (arg_debug != "LIST") {
    split(arg_debug,debug_vars,",")
    for (k in debug_vars) {
      if (debug_vars[k] in print_us) {
        v=gensub(/%k/,debug_vars[k],1,arg_debug_format)
        var=gensub(/^"|"$/,"","g",print_us[debug_vars[k]])
        debug_out=debug_out gensub(/%v/,var,1,v)
      }
    }

    print debug_out
  }

  if (arg_debug !~ /LIST/)
    exit
  

  split("x y w h",geo," ")
  for (conid in visible_containers) {
    
    printf("%s %d ", (conid==active_container_id ? "*" : "-" ), conid)
    cop=outputs[ac[conid]["output"]] # output of current container          
    printf("ws: %d ", ws=ac[cop]["num"]) # workspace on current output
    for (s in geo) { printf("%2s %-6s", geo[s] ":", ac[conid][geo[s]]) }

    print (arg_list ~ /(window_role|window_type|title_format|class|i3fyracontainer|instance|name|window)$/ ?
          "| " gensub(/"/,"","g",ac[conid][arg_list]) : "") 
  }

  # example output:
  # * 94548870755248 x: 0     y: 0     w: 1432  h: 220   | A
  # - 94548870641312 x: 0     y: 220   w: 1432  h: 860   | C
}




================================================
FILE: src/i3viswiz/awklib/find_window.awk
================================================
function find_window(direction,
                     trgx,trgy,
                     aww,awh,awx,awy,
                     wsw,wsh,wsx,wsy,
                     opx,opy,opw,oph,
                     rootx,rooty,rootw,rooth,
                     opid,workspace_id,
                     found,wall)
{
  wsx=ac[active_workspace_id]["x"]; wsy=ac[active_workspace_id]["y"]
  wsw=ac[active_workspace_id]["w"]; wsh=ac[active_workspace_id]["h"]

  awx=ac[active_container_id]["x"]; awy=ac[active_container_id]["y"]
  aww=ac[active_container_id]["w"]; awh=ac[active_container_id]["h"]

  opx=ac[active_output_id]["x"]; opw=ac[active_output_id]["w"]
  opy=ac[active_output_id]["y"]; oph=ac[active_output_id]["h"]

  rootx=ac[container_order[1]]["x"]; rootw=ac[container_order[1]]["w"]
  rooty=ac[container_order[1]]["y"]; rooth=ac[container_order[1]]["h"]

  trgx=(direction == "r" ? awx+aww+arg_gap :
        direction == "l" ? awx-arg_gap     :
        awx+(aww/2)+arg_gap )

  trgy=(direction == "d" ? awy+awh+arg_gap :
        direction == "u" ? awy-arg_gap     :
        awy+(awh/2)-arg_gap )

  found=0
  wall="none"

  if ( (direction == "r" && trgx > wsx+wsw) ||
       (direction == "l" && trgx < wsx) ) {

    wall=(direction == "l" ? "left" : "right")

    # invert direction
    direction=(direction == "l" ? "r" : "l")

    if (focus_wrap == "workspace") {

      trgx=(direction == "r" ? wsx+wsw-arg_gap :
                               wsx+arg_gap)

      wall=wall "-workspace"
    }

    else if ( (direction == "l" && trgx > rootx+rootw) ||
              (direction == "r" && trgx < rootx) ) {

      trgx=(direction == "r" ? rootx+rootw-arg_gap :
                               rootx+arg_gap)

      wall=wall "-area"
    } else
      wall=wall "-workspace"
  }

  else if ( (direction == "u" && trgy < wsy) ||
            (direction == "d" && trgy > wsy+wsh) ) {

    wall=(direction == "u" ? "up" : "down")

    trgy=(direction == "d" ? opy+oph+arg_gap :
          direction == "u" ? opy-arg_gap     :
          awy+(awh/2)-arg_gap )

    # invert direction
    direction=(direction == "u" ? "d" : "u")

    if (focus_wrap == "workspace") {

      trgy=(direction == "d" ? wsy+wsh-arg_gap :
                               wsy+arg_gap )

      wall=wall "-workspace"
    }

    else if ( (direction == "d" && trgy < rooty) ||
              (direction == "u" && trgy > rooty+rooth) ) {

      trgy=(direction == "d" ? rooty+rooth-arg_gap :
                               rooty+arg_gap )

      wall=wall "-area"
    } else 
      wall=wall "-workspace"
  }

  if ( last_direction_id in visible_containers ) {

    # last_direction is set by i3var (a mark)
    # so if it is visible we prioritize focusing that
    # if it is adjacent in target direction

    lwx=ac[last_direction_id]["x"]; lwy=ac[last_direction_id]["y"]
    lww=ac[last_direction_id]["w"]; lwh=ac[last_direction_id]["h"]

    switch (direction) {
      case "d":
      case "u":

        if ( (direction == "d" && lwy < awy+awh) ||
             (direction == "u" && lwy+lwh > awy) )
          break

        if ( is_container_at_pos(last_direction_id, lwx, trgy) &&
           ( is_container_at_pos(active_container_id, lwx, awy) ||
             is_container_at_pos(active_container_id, lwx+lww, awy) ) ) {
          found=last_direction_id
        }
      break

      case "r":
      case "l":

        if ( (direction == "r" && lwx < awx+aww) ||
             (direction == "l" && lwx+lww > awx) )
          break

        if ( is_container_at_pos(last_direction_id, trgx, lwy) &&
           ( is_container_at_pos(active_container_id, awx, lwy) ||
             is_container_at_pos(active_container_id, awx, lwy+lwh) ) ) {
          found=last_direction_id
        }
      break
    }
  }

  if (found == 0 && wall != "none") {
    if (direction ~ /l|r/) {
      for (workspace_id in visible_workspaces) {
        # on each workspace try a temporary target y
        # at the middle of the workspace
        tmpy=ac[workspace_id]["y"]+(ac[workspace_id]["h"]/2)-arg_gap
        # test if this temp y position exist both on
        # the current and active workspace (they are aligned)
        # and that trgx exist on current workspace (its aligned to the left)
        if (  is_container_at_pos(workspace_id, trgx, tmpy) && 
              is_container_at_pos(active_output_id, opx, tmpy)) {
          # if trgy is not on the next output
          # set it at the middle (tmpy)
          if (!is_container_at_pos(workspace_id, trgx, trgy))
            trgy=tmpy

          found=1
          break
        }
      }
      trgx=(found == 1 ? trgx : (direction == "l" ? wsx : wsx+wsw))
    }

    else if (direction ~ /u|d/) {

      # make sure trgy is outside active output
      # and not just the workspace (top|bottombars)
      if (wall ~ /workspace/)
        trgy=(direction == "d" ? opy-arg_gap : opy+oph+arg_gap)

      for (workspace_id in visible_workspaces) {
        output_id=outputs[ac[workspace_id]["output"]]
        # on each workspace try a temporary target x
        # at the middle of the output
        tmpx=ac[output_id]["x"]+(ac[output_id]["w"]/2)+arg_gap

        # test if this temp x position also exist on active output
        # test if both the x and y position exist on current output
        if (  is_container_at_pos(output_id, tmpx, trgy) && 
              is_container_at_pos(active_output_id,tmpx, opy)) {
          # set the target y according to the workspace
          # incase the output has a bottombar
          trgy=(direction == "d" ? 
                  ac[workspace_id]["y"]+ac[workspace_id]["h"]-arg_gap :
                  ac[workspace_id]["y"]+arg_gap )
          
          # if trgx is not on the next workspace
          # set it at the middle (tmpx)
          if (!is_container_at_pos(workspace_id, trgx, trgy))
            trgx=tmpx

          found=1
          break
        }
      }
      trgy=(found == 1 ? trgy : (direction == "d" ? wsy : wsy+wsh))
    }
  }

  print_us["wall"]=wall
  print_us["trgx"]=trgx ; print_us["trgy"]=trgy
  print_us["sx"]=wsx ; print_us["sy"]=wsy
  print_us["sw"]=wsw ; print_us["sh"]=wsh

  if (found > 1)
    return found

  for (conid in visible_containers) {
    if (is_container_at_pos(conid, trgx, trgy))
      return conid
  }
}



================================================
FILE: src/i3viswiz/awklib/is_container_at_pos.awk
================================================
function is_container_at_pos(id, x, y,
                             csx,csy,cex,cey) 
{
  # topleft (start) # bottomright (end)
  csy=ac[id]["y"]   ; cey=csy+ac[id]["h"]
  csx=ac[id]["x"]   ; cex=csx+ac[id]["w"]

  return csx <= x && x <= cex && csy <= y && y <= cey
}



================================================
FILE: src/i3viswiz/awklib/listvis.awk
================================================
function listvis(id,
                 stackh,trg)
{
  # searches container with con_id=id recursevely 
  # for visible containers, add them to the global
  # array: visible_containers
  if ("children" in ac[id]) {
    if (ac[id]["layout"] ~ /tabbed|stacked/) {
      trg=ac[id]["focused"]
      if (ac[id]["layout"] ~ /stacked/) {
        stackh=length(ac[id]["children"])
        ac[trg]["h"]+=(ac[trg]["titlebarheight"]*stackh)
        ac[trg]["y"]-=(ac[trg]["titlebarheight"]*stackh)
      }
      listvis(trg)
      # visible_containers[trg]=trg
    } else if (ac[id]["layout"] ~ /split/) {
      for (trg in ac[id]["children"]) {
        listvis(trg)
      }
    }
  } else if (!ac[id]["floating"]) {
    ac[id]["h"]+=ac[id]["titlebarheight"]
    ac[id]["y"]-=ac[id]["titlebarheight"]
    visible_containers[id]=id
  }
}



================================================
SYMLINK: src/i3viswiz/awklib/main.awk -> main.awk
================================================



================================================
FILE: src/i3viswiz/docs/description.md
================================================
`i3viswiz` either prints a list of the currently
visible tiled windows to `stdout` or shifts the
focus depending on the arguments.  

If a *DIRECTION* (left|right|up|down) is passed,
`i3wizvis` will shift the focus to the window
closest in the given *DIRECTION*, or warp focus
if there are no windows in the given direction. 

# examples

replace the normal i3 focus keybindings with viswiz like this:

``` text
Normal binding:
bindsym Mod4+Shift+Left   focus left

Wizzy binding:
bindsym Mod4+Left   exec --no-startup-id i3viswiz left
```

example output:  
```text
$ i3viswiz --instance LIST

* 94475856575600 ws: 1 x: 0     y: 0     w: 1558  h: 410   | termsmall
- 94475856763248 ws: 1 x: 1558  y: 0     w: 362   h: 272   | gl
- 94475856286352 ws: 1 x: 0     y: 410   w: 1558  h: 643   | sublime_main
- 94475856449344 ws: 1 x: 1558  y: 272   w: 362   h: 781   | thunar-lna
```

If `--class` , `--instance`, `--title`,
`--titleformat`, `--winid` or `--parent` is used
together with the argument **LIST**.
i3viswiz will print this output, with the type in
the last column of the table (class in the
example above).  

If the argument is not LIST the container ID of
a visible window matching the criteria will be printed.  

Assuming the same scenario as the example above,
the following command:  
`$ i3viswiz --instance termsmall`  
will output the container_id (`94475856575600`).  
If no window is matching output will be blank.  

Multiple criteria is allowed:  
`$ i3viswiz --instance termsmall --class URxvt`   

**focus wrapping**  

if the setting "focus_wrapping" is set
to "workspace" in the i3config. i3viswiz will
wrap the focus only inside the currenttly
focused workspace instead of the whole work
area (other monitors).

The setting has to be present in the active config
before the first i3viswiz invokation.

To force this behavior otherwise, issue the following
command:  
`i3var set focus_wrap workspace`

Or to disable it:  
`i3var set focus_wrap normal`



================================================
FILE: src/i3viswiz/docs/options/class
================================================
find window by **class**



================================================
FILE: src/i3viswiz/docs/options/debug
================================================
detailed output   

VARLIST is used to determine what to output. By
default the value of VARLIST is: `LIST` .
Available units are:  

```text
wall         | none|(up|left|down|right-)(workspace|area)
trgcon       | container id of the window to be focused
trgpar       | name of i3fyra container target container is located in
gap          | internal gap value used
sw           | active workspace width
sh           | active workspace height
sx           | active workspace x position
sy           | active workspace y position
aw           | active window width
ah           | active window height
ax           | active window x position
ay           | active window y position
trgx         | target windows x position
trgy         | target windows y position
grouplayout  | active windows parent container layout (tabbed|splitv|splith|stacked)
groupid      | active windows parent container ID
grouppos     | active windows position relative to its sibling containers
groupsize    | number of child containers in active windows parent container
firstingroup | container ID of the first child in active windows parent container
lastingroup  | container ID of the last child in active windows parent container
LIST         | prints a table with all visible windows
ALL          | all the above combined
```

Multiple units can be used if comma separated.

**NB**  
For this option to be usefule LIST must be the
search criterion.

Example:  
```text
$ i3viswiz --instance LIST up --debug gap,wall,grouppos
gap=5 wall=up-area grouppos=1 
```



================================================
FILE: src/i3viswiz/docs/options/debug-format
================================================
how to format debug output  

The default value of FORMAT is "%k=%v ".  `%k` is
translated to the key/unit name, and `%v` to the
value.

Example:  
```text
$ i3viswiz --instance LIST u --debug gap,wall,grouppos --debug-format "%v\n"
5
up-area
1 
```



================================================
FILE: src/i3viswiz/docs/options/focus
================================================
focus target **visible** window  

if this is not set, the CON_ID of target window will
get printed to STDOUT.



================================================
FILE: src/i3viswiz/docs/options/gap
================================================
distance in pixels from the current window where new focus will be searched.  



================================================
FILE: src/i3viswiz/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3viswiz/docs/options/instance
================================================
find window by **instance**



================================================
FILE: src/i3viswiz/docs/options/json
================================================
use JSON instead of `i3-msg -t get_tree`  



================================================
FILE: src/i3viswiz/docs/options/p
================================================
list windows display parent container name

This (`-p`) is equivalent to `--parent` without
any arguments. If you want to use an argument, you
have to use the long option (`--parent=ARGUMENT`)



================================================
FILE: src/i3viswiz/docs/options/parent
================================================
window is visible in the i3fyra CONTAINER 

CONTAINER is one of the i3fyra containers: A|B|C|D



================================================
FILE: src/i3viswiz/docs/options/role
================================================
find window by **window_role**



================================================
FILE: src/i3viswiz/docs/options/scratchpad
================================================
this will treat the scratchpad as the active workspace.

This is useful if you have a f.i. a tabbed container
on the scratchpad, and you want to get the id of the
window that have focus in that container.  



================================================
FILE: src/i3viswiz/docs/options/title
================================================
find window by **class**  



================================================
FILE: src/i3viswiz/docs/options/titleformat
================================================
find window by **title_format**  



================================================
FILE: src/i3viswiz/docs/options/type
================================================
find window by **window_type**



================================================
FILE: src/i3viswiz/docs/options/verbose
================================================
louder output   



================================================
FILE: src/i3viswiz/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3viswiz/docs/options/winid
================================================
window is visible with WINID  



================================================
FILE: src/i3viswiz/func/CLEANUP.sh
================================================
#!/bin/bash

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  [[ -f /tmp/i3flip_lock ]] && rm /tmp/i3flip_lock

  [[ -n $_msgstring ]] && {
    ((_o[verbose])) || qflag='-q'
    >&2 i3-msg "${qflag:-}" "$_msgstring"
  }

  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
SYMLINK: src/i3viswiz/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3viswiz/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3viswiz/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3viswiz/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3viswiz/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3viswiz/share.mak -> share.mak
================================================



================================================
FILE: src/i3viswiz/tests/tree.json
================================================
{"id":94548870335040,"type":"root","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"root","window":null,"window_type":null,"nodes":[{"id":94548870336688,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3","window":null,"window_type":null,"nodes":[{"id":94548870339792,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":94548870342928,"type":"workspace","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":0,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"__i3_scratch","num":-1,"window":null,"window_type":null,"nodes":[],"floating_nodes":[{"id":94548870413104,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870388944,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAC=220"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870388944],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870416384,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870401328,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MAB=1432"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870401328],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870419424,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":480,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870408656,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34MBD=452"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":761,"y":414,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870408656],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870554992,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870552448,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34FBD=BD"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870552448],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870555520,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870557472,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34FAC=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870557472],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548871919792,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870876352,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizetits=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870876352],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548872216160,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548872215696,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizemode=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548872215696],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548872227264,"type":"floating_con","orientation":"horizontal","scratchpad_state":"fresh","percent":null,"urgent":false,"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":484,"width":79,"height":72},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548872226800,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["sizecon=X"],"focused":false,"output":"__i3","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":921,"y":504,"width":79,"height":52},"deco_rect":{"x":0,"y":0,"width":79,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548872226800],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"focus":[94548870413104,94548870416384,94548870419424,94548870554992,94548870555520,94548871919792,94548872216160,94548872227264],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94548870342928],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94548870339792],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870396672,"type":"output","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"layout":"output","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"HDMI2","window":null,"window_type":null,"nodes":[{"id":94548870432608,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"topdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":2,"insert_where":2}]},{"id":94548870435728,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"content","window":null,"window_type":null,"nodes":[{"id":94548870366272,"type":"workspace","orientation":"horizontal","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i34XAB"],"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"1","num":1,"window":null,"window_type":null,"nodes":[{"id":94548870373344,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.74583333333333334814,"urgent":false,"marks":["i34XAC"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1432,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870655680,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.20370370370370372015,"urgent":false,"marks":["i34A"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1432,"height":220},"deco_rect":{"x":358,"y":0,"width":358,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870457120,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":20,"width":1432,"height":200},"deco_rect":{"x":0,"y":0,"width":716,"height":20},"window_rect":{"x":0,"y":0,"width":1430,"height":198},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/6","title_format":"auto","window":10485835,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/6","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870755248,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.5,"urgent":false,"focused":true,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":20,"width":1432,"height":200},"deco_rect":{"x":716,"y":0,"width":716,"height":20},"window_rect":{"x":0,"y":0,"width":1430,"height":198},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/10","title_format":"termsmall","window":10485897,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"termsmall","title":"/dev/pts/10","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870755248,94548870457120],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870464656,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.79629629629629627985,"urgent":false,"marks":["i34C"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":220,"width":1432,"height":860},"deco_rect":{"x":954,"y":0,"width":478,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870641312,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":240,"width":1432,"height":840},"deco_rect":{"x":0,"y":0,"width":477,"height":20},"window_rect":{"x":0,"y":0,"width":1430,"height":840},"geometry":{"x":0,"y":240,"width":1518,"height":840},"name":"~/git/lab/i3ass/ass/i3viswiz/awklib/main.awk (i3fyra) - Sublime Text","title_format":"git/lab/i3ass/ass/i3viswiz/awklib/main.awk","window":39845891,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_main","title":"~/git/lab/i3ass/ass/i3viswiz/awklib/main.awk (i3fyra) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870664576,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":240,"width":1432,"height":840},"deco_rect":{"x":477,"y":0,"width":477,"height":20},"window_rect":{"x":0,"y":0,"width":1430,"height":840},"geometry":{"x":0,"y":240,"width":1518,"height":840},"name":"4 Arch - Vivaldi","title_format":"vivaldi","window":46137345,"window_type":"normal","window_properties":{"class":"Vivaldi-main","instance":"vivaldi-stable","window_role":"browser","title":"4 Arch - Vivaldi","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870447152,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.33333333333333331483,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":0,"y":240,"width":1432,"height":840},"deco_rect":{"x":954,"y":0,"width":478,"height":20},"window_rect":{"x":0,"y":0,"width":1430,"height":840},"geometry":{"x":0,"y":0,"width":1130,"height":634},"name":"/dev/pts/9","title_format":"auto","window":10485863,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"auto","title":"/dev/pts/9","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870641312,94548870664576,94548870447152],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870655680,94548870464656],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870589312,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.25416666666666665186,"urgent":false,"marks":["i34XBD"],"focused":false,"output":"HDMI2","layout":"splitv","workspace_layout":"default","last_split_layout":"splitv","border":"normal","current_border_width":-1,"rect":{"x":1432,"y":0,"width":488,"height":1080},"deco_rect":{"x":480,"y":0,"width":480,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870577184,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":0.41851851851851851194,"urgent":false,"marks":["i34B"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1432,"y":0,"width":488,"height":452},"deco_rect":{"x":200,"y":0,"width":200,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548869747360,"type":"con","orientation":"horizontal","scratchpad_state":"none","percent":1.0,"urgent":false,"marks":["i3monitor"],"focused":false,"output":"HDMI2","layout":"tabbed","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1432,"y":20,"width":488,"height":432},"deco_rect":{"x":0,"y":0,"width":488,"height":20},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"title_format":"monitor","window":null,"window_type":null,"nodes":[{"id":94548870545504,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":0,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/1","title_format":"polybar","window":10485769,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"polybar","title":"/dev/pts/1","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870572144,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":61,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/2","title_format":"i3listn","window":10485786,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3listn","title":"/dev/pts/2","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870574720,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":122,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/3","title_format":"dunst","window":10486062,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"dunst","title":"/dev/pts/3","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870607040,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":183,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/4","title_format":"xfsettingsd","window":10485810,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"xfsettingsd","title":"/dev/pts/4","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870620208,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":244,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/5","title_format":"pulse","window":10485821,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"pulse","title":"/dev/pts/5","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870383216,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":305,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"i3","title_format":"i3","window":23068681,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"i3","title":"i3","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870755968,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":366,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"vb4c","window":41943049,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"vb4c","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870664112,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.125,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":40,"width":488,"height":412},"deco_rect":{"x":427,"y":0,"width":61,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":410},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"bash","title_format":"browser","window":44040201,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"browser","title":"bash","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870607040,94548870574720,94548870572144,94548870755968,94548870664112,94548870383216,94548870620208,94548870545504],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94548869747360],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870546336,"type":"con","orientation":"vertical","scratchpad_state":"none","percent":0.58148148148148148806,"urgent":false,"marks":["i34D"],"focused":false,"output":"HDMI2","layout":"stacked","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":1432,"y":452,"width":488,"height":628},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870372112,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.2000000000000000111,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":552,"width":488,"height":528},"deco_rect":{"x":0,"y":0,"width":488,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":528},"geometry":{"x":0,"y":0,"width":398,"height":1060},"name":"/home/bud - File Manager","title_format":"~","window":12582916,"window_type":"normal","window_properties":{"class":"ThunarD","instance":"thunar-5na","window_role":"Thunar-1595944127-2410875186","title":"/home/bud - File Manager","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870709536,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.2000000000000000111,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":552,"width":488,"height":528},"deco_rect":{"x":0,"y":20,"width":488,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":528},"geometry":{"x":0,"y":0,"width":1518,"height":840},"name":"~/dox/not/ass/todo (not) - Sublime Text","title_format":"not","window":39882239,"window_type":"normal","window_properties":{"class":"Sublime_text","instance":"sublime_not","title":"~/dox/not/ass/todo (not) - Sublime Text","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870659008,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.2000000000000000111,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":552,"width":488,"height":528},"deco_rect":{"x":0,"y":40,"width":488,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":528},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/11","title_format":"cornerterm","window":10485920,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"cornerterm","title":"/dev/pts/11","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870647024,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.2000000000000000111,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":552,"width":488,"height":528},"deco_rect":{"x":0,"y":60,"width":488,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":528},"geometry":{"x":0,"y":0,"width":650,"height":394},"name":"/dev/pts/12","title_format":"irssi","window":10485954,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"irssi","title":"/dev/pts/12","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]},{"id":94548870710000,"type":"con","orientation":"none","scratchpad_state":"none","percent":0.2000000000000000111,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":1432,"y":552,"width":488,"height":528},"deco_rect":{"x":0,"y":80,"width":488,"height":20},"window_rect":{"x":2,"y":0,"width":486,"height":528},"geometry":{"x":0,"y":0,"width":429,"height":608},"name":"/home/bud/git/lab/i3ass/ass/i3viswiz/bashbud/__pre-apply.d - File Manager","title_format":"git/lab/i3ass/ass/i3viswiz/bashbud/__pre-apply.d","window":12588652,"window_type":"normal","window_properties":{"class":"ThunarD","instance":"thunar-lna","window_role":"Thunar-1595948721-1061862893","title":"/home/bud/git/lab/i3ass/ass/i3viswiz/bashbud/__pre-apply.d - File Manager","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870659008,94548870647024,94548870372112,94548870709536,94548870710000],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870546336,94548870577184],"fullscreen_mode":0,"sticky":false,"floating":"user_off","swallows":[]}],"floating_nodes":[],"focus":[94548870373344,94548870589312],"fullscreen_mode":1,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870776896,"type":"workspace","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":0,"width":1920,"height":1080},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"2","num":2,"window":null,"window_type":null,"nodes":[],"floating_nodes":[{"id":94548870751696,"type":"floating_con","orientation":"horizontal","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":45,"y":665,"width":728,"height":370},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":null,"window":null,"window_type":null,"nodes":[{"id":94548870793936,"type":"con","orientation":"none","scratchpad_state":"none","percent":1.0,"urgent":false,"focused":false,"output":"HDMI2","layout":"splith","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":2,"rect":{"x":45,"y":685,"width":728,"height":350},"deco_rect":{"x":0,"y":0,"width":728,"height":20},"window_rect":{"x":2,"y":0,"width":724,"height":348},"geometry":{"x":0,"y":0,"width":724,"height":348},"name":"/dev/pts/13","title_format":"typiskt","window":10486026,"window_type":"unknown","window_properties":{"class":"URxvt","instance":"typiskt","title":"/dev/pts/13","transient_for":null},"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"user_on","swallows":[]}],"floating_nodes":[],"focus":[94548870793936],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"focus":[94548870751696],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94548870366272,94548870776896],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]},{"id":94548870438928,"type":"dockarea","orientation":"none","scratchpad_state":"none","percent":null,"urgent":false,"focused":false,"output":"HDMI2","layout":"dockarea","workspace_layout":"default","last_split_layout":"splith","border":"normal","current_border_width":-1,"rect":{"x":0,"y":1080,"width":1920,"height":0},"deco_rect":{"x":0,"y":0,"width":0,"height":0},"window_rect":{"x":0,"y":0,"width":0,"height":0},"geometry":{"x":0,"y":0,"width":0,"height":0},"name":"bottomdock","window":null,"window_type":null,"nodes":[],"floating_nodes":[],"focus":[],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[{"dock":3,"insert_where":2}]}],"floating_nodes":[],"focus":[94548870435728,94548870432608,94548870438928],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}],"floating_nodes":[],"focus":[94548870396672,94548870336688],"fullscreen_mode":0,"sticky":false,"floating":"auto_off","swallows":[]}



================================================
FILE: src/i3zen/config.mak
================================================
NAME         := i3zen
VERSION      := 0.21
CREATED      := 2017-09-11
UPDATED      := 2024-04-21
AUTHOR       := budRich
CONTACT      := https://github.com/budlabs/i3ass
USAGE        := $(NAME) [OPTIONS]
DESCRIPTION  := zentered container, full focus
ORGANISATION := budlabs
LICENSE      := MIT

MANPAGE_LAYOUT  :=               \
	$(CACHE_DIR)/help_table.txt    \
	$(CACHE_DIR)/long_help.md      \
	$(DOCS_DIR)/description.md     \
	$(DOCS_DIR)/manpage_footer.md  \
	$(CACHE_DIR)/copyright.txt

$(CACHE_DIR)/wiki.md: config.mak $(MANPAGE_LAYOUT)
	@$(info making $@)
	{
	  printf '%s\n' '## NAME' '$(NAME) - $(DESCRIPTION)' \
	                '## SYNOPSIS' '`$(USAGE)`'           \
	                '## OPTIONS'

	  sed 's/^/    /g' $(CACHE_DIR)/help_table.txt
	  cat $(CACHE_DIR)/long_help.md

	  echo "## USAGE"
	  cat $(DOCS_DIR)/description.md

		printf '%s\n'                            \
		  '## CONTACT'                           \
			"Send bugs and feature requests to:  " \
			"$(CONTACT)/issues"                    \
			"## COPYRIGHT"

		cat $(CACHE_DIR)/copyright.txt

	  cat $(DOCS_DIR)/manpage_footer.md
	} > $@



================================================
FILE: src/i3zen/i3zen
================================================
#!/bin/bash

: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KING_PID_FILE:=$XDG_RUNTIME_DIR/i3ass/i3king.pid}"

main(){

  declare -g _msgstring _mark _json  _ws_zen \
             _var_zen_current _var_zen_new
  declare -A i3list

  _json=$(i3-msg -t get_tree)
  _mark=${_o[mark]:-centerzen}

  eval "$(i3list --mark "$_mark" --json "$_json")"

  # window was floating: zenCON_ID=WIDTHxHEIGHT+XPOS+YPOS:WORKSPACE_ORIGIN
  # window was tiled:    zenCON_ID=tiled:WORKSPACE_ORIGIN
  _var_zen_current=$(i3var get "zen${i3list[AWC]}")

  ((i3list[AWF])) \
    && _var_zen_new="${i3list[AWW]}x${i3list[AWH]}+${i3list[AWX]}+${i3list[AWY]}:" \
    || _var_zen_new="tiled:"

  _var_zen_new+=${i3list[WAN]}

  # if a container with mark "$_mark" exist
  # WTN is workspace-name where that container is
  if [[ ! ${_ws_zen:=${i3list[WTN]}} ]]; then
    create_zen_workspace

  # APA = active containers parent ID
  # TWC = target container (has mark "$_mark") ID
  elif ((i3list[APA] == i3list[TWC])); then
    unzen_container

  else
    move_to_zen_container
  fi

  ((_o[verbose])) || quite_flag=-q

  [[ $_msgstring ]] && {
    >&2 i3-msg "$quite_flag" "${_msgstring%;}"
    unset _msgstring
  }

  # if origin workspace doesn't exist after zen
  # container is **Automatically** created. we
  # move zen container back to origin(active) workspace. 
  [[ ${_o[workspace]}$_ws_zen ]] || {
    re='"name":"'"${i3list[WAN]}"'",'
    [[ $(i3-msg -t get_workspaces) =~ $re ]] || {

      messy "[con_mark=$_mark]"                 \
            move --no-auto-back-and-forth to workspace "${i3list[WAN]}", \
            workspace --no-auto-back-and-forth "${i3list[WAN]}"

      >&2 i3-msg "$quite_flag" "${_msgstring%;}"
    }
  }
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud



================================================
FILE: src/i3zen/i3zen.1
================================================
.nh
.TH I3ZEN   2023-07-29 budlabs "User Manuals"
.SH NAME
.PP
i3zen - zentered container, full focus

.SH SYNOPSIS
.PP
\fB\fCi3zen [OPTIONS]\fR

.SH OPTIONS
.PP
.RS

.nf
--dryrun                  | don't execute any commands  
--height        INT       | height of zen container in percentage  
-h, --help                | print help and exit  
-m, --mark      MARK      | zen container mark  
--verbose                 | show verbose output on stderr during execution  
-v, --version             | print version info and exit  
--width         INT       | height of zen container in percentage  
-w, --workspace WORKSPACE | workspace name to use  
-x, --xpos      INT       | position of container on the X axis
-y, --ypos      INT       | position of container on the X axis

.fi
.RE

.SS -m, --mark      MARK
.PP
If not set the \fIzen container\fP will be marked \fBcenterzen\fP\&.
If set it will instead be marked MARK when it is created.
This option can be used to create multiple zen containers.

.SS -w, --workspace WORKSPACE
.PP
If this option is not set the \fIzen container\fP will
be created on a vacant workspace (the highest
numbered workspace + 1).

.SH USAGE
.PP
move current window to a "clean" workspace,
put it in a centered, floating tabbed container.

.PP
triggering the command on a window that is already
"zen" will move it back to the workspace it came
from.

.SH CONTACT
.PP
Send bugs and feature requests to:
.br
https://github.com/budlabs/i3ass/issues

.SH COPYRIGHT
.PP
Copyright (c) 2017-2023, budRich of budlabs
.br
SPDX-License-Identifier: MIT

.SH SEE ALSO
.PP
https://www.reddit.com/r/i3wm/comments/6x8ajm/oc_i3zen/
.br
https://www.reddit.com/r/unixporn/comments/6xbdtk/oci3_i3zen/
.br
https://gist.github.com/budRich/16765b5468201aa734d0ec1c0870fd0c



================================================
FILE: src/i3zen/options
================================================
    [--width INT] [--height INT] [--xpos|-x INT] [--ypos|-y INT] [--mark|-m MARK] [--workspace|-w WORKSPACE]
    --verbose [--dryrun] 
    --help|-h
    --version|-v



================================================
FILE: src/i3zen/watch.sh
================================================
#!/bin/bash

_source=$(readlink -f "${BASH_SOURCE[0]}")
_dir=${_source%/*}

while read -r ; do
  clear
  bashbud --bump "$_dir"
  shellcheck "$_dir/program.sh" && {
    # time(
    #   while ((++i<50));do 
    #     "$_dir/program.sh" -i typiskt --json "$_dir/t/tree.json"
    #   done >/dev/null
    # )
    :
  }
done < <(
  inotifywait --event close_write          \
              --recursive --monitor        \
              --exclude 'awklib[.]sh$'     \
              "$_dir"/lib/*.sh             \
              "$_dir/main.sh"              \
              "$_dir/manifest.md"
)



================================================
FILE: src/i3zen/docs/description.md
================================================
move current window to a "clean" workspace,
put it in a centered, floating tabbed container.

triggering the command on a window that is already
"zen" will move it back to the workspace it came
from.



================================================
FILE: src/i3zen/docs/manpage_footer.md
================================================
## SEE ALSO
https://www.reddit.com/r/i3wm/comments/6x8ajm/oc_i3zen/  
https://www.reddit.com/r/unixporn/comments/6xbdtk/oci3_i3zen/  
https://gist.github.com/budRich/16765b5468201aa734d0ec1c0870fd0c  




================================================
FILE: src/i3zen/docs/options/dryrun
================================================
don't execute any commands  



================================================
FILE: src/i3zen/docs/options/height
================================================
height of zen container in percentage  



================================================
FILE: src/i3zen/docs/options/help
================================================
print help and exit  



================================================
FILE: src/i3zen/docs/options/mark
================================================
zen container mark  

If not set the *zen container* will be marked **centerzen**.
If set it will instead be marked MARK when it is created.
This option can be used to create multiple zen containers.



================================================
FILE: src/i3zen/docs/options/verbose
================================================
show verbose output on stderr during execution  



================================================
FILE: src/i3zen/docs/options/version
================================================
print version info and exit  



================================================
FILE: src/i3zen/docs/options/width
================================================
height of zen container in percentage  



================================================
FILE: src/i3zen/docs/options/workspace
================================================
workspace name to use  

If this option is not set the *zen container* will
be created on a vacant workspace (the highest
numbered workspace + 1).



================================================
FILE: src/i3zen/docs/options/xpos
================================================
position of container on the X axis



================================================
FILE: src/i3zen/docs/options/ypos
================================================
position of container on the X axis



================================================
FILE: src/i3zen/func/CLEANUP.sh
================================================
#!/bin/bash #bashbud

trap 'CLEANUP' EXIT INT HUP

CLEANUP() {
  
  ((___t)) && >&2 echo "<<< $___cmd" "$(( (10#${EPOCHREALTIME//[!0-9]} - ___t) / 1000 ))ms" #bashbud
}



================================================
FILE: src/i3zen/func/create_zen_workspace.sh
================================================
#!/bin/bash

create_zen_workspace() {

  local ws_zen width height x y

  [[ ${_o[workspace]} ]] \
    && ws_zen=${_o[workspace]}          \
    || ws_zen=$(next_vacant_workspace)

  messy "[con_id=${i3list[AWC]}]"    \
        move --no-auto-back-and-forth to workspace "$ws_zen," \
        floating disable,            \
        split v, layout tabbed,      \
        focus, focus parent

  messy "mark $_mark"

  ((_o[width]  > 0 && _o[width]  < 100)) || _o[width]=75
  ((_o[height] > 0 && _o[height] < 100)) || _o[height]=90

  width=$((  (i3list[WAW] * _o[width])  / 100 ))
  height=$(( (i3list[WAH] * _o[height]) / 100 ))

  ((_o[xpos] < 0)) && _o[xpos]=$(( i3list[WAW]-(width  - _o[xpos]) ))
  ((_o[ypos] < 0)) && _o[ypos]=$(( i3list[WAH]-(height - _o[ypos]) ))

  x=${_o[xpos]:-$(( (i3list[WAW]-width)  / 2 ))}
  y=${_o[ypos]:-$(( (i3list[WAH]-height) / 2 ))}

  x=$((x + i3list[WAX])) y=$((y + i3list[WAY]))

  messy "[con_mark=$_mark]" \
        floating enable,    \
        workspace --no-auto-back-and-forth "$ws_zen"

  # if the focus action below isn't included, the
  # container will not resize properly..
  messy "[con_id=${i3list[AWC]}] focus"

  messy "[con_mark=$_mark]"           \
        "resize set $width $height ," \
        "move absolute position $x $y"

  [[ $_var_zen_current ]] \
    || i3var set "zen${i3list[AWC]}" "$_var_zen_new"
}



================================================
FILE: src/i3zen/func/move_to_zen_container.sh
================================================
#!/bin/bash

move_to_zen_container() {
  messy "[con_id=${i3list[AWC]}]"     \
        move --no-auto-back-and-forth to workspace "$(next_vacant_workspace)", \
        "floating disable,"           \
        "move to mark $_mark,"        \
        "focus, workspace --no-auto-back-and-forth $_ws_zen"

  [[ $_var_zen_current ]] || i3var set "zen${i3list[AWC]}" "$_var_zen_new"
}



================================================
FILE: src/i3zen/func/next_vacant_workspace.sh
================================================
#!/bin/bash

next_vacant_workspace() {

  local ws_json ws_temp ws_free

  ws_json=$(i3-msg -t get_workspaces)

  while read -rs ; do
    if [[ $REPLY =~ \"num\":([0-9-]+) ]]; then
      ws_temp=${BASH_REMATCH[1]}
      ((ws_temp > ws_free)) && ws_free=$ws_temp
    fi
  done <<< "${ws_json//,/$'\n'}"

  echo "$((ws_free + 1))"
}



================================================
FILE: src/i3zen/func/tile_with_i3king.sh
================================================
#!/bin/bash

tile_with_i3king() {
  [[ -f $I3_KING_PID_FILE ]] && {

    ((_o[verbose])) && ERM "i3zen -> i3king --conid ${i3list[AWC]}"

    mapfile -t king_commands <<< "$(i3king --conid "${i3list[AWC]}" \
                                           --print-commands         \
                                           --json "$_json")"

    for command in "${!king_commands[@]}"; do
      if [[ ${king_commands[command]} =~ floating\ enable ]]
        then unset 'king_commands[command]'
        else messy "${king_commands[command]}"
      fi
    done
  }
}



================================================
FILE: src/i3zen/func/unzen_container.sh
================================================
#!/bin/bash

unzen_container() {

  local trg_geo trg_ws re float_as w h y x

  # "WIDTHxHEIGHT+X+Y" || "tiled"
  [[ $_var_zen_current =~ ([^:]+):(.+) ]] && {
    trg_geo=${BASH_REMATCH[1]}
    trg_ws=${BASH_REMATCH[2]}
  }
  
  re='([0-9]+)x([0-9]+)\+([0-9-]+)\+([0-9-]+)'

  if [[ $trg_geo =~ $re ]]; then

    float_as="floating enable"

    w=${BASH_REMATCH[1]} h=${BASH_REMATCH[2]}
    x=${BASH_REMATCH[3]} y=${BASH_REMATCH[4]}

    float_as+=", resize set $w $h"
    float_as+=", move position $x $y"
  else
    float_as="floating disable"
  fi

  messy "[con_id=${i3list[AWC]}]"    \
        floating enable,             \
        move --no-auto-back-and-forth to workspace "$trg_ws", \
        "$float_as" ,                \
        workspace --no-auto-back-and-forth "$trg_ws"

  i3var set "zen${i3list[AWC]}"

  [[ $float_as = "floating disable" ]] \
    && tile_with_i3king
}



================================================
SYMLINK: src/i3zen/func/ERR.sh -> ERR.sh
================================================



================================================
SYMLINK: src/i3zen/func/LOG.sh -> LOG.sh
================================================



================================================
SYMLINK: src/i3zen/func/MSG.sh -> MSG.sh
================================================



================================================
SYMLINK: src/i3zen/func/TIMER.sh -> TIMER.sh
================================================



================================================
SYMLINK: src/i3zen/GNUmakefile -> Makefile
================================================



================================================
SYMLINK: src/i3zen/share.mak -> share.mak
================================================



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: budRich

---

### before anything else, try to reproduce the bug with the [wiki config](https://github.com/budlabs/i3ass/wiki/i3-config-example)

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Distro [e.g. RHEL, Ubuntu 12.10, Arch btw]

**Post the output of the command `i3ass`**
```
output goes here
```


**Additional context**
Add any other context about the problem here.


