#!/usr/bin/env bash
# i3-project-current - Query current active project
# Part of i3 Project Event Daemon (T011)

set -euo pipefail

# Configuration
SOCKET_PATH="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}/i3-project-daemon/ipc.sock"

# Usage message
usage() {
    cat <<EOF
Usage: i3-project-current [OPTIONS]

Query the currently active i3 project.

Options:
    --format=FORMAT  Output format: text (default), json, icon
    --help, -h       Show this help message

Formats:
    text  Human-readable text (e.g., "Active project: nixos")
    json  JSON object with project details
    icon  Just the project icon (for status bars)

Examples:
    i3-project-current
    i3-project-current --format=icon
    i3-project-current --format=json

Exit codes:
    0  Success
    1  Error
    2  Daemon not running
EOF
    exit 0
}

# Check if daemon is running
check_daemon() {
    if [[ ! -S "$SOCKET_PATH" ]]; then
        echo "Error: Daemon not running" >&2
        exit 2
    fi
}

# Send JSON-RPC request
send_request() {
    local method="$1"
    local params="${2:-{}}"

    local request
    request=$(cat <<EOF
{"jsonrpc":"2.0","method":"$method","params":$params,"id":1}
EOF
)

    response=$(echo "$request" | nc -U -N "$SOCKET_PATH" 2>/dev/null || true)

    if [[ -z "$response" ]]; then
        echo "Error: No response from daemon" >&2
        exit 2
    fi

    echo "$response"
}

# Get active project
get_active_project() {
    local format="${1:-text}"

    # Query daemon status (consistent with i3pm status command)
    response=$(send_request "get_status")

    # Extract project name using jq for proper JSON parsing
    project_name=$(echo "$response" | jq -r '.result.active_project // "null"')

    if [[ "$project_name" == "null" || -z "$project_name" ]]; then
        case "$format" in
            text)
                echo "Global mode (no active project)"
                ;;
            json)
                echo '{"project_name":null,"is_global":true}'
                ;;
            icon)
                echo ""  # Empty for global mode
                ;;
        esac
        return 0
    fi

    # Get project details
    projects_response=$(send_request "get_projects")

    # Extract project icon and display_name using jq
    icon=$(echo "$projects_response" | jq -r ".result.projects.\"$project_name\".icon // \"📁\"")
    display_name=$(echo "$projects_response" | jq -r ".result.projects.\"$project_name\".display_name // \"$project_name\"")

    case "$format" in
        text)
            echo "Active project: $display_name ($icon $project_name)"
            ;;
        json)
            echo "{\"project_name\":\"$project_name\",\"display_name\":\"$display_name\",\"icon\":\"$icon\",\"is_global\":false}"
            ;;
        icon)
            echo "$icon $project_name"
            ;;
    esac
}

# Main
main() {
    format="text"

    # Parse arguments
    for arg in "$@"; do
        case "$arg" in
            -h|--help)
                usage
                ;;
            --format=*)
                format="${arg#*=}"
                ;;
            *)
                echo "Error: Unknown option: $arg" >&2
                usage
                ;;
        esac
    done

    # Validate format
    if [[ ! "$format" =~ ^(text|json|icon)$ ]]; then
        echo "Error: Invalid format: $format" >&2
        exit 1
    fi

    check_daemon
    get_active_project "$format"
}

main "$@"
