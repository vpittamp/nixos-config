#!/usr/bin/env bash
# Report NixOS and Home Manager generation metadata in several formats.

set -euo pipefail

shopt -s nullglob

usage() {
  cat <<'EOF'
Usage: nixos-generation-info [--short] [--json] [--export] [--status] [--warning] [--help]

Options:
  --short    Emit a compact prompt-friendly string (e.g. g123@abc1234 hm42⚠)
  --json     Emit machine-readable JSON describing the current state
  --export   Emit shell assignments suitable for eval to populate env vars
  --status   Print overall sync status (system + Home Manager)
  --warning  Print a warning string (prefixed with ⚠) when out-of-sync
  --help     Show this help message

The command inspects the active NixOS system profile and the Home Manager
profile for the current user (or $NIXOS_GENERATION_INFO_HOME_MANAGER_USER if
provided). When available, it also sources /run/current-system/etc/nixos-metadata
to expose build details such as git commit hashes and flake inputs.
EOF
}

format="default"

while (( $# )); do
  case "$1" in
    --short)
      format="short"
      ;;
    --json)
      format="json"
      ;;
    --export)
      format="export"
      ;;
    --status)
      format="status"
      ;;
    --warning)
      format="warning"
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "nixos-generation-info: unknown option '$1'" >&2
      usage >&2
      exit 1
      ;;
  esac
  shift
done

json_escape() {
  local value="$1"
  printf '"'
  local i c
  for (( i = 0; i < ${#value}; i++ )); do
    c=${value:i:1}
    case "$c" in
      "\\") printf '\\\\' ;;
      '"') printf '\\"' ;;
      $'\n') printf '\\n' ;;
      $'\r') printf '\\r' ;;
      $'\t') printf '\\t' ;;
      *) printf '%s' "$c" ;;
    esac
  done
  printf '"'
}

# --- System generation information ---------------------------------------------------------

current_system_target=$(readlink -f /run/current-system 2>/dev/null || printf '')
latest_profile_link=$(readlink /nix/var/nix/profiles/system 2>/dev/null || printf '')
latest_system_target=$(readlink -f /nix/var/nix/profiles/system 2>/dev/null || printf '')

current_generation="unknown"
if [[ -n "$current_system_target" ]]; then
  for link in /nix/var/nix/profiles/system-*-link; do
    [[ -e "$link" ]] || continue
    if [[ $(readlink -f "$link" 2>/dev/null || printf '') == "$current_system_target" ]]; then
      current_generation=${link##*/}
      current_generation=${current_generation#system-}
      current_generation=${current_generation%-link}
      break
    fi
  done
fi

latest_generation="unknown"
if [[ -n "$latest_profile_link" ]]; then
  latest_generation=${latest_profile_link#system-}
  latest_generation=${latest_generation%-link}
fi

metadata_file="/run/current-system/etc/nixos-metadata"

metadata_available=0
commit="unknown"
short_commit="unknown"
build_date="unknown"
dirty_flag="unknown"
source_url=""
nixpkgs_rev="unknown"
home_manager_rev="unknown"

if [[ -f "$metadata_file" ]]; then
  metadata_available=1
  set +u
  # shellcheck disable=SC1090
  source "$metadata_file"
  set -u
  commit=${GIT_COMMIT:-unknown}
  short_commit=${GIT_SHORT_COMMIT:-${commit:0:7}}
  build_date=${BUILD_DATE:-${GIT_LAST_MODIFIED:-unknown}}
  dirty_flag=${GIT_DIRTY:-unknown}
  source_url=${GIT_SOURCE_URL:-}
  nixpkgs_rev=${NIXPKGS_REV:-unknown}
  home_manager_rev=${HOME_MANAGER_REV:-unknown}
elif [[ -f /run/current-system/configuration-revision ]]; then
  commit=$(< /run/current-system/configuration-revision)
  short_commit=${commit:0:7}
fi

if [[ -z "$short_commit" || "$short_commit" == "unknown" ]] && [[ "$commit" != "unknown" ]]; then
  short_commit=${commit:0:7}
fi

if [[ "$dirty_flag" == "true" ]]; then
  dirty_symbol='*'
  dirty_export=1
elif [[ "$dirty_flag" == "false" ]]; then
  dirty_symbol=''
  dirty_export=0
else
  dirty_symbol=''
  dirty_export=0
fi

out_of_sync=0
if [[ -n "$current_system_target" && -n "$latest_system_target" && "$current_system_target" != "$latest_system_target" ]]; then
  out_of_sync=1
elif [[ "$current_generation" != "unknown" && "$latest_generation" != "unknown" && "$current_generation" != "$latest_generation" ]]; then
  out_of_sync=1
fi

# --- Home Manager generation information ---------------------------------------------------

hm_user_default=${SUDO_USER:-${USER:-}}
hm_user=${NIXOS_GENERATION_INFO_HOME_MANAGER_USER:-$hm_user_default}
hm_profile_dir=""
hm_current_link=""
hm_current_target=""
hm_current_generation="unknown"
hm_latest_generation="unknown"
hm_latest_target=""
hm_out_of_sync=0
hm_status="unavailable"

if [[ -n "$hm_user" ]]; then
  hm_profile_roots=()
  if [[ -d "/nix/var/nix/profiles/per-user/$hm_user" ]]; then
    hm_profile_roots+=("/nix/var/nix/profiles/per-user/$hm_user")
  fi
  user_home=""
  if user_home=$(getent passwd "$hm_user" 2>/dev/null | cut -d: -f6); then
    if [[ -d "$user_home/.local/state/nix/profiles" ]]; then
      hm_profile_roots+=("$user_home/.local/state/nix/profiles")
    fi
  fi

  for candidate in "${hm_profile_roots[@]}"; do
    if [[ -e "$candidate/home-manager" ]]; then
      hm_profile_dir="$candidate"
      break
    fi
    # Fallback: accept directory even if current link missing (will check latest)
    if [[ -z "$hm_profile_dir" && -d "$candidate" ]]; then
      hm_profile_dir="$candidate"
    fi
  done

  if [[ -n "$hm_profile_dir" ]]; then
    hm_current_link="$hm_profile_dir/home-manager"
    if [[ -e "$hm_current_link" ]]; then
      hm_current_target=$(readlink -f "$hm_current_link" 2>/dev/null || printf '')
    fi

    hm_latest_generation_num=-1
    for link in "$hm_profile_dir"/home-manager-*-link; do
      [[ -e "$link" ]] || continue
      base=${link##*/}
      gen=${base#home-manager-}
      gen=${gen%-link}
      if [[ "$gen" =~ ^[0-9]+$ ]]; then
        link_target=$(readlink -f "$link" 2>/dev/null || printf '')
        if [[ "$hm_current_generation" = "unknown" && -n "$hm_current_target" && "$link_target" = "$hm_current_target" ]]; then
          hm_current_generation="$gen"
        fi
        if (( gen > hm_latest_generation_num )); then
          hm_latest_generation="$gen"
          hm_latest_generation_num=$gen
          hm_latest_target="$link_target"
        fi
      fi
    done

    if [[ "$hm_current_generation" = "unknown" && -e "$hm_current_link" ]]; then
      current_base=$(readlink "$hm_current_link" 2>/dev/null || printf '')
      if [[ "$current_base" =~ home-manager-([0-9]+)-link$ ]]; then
        hm_current_generation="${BASH_REMATCH[1]}"
      fi
    fi

    if [[ -n "$hm_current_target" && -n "$hm_latest_target" && "$hm_current_target" != "$hm_latest_target" ]]; then
      hm_out_of_sync=1
    elif [[ "$hm_current_generation" != "unknown" && "$hm_latest_generation" != "unknown" && "$hm_current_generation" != "$hm_latest_generation" ]]; then
      hm_out_of_sync=1
    fi

    if [[ "$hm_current_generation" != "unknown" || "$hm_latest_generation" != "unknown" ]]; then
      hm_status="in-sync"
      [[ $hm_out_of_sync -eq 1 ]] && hm_status="out-of-sync"
    fi
  fi
fi

hm_short="hm${hm_current_generation:-unknown}"
hm_latest_short="hm${hm_latest_generation:-unknown}"

# --- Aggregate outputs ---------------------------------------------------------------------

status="in-sync"
[[ $out_of_sync -eq 1 || $hm_out_of_sync -eq 1 ]] && status="out-of-sync"

short_output="g${current_generation:-unknown}@${short_commit:-unknown}${dirty_symbol}"
if [[ "$hm_current_generation" != "unknown" ]]; then
  short_output+=" ${hm_short}"
fi
[[ $out_of_sync -eq 1 || $hm_out_of_sync -eq 1 ]] && short_output+="⚠"

warning_parts=()
if [[ $out_of_sync -eq 1 ]]; then
  if [[ "$latest_generation" != "unknown" ]]; then
    warning_parts+=("g${latest_generation}")
  else
    warning_parts+=("system")
  fi
fi
if [[ $hm_out_of_sync -eq 1 ]]; then
  if [[ "$hm_latest_generation" != "unknown" ]]; then
    warning_parts+=("${hm_latest_short}")
  else
    warning_parts+=("home-manager")
  fi
fi

warning_message=""
if (( ${#warning_parts[@]} > 0 )); then
  warning_message="${warning_parts[*]}"
fi

# --- Output formats ------------------------------------------------------------------------

case "$format" in
  default)
    echo "Current generation: g${current_generation:-unknown}"
    if [[ "$latest_generation" != "unknown" ]]; then
      echo "Latest generation:  g${latest_generation}"
    fi
    echo "Status:             $status"
    if [[ -n "$hm_user" && -d "$hm_profile_dir" ]]; then
      echo "Home Manager user:  $hm_user"
      echo "HM generation:      ${hm_short}"
      if [[ "$hm_latest_generation" != "unknown" ]]; then
        echo "HM latest:          ${hm_latest_short}"
      fi
      echo "HM status:          $hm_status"
    fi
    echo "Commit:             ${commit:-unknown}"
    echo "Short commit:       ${short_commit:-unknown}"
    echo "Metadata available: ${metadata_available}"
    echo "Build date:         ${build_date:-unknown}"
    if [[ -n "$source_url" ]]; then
      echo "Source URL:         $source_url"
    fi
    if [[ "$nixpkgs_rev" != "unknown" ]]; then
      echo "nixpkgs rev:        $nixpkgs_rev"
    fi
    if [[ "$home_manager_rev" != "unknown" ]]; then
      echo "home-manager rev:   $home_manager_rev"
    fi
    ;;
  short)
    printf '%s\n' "$short_output"
    ;;
  status)
    printf '%s\n' "$status"
    ;;
  warning)
    if [[ -n "$warning_message" ]]; then
      printf '⚠ %s\n' "$warning_message"
    else
      exit 1
    fi
    ;;
  export)
    printf 'NIXOS_GENERATION_INFO_GENERATION=%q\n' "g${current_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_GENERATION_RAW=%q\n' "${current_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_LATEST=%q\n' "g${latest_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_LATEST_RAW=%q\n' "${latest_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_STATUS=%q\n' "$status"
    printf 'NIXOS_GENERATION_INFO_OUT_OF_SYNC=%q\n' "$out_of_sync"
    printf 'NIXOS_GENERATION_INFO_SHORT=%q\n' "$short_output"
    printf 'NIXOS_GENERATION_INFO_WARNING_PARTS=%q\n' "$warning_message"
    printf 'NIXOS_GENERATION_INFO_COMMIT=%q\n' "$commit"
    printf 'NIXOS_GENERATION_INFO_SHORT_COMMIT=%q\n' "$short_commit"
    printf 'NIXOS_GENERATION_INFO_BUILD_DATE=%q\n' "$build_date"
    printf 'NIXOS_GENERATION_INFO_DIRTY=%q\n' "$dirty_export"
    printf 'NIXOS_GENERATION_INFO_METADATA=%q\n' "$metadata_available"
    printf 'NIXOS_GENERATION_INFO_SOURCE_URL=%q\n' "$source_url"
    printf 'NIXOS_GENERATION_INFO_NIXPKGS_REV=%q\n' "$nixpkgs_rev"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_REV=%q\n' "$home_manager_rev"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_USER=%q\n' "$hm_user"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_GENERATION=%q\n' "$hm_short"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_GENERATION_RAW=%q\n' "${hm_current_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_LATEST=%q\n' "$hm_latest_short"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_LATEST_RAW=%q\n' "${hm_latest_generation:-unknown}"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_OUT_OF_SYNC=%q\n' "$hm_out_of_sync"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_STATUS=%q\n' "$hm_status"
    printf 'NIXOS_GENERATION_INFO_HOME_MANAGER_SHORT=%q\n' "$hm_short"
    ;;
  json)
    printf '{'
    printf '\n  "generation": %s,' "$(json_escape "g${current_generation:-unknown}")"
    printf '\n  "generationRaw": %s,' "$(json_escape "${current_generation:-unknown}")"
    printf '\n  "latestGeneration": %s,' "$(json_escape "g${latest_generation:-unknown}")"
    printf '\n  "latestGenerationRaw": %s,' "$(json_escape "${latest_generation:-unknown}")"
    printf '\n  "status": %s,' "$(json_escape "$status")"
    printf '\n  "outOfSync": %s,' "$out_of_sync"
    printf '\n  "commit": %s,' "$(json_escape "$commit")"
    printf '\n  "shortCommit": %s,' "$(json_escape "$short_commit")"
    printf '\n  "dirty": %s,' "$dirty_export"
    printf '\n  "metadata": %s,' "$metadata_available"
    printf '\n  "buildDate": %s,' "$(json_escape "$build_date")"
    printf '\n  "sourceUrl": %s,' "$(json_escape "$source_url")"
    printf '\n  "nixpkgsRev": %s,' "$(json_escape "$nixpkgs_rev")"
    printf '\n  "homeManagerRev": %s,' "$(json_escape "$home_manager_rev")"
    printf '\n  "homeManagerUser": %s,' "$(json_escape "$hm_user")"
    printf '\n  "homeManagerGeneration": %s,' "$(json_escape "$hm_short")"
    printf '\n  "homeManagerGenerationRaw": %s,' "$(json_escape "${hm_current_generation:-unknown}")"
    printf '\n  "homeManagerLatestGeneration": %s,' "$(json_escape "$hm_latest_short")"
    printf '\n  "homeManagerLatestGenerationRaw": %s,' "$(json_escape "${hm_latest_generation:-unknown}")"
    printf '\n  "homeManagerOutOfSync": %s,' "$hm_out_of_sync"
    printf '\n  "homeManagerStatus": %s,' "$(json_escape "$hm_status")"
    printf '\n  "short": %s,' "$(json_escape "$short_output")"
    printf '\n  "warning": %s' "$(json_escape "$warning_message")"
    printf '\n}\n'
    ;;
  *)
    echo "nixos-generation-info: unsupported format '$format'" >&2
    exit 1
    ;;
esac
